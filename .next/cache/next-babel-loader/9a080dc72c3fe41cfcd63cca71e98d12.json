{"ast":null,"code":"var _jsxFileName = \"/mnt/c/Users/arash/Documents/DevInDoc/Getaboard/demoEmail/reward-test/src/components/Table.tsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useState } from 'react';\nimport { useTable, usePagination } from 'react-table';\nimport styled from 'styled-components';\nconst Styles = styled.div`\n  padding: 1rem;\n\n  table {\n    border-spacing: 0;\n    border: 1px solid black;\n\n    tr {\n      :last-child {\n        td {\n          border-bottom: 0;\n        }\n      }\n    }\n\n    th,\n    td {\n      margin: 0;\n      padding: 0.5rem;\n      border-bottom: 1px solid black;\n      border-right: 1px solid black;\n\n      :last-child {\n        border-right: 0;\n      }\n\n      input {\n        font-size: 1rem;\n        padding: 0;\n        margin: 0;\n        border: 0;\n      }\n    }\n\n    .pagination {\n      padding: 0.5rem;\n    }\n  }\n`;\n\nfunction TableComponent({\n  columns,\n  data,\n  setData,\n  editableFields\n}) {\n  const {\n    0: skipPageReset,\n    1: setSkipPageReset\n  } = useState(false); // We need to keep the table from resetting the pageIndex when we\n  // Update data. So we can keep track of that flag with a ref.\n  // When our cell renderer calls updateMyData, we'll use\n  // the rowIndex, columnId and new value to update the\n  // original data\n\n  const updateData = (rowIndex, columnId, value) => {\n    // We also turn on the flag to not reset the page\n    setSkipPageReset(true);\n    setData(old => old.map((row, index) => {\n      if (index === rowIndex) {\n        return _objectSpread(_objectSpread({}, old[rowIndex]), {}, {\n          [columnId]: value\n        });\n      }\n\n      return row;\n    }));\n  }; // After data chagnes, we turn the flag back off\n  // so that if data actually changes when we're not\n  // editing it, the page is reset\n\n\n  useEffect(() => {\n    setSkipPageReset(false);\n  }, [data]);\n  return __jsx(Styles, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 5\n    }\n  }, __jsx(Table, {\n    columns: columns,\n    data: data,\n    updateData: updateData,\n    skipPageReset: skipPageReset,\n    editableFields: editableFields,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default TableComponent; // Be sure to pass our updateData and the skipPageReset option\n\nfunction Table({\n  columns,\n  data,\n  updateData,\n  skipPageReset,\n  editableFields\n}) {\n  // Create an editable cell renderer\n  const EditableCell = (_ref) => {\n    let {\n      value: initialValue,\n      row: {\n        index\n      },\n      column: {\n        id\n      },\n      updateData\n    } = _ref,\n        rest = _objectWithoutProperties(_ref, [\"value\", \"row\", \"column\", \"updateData\"]);\n\n    console.log(' them edit', initialValue, index, id, rest); // We need to keep and update the state of the cell normally\n\n    const {\n      0: value,\n      1: setValue\n    } = useState(initialValue);\n\n    const onChange = e => {\n      setValue(e.target.value);\n    }; // We'll only update the external data when the input is blurred\n\n\n    const onBlur = () => {\n      updateData(index, id, value);\n    }; // If the initialValue is changed external, sync it up with our state\n\n\n    useEffect(() => {\n      setValue(initialValue);\n    }, [initialValue]);\n    return (// <input\n      //   value={value}\n      //   onChange={onChange}\n      //   onBlur={onBlur}\n      //   className=\"w-full bg-transparent\"\n      // />\n      null\n    );\n  }; // Set our editable cell renderer as the default Cell renderer\n\n\n  const defaultColumn = {\n    Cell: EditableCell\n  };\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    prepareRow,\n    page,\n    canPreviousPage,\n    canNextPage,\n    pageOptions,\n    pageCount,\n    gotoPage,\n    nextPage,\n    previousPage,\n    setPageSize,\n    state: {\n      pageIndex,\n      pageSize\n    }\n  } = useTable({\n    columns,\n    data,\n    defaultColumn,\n    // use the skipPageReset option to disable page resetting temporarily\n    autoResetPage: !skipPageReset,\n    updateData\n  }, usePagination);\n\n  function callDebugger(data) {\n    debugger;\n  } // Render the UI for your table\n\n\n  return __jsx(React.Fragment, null, __jsx(\"table\", _extends({}, getTableProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 84\n    }\n  }), __jsx(\"thead\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 86\n    }\n  }, headerGroups.map(headerGroup => __jsx(\"tr\", _extends({}, headerGroup.getHeaderGroupProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 92\n    }\n  }), headerGroup.headers.map(column => __jsx(\"th\", _extends({}, column.getHeaderProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 98\n    }\n  }), column.render('Header')))))), __jsx(\"tbody\", _extends({}, getTableBodyProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 86\n    }\n  }), page.map((row, i) => {\n    prepareRow(row);\n    return __jsx(\"tr\", _extends({}, row.getRowProps(), {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 94\n      }\n    }), row.cells.map(cell => {\n      return __jsx(\"td\", _extends({}, cell.getCellProps(), {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 275,\n          columnNumber: 102\n        }\n      }), cell.render('Cell'));\n    }));\n  }))), __jsx(\"div\", {\n    className: \"pagination\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 291,\n      columnNumber: 84\n    }\n  }, __jsx(\"button\", {\n    onClick: () => gotoPage(0),\n    disabled: !canPreviousPage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 292,\n      columnNumber: 86\n    }\n  }, '<<'), ' ', __jsx(\"button\", {\n    onClick: () => previousPage(),\n    disabled: !canPreviousPage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 306,\n      columnNumber: 86\n    }\n  }, '<'), ' ', __jsx(\"button\", {\n    onClick: () => nextPage(),\n    disabled: !canNextPage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 318,\n      columnNumber: 86\n    }\n  }, '>'), ' ', __jsx(\"button\", {\n    onClick: () => gotoPage(pageCount - 1),\n    disabled: !canNextPage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 330,\n      columnNumber: 86\n    }\n  }, '>>'), ' ', __jsx(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 345,\n      columnNumber: 86\n    }\n  }, \"Page\", ' ', __jsx(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 347,\n      columnNumber: 88\n    }\n  }, pageIndex + 1, ' ', \"of\", ' ', pageOptions.length), ' '), __jsx(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 356,\n      columnNumber: 86\n    }\n  }, \"| Go to page:\", ' ', __jsx(\"input\", {\n    type: \"number\",\n    defaultValue: pageIndex + 1,\n    onChange: e => {\n      const page = e.target.value ? Number(e.target.value) - 1 : 0;\n      gotoPage(page);\n    },\n    style: {\n      width: '100px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 361,\n      columnNumber: 88\n    }\n  })), ' ', __jsx(\"select\", {\n    value: pageSize,\n    onChange: e => {\n      setPageSize(Number(e.target.value));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 390,\n      columnNumber: 86\n    }\n  }, [10, 20, 30, 40, 50].map(pageSize => __jsx(\"option\", {\n    key: pageSize,\n    value: pageSize,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 416,\n      columnNumber: 92\n    }\n  }, \"Show\", ' ', pageSize)))));\n}","map":{"version":3,"sources":["/mnt/c/Users/arash/Documents/DevInDoc/Getaboard/demoEmail/reward-test/src/components/Table.tsx"],"names":["React","useEffect","useState","useTable","usePagination","styled","Styles","div","TableComponent","columns","data","setData","editableFields","skipPageReset","setSkipPageReset","updateData","rowIndex","columnId","value","old","map","row","index","Table","EditableCell","initialValue","column","id","rest","console","log","setValue","onChange","e","target","onBlur","defaultColumn","Cell","getTableProps","getTableBodyProps","headerGroups","prepareRow","page","canPreviousPage","canNextPage","pageOptions","pageCount","gotoPage","nextPage","previousPage","setPageSize","state","pageIndex","pageSize","autoResetPage","callDebugger","headerGroup","getHeaderGroupProps","headers","getHeaderProps","render","i","getRowProps","cells","cell","getCellProps","length","Number","width"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport clsx from 'clsx'\nimport { useTable, usePagination } from 'react-table'\nimport styled from 'styled-components'\nimport Input from './Input'\n\nexport interface Props {\n  className?: string | Record<string, unknown>\n  ordered?: boolean\n  item?: boolean\n}\n\nconst Styles = styled.div`\n  padding: 1rem;\n\n  table {\n    border-spacing: 0;\n    border: 1px solid black;\n\n    tr {\n      :last-child {\n        td {\n          border-bottom: 0;\n        }\n      }\n    }\n\n    th,\n    td {\n      margin: 0;\n      padding: 0.5rem;\n      border-bottom: 1px solid black;\n      border-right: 1px solid black;\n\n      :last-child {\n        border-right: 0;\n      }\n\n      input {\n        font-size: 1rem;\n        padding: 0;\n        margin: 0;\n        border: 0;\n      }\n    }\n\n    .pagination {\n      padding: 0.5rem;\n    }\n  }\n`\n\nfunction TableComponent({\n  columns,\n  data,\n  setData,\n  editableFields,\n}: {\n  editableFields?: Array<unknown>\n  columns: {\n    Header?: string\n    columns: {\n      Header: string\n      accessor: string\n      Cell?: unknown\n    }[]\n  }[]\n  data: Record<string, unknown>\n  setData: React.Dispatch<unknown>\n}) {\n  const [skipPageReset, setSkipPageReset] = useState(false)\n\n  // We need to keep the table from resetting the pageIndex when we\n  // Update data. So we can keep track of that flag with a ref.\n\n  // When our cell renderer calls updateMyData, we'll use\n  // the rowIndex, columnId and new value to update the\n  // original data\n  const updateData = (rowIndex, columnId, value) => {\n    // We also turn on the flag to not reset the page\n    setSkipPageReset(true)\n    setData((old) =>\n      old.map((row, index) => {\n        if (index === rowIndex) {\n          return {\n            ...old[rowIndex],\n            [columnId]: value,\n          }\n        }\n        return row\n      })\n    )\n  }\n\n  // After data chagnes, we turn the flag back off\n  // so that if data actually changes when we're not\n  // editing it, the page is reset\n  useEffect(() => {\n    setSkipPageReset(false)\n  }, [data])\n\n  return (\n    <Styles>\n      <Table\n        columns={columns}\n        data={data}\n        updateData={updateData}\n        skipPageReset={skipPageReset}\n        editableFields={editableFields}\n      />\n    </Styles>\n  )\n}\n\nexport default TableComponent\n\n// Be sure to pass our updateData and the skipPageReset option\nfunction Table({ columns, data, updateData, skipPageReset, editableFields }) {\n                                                                               // Create an editable cell renderer\n                                                                               const EditableCell = ({\n                                                                                 value: initialValue,\n                                                                                 row: {\n                                                                                   index,\n                                                                                 },\n                                                                                 column: {\n                                                                                   id,\n                                                                                 },\n                                                                                 updateData, // This is a custom function that we supplied to our table instance\n                                                                                 ...rest\n                                                                               }) => {\n                                                                                 console.log(\n                                                                                   ' them edit',\n                                                                                   initialValue,\n                                                                                   index,\n                                                                                   id,\n                                                                                   rest\n                                                                                 )\n                                                                                 // We need to keep and update the state of the cell normally\n                                                                                 const [\n                                                                                   value,\n                                                                                   setValue,\n                                                                                 ] = useState(\n                                                                                   initialValue\n                                                                                 )\n\n                                                                                 const onChange = (\n                                                                                   e\n                                                                                 ) => {\n                                                                                   setValue(\n                                                                                     e\n                                                                                       .target\n                                                                                       .value\n                                                                                   )\n                                                                                 }\n\n                                                                                 // We'll only update the external data when the input is blurred\n                                                                                 const onBlur = () => {\n                                                                                   updateData(\n                                                                                     index,\n                                                                                     id,\n                                                                                     value\n                                                                                   )\n                                                                                 }\n\n                                                                                 // If the initialValue is changed external, sync it up with our state\n                                                                                 useEffect(() => {\n                                                                                   setValue(\n                                                                                     initialValue\n                                                                                   )\n                                                                                 }, [\n                                                                                   initialValue,\n                                                                                 ])\n\n                                                                                 return (\n                                                                                   // <input\n                                                                                   //   value={value}\n                                                                                   //   onChange={onChange}\n                                                                                   //   onBlur={onBlur}\n                                                                                   //   className=\"w-full bg-transparent\"\n                                                                                   // />\n                                                                                   null\n                                                                                 )\n                                                                               }\n\n                                                                               // Set our editable cell renderer as the default Cell renderer\n                                                                               const defaultColumn = {\n                                                                                 Cell: EditableCell,\n                                                                               }\n\n                                                                               const {\n                                                                                 getTableProps,\n                                                                                 getTableBodyProps,\n                                                                                 headerGroups,\n                                                                                 prepareRow,\n                                                                                 page,\n                                                                                 canPreviousPage,\n                                                                                 canNextPage,\n                                                                                 pageOptions,\n                                                                                 pageCount,\n                                                                                 gotoPage,\n                                                                                 nextPage,\n                                                                                 previousPage,\n                                                                                 setPageSize,\n                                                                                 state: {\n                                                                                   pageIndex,\n                                                                                   pageSize,\n                                                                                 },\n                                                                               } = useTable(\n                                                                                 {\n                                                                                   columns,\n                                                                                   data,\n                                                                                   defaultColumn,\n                                                                                   // use the skipPageReset option to disable page resetting temporarily\n                                                                                   autoResetPage: !skipPageReset,\n                                                                                   updateData,\n                                                                                 },\n                                                                                 usePagination\n                                                                               )\n                                                                               function callDebugger(\n                                                                                 data\n                                                                               ) {\n                                                                                 debugger\n                                                                               }\n                                                                               // Render the UI for your table\n                                                                               return (\n                                                                                 <>\n                                                                                   <table\n                                                                                     {...getTableProps()}\n                                                                                   >\n                                                                                     <thead>\n                                                                                       {headerGroups.map(\n                                                                                         (\n                                                                                           headerGroup\n                                                                                         ) => (\n                                                                                           <tr\n                                                                                             {...headerGroup.getHeaderGroupProps()}\n                                                                                           >\n                                                                                             {headerGroup.headers.map(\n                                                                                               (\n                                                                                                 column\n                                                                                               ) => (\n                                                                                                 <th\n                                                                                                   {...column.getHeaderProps()}\n                                                                                                 >\n                                                                                                   {column.render(\n                                                                                                     'Header'\n                                                                                                   )}\n                                                                                                 </th>\n                                                                                               )\n                                                                                             )}\n                                                                                           </tr>\n                                                                                         )\n                                                                                       )}\n                                                                                     </thead>\n                                                                                     <tbody\n                                                                                       {...getTableBodyProps()}\n                                                                                     >\n                                                                                       {page.map(\n                                                                                         (\n                                                                                           row,\n                                                                                           i\n                                                                                         ) => {\n                                                                                           prepareRow(\n                                                                                             row\n                                                                                           )\n                                                                                           return (\n                                                                                             <tr\n                                                                                               {...row.getRowProps()}\n                                                                                             >\n                                                                                               {row.cells.map(\n                                                                                                 (\n                                                                                                   cell\n                                                                                                 ) => {\n                                                                                                   return (\n                                                                                                     <td\n                                                                                                       {...cell.getCellProps()}\n                                                                                                     >\n                                                                                                       {cell.render(\n                                                                                                         'Cell'\n                                                                                                       )}\n                                                                                                     </td>\n                                                                                                   )\n                                                                                                 }\n                                                                                               )}\n                                                                                             </tr>\n                                                                                           )\n                                                                                         }\n                                                                                       )}\n                                                                                     </tbody>\n                                                                                   </table>\n                                                                                   <div className=\"pagination\">\n                                                                                     <button\n                                                                                       onClick={() =>\n                                                                                         gotoPage(\n                                                                                           0\n                                                                                         )\n                                                                                       }\n                                                                                       disabled={\n                                                                                         !canPreviousPage\n                                                                                       }\n                                                                                     >\n                                                                                       {\n                                                                                         '<<'\n                                                                                       }\n                                                                                     </button>{' '}\n                                                                                     <button\n                                                                                       onClick={() =>\n                                                                                         previousPage()\n                                                                                       }\n                                                                                       disabled={\n                                                                                         !canPreviousPage\n                                                                                       }\n                                                                                     >\n                                                                                       {\n                                                                                         '<'\n                                                                                       }\n                                                                                     </button>{' '}\n                                                                                     <button\n                                                                                       onClick={() =>\n                                                                                         nextPage()\n                                                                                       }\n                                                                                       disabled={\n                                                                                         !canNextPage\n                                                                                       }\n                                                                                     >\n                                                                                       {\n                                                                                         '>'\n                                                                                       }\n                                                                                     </button>{' '}\n                                                                                     <button\n                                                                                       onClick={() =>\n                                                                                         gotoPage(\n                                                                                           pageCount -\n                                                                                             1\n                                                                                         )\n                                                                                       }\n                                                                                       disabled={\n                                                                                         !canNextPage\n                                                                                       }\n                                                                                     >\n                                                                                       {\n                                                                                         '>>'\n                                                                                       }\n                                                                                     </button>{' '}\n                                                                                     <span>\n                                                                                       Page{' '}\n                                                                                       <strong>\n                                                                                         {pageIndex +\n                                                                                           1}{' '}\n                                                                                         of{' '}\n                                                                                         {\n                                                                                           pageOptions.length\n                                                                                         }\n                                                                                       </strong>{' '}\n                                                                                     </span>\n                                                                                     <span>\n                                                                                       |\n                                                                                       Go\n                                                                                       to\n                                                                                       page:{' '}\n                                                                                       <input\n                                                                                         type=\"number\"\n                                                                                         defaultValue={\n                                                                                           pageIndex +\n                                                                                           1\n                                                                                         }\n                                                                                         onChange={(\n                                                                                           e\n                                                                                         ) => {\n                                                                                           const page = e\n                                                                                             .target\n                                                                                             .value\n                                                                                             ? Number(\n                                                                                                 e\n                                                                                                   .target\n                                                                                                   .value\n                                                                                               ) -\n                                                                                               1\n                                                                                             : 0\n                                                                                           gotoPage(\n                                                                                             page\n                                                                                           )\n                                                                                         }}\n                                                                                         style={{\n                                                                                           width:\n                                                                                             '100px',\n                                                                                         }}\n                                                                                       />\n                                                                                     </span>{' '}\n                                                                                     <select\n                                                                                       value={\n                                                                                         pageSize\n                                                                                       }\n                                                                                       onChange={(\n                                                                                         e\n                                                                                       ) => {\n                                                                                         setPageSize(\n                                                                                           Number(\n                                                                                             e\n                                                                                               .target\n                                                                                               .value\n                                                                                           )\n                                                                                         )\n                                                                                       }}\n                                                                                     >\n                                                                                       {[\n                                                                                         10,\n                                                                                         20,\n                                                                                         30,\n                                                                                         40,\n                                                                                         50,\n                                                                                       ].map(\n                                                                                         (\n                                                                                           pageSize\n                                                                                         ) => (\n                                                                                           <option\n                                                                                             key={\n                                                                                               pageSize\n                                                                                             }\n                                                                                             value={\n                                                                                               pageSize\n                                                                                             }\n                                                                                           >\n                                                                                             Show{' '}\n                                                                                             {\n                                                                                               pageSize\n                                                                                             }\n                                                                                           </option>\n                                                                                         )\n                                                                                       )}\n                                                                                     </select>\n                                                                                   </div>\n                                                                                 </>\n                                                                               )\n                                                                             }\n"]},"metadata":{},"sourceType":"module"}