{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\nimport React, { useEffect, useMemo, useState } from 'react';\nimport { motion } from 'framer-motion';\nimport XLSX from 'xlsx';\nimport { ToastContainer, toast } from 'react-toastify';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport styled from 'styled-components';\nimport { FiMoreHorizontal } from 'react-icons/fi';\nimport { FaCloudUploadAlt } from 'react-icons/fa';\nimport { SiMinutemailer } from 'react-icons/si';\nimport { MdMore, MdDelete } from 'react-icons/md';\nimport Layout from '@components/layout/Layout';\nimport TableComponent, { matchSorter, useAsyncDebounce } from '@components/Table';\nimport { isEmpty } from '@utils/helpers';\nimport Checkbox from '@components/Checkbox';\nimport Dropdown from '@components/Dropdown';\nimport Button from '@components/Button';\nimport UploadComponent from '@components/FileUpload';\nimport { deleteUser, getUsers, inviteUser } from '@utils/api';\nconst editableFields = ['firstName', 'lastName', 'email'];\n\nconst headerSearch = () => {\n  return __jsx(\"div\", {\n    className: \"flex justify-start\",\n    style: {\n      width: '55%'\n    }\n  }, __jsx(\"p\", null, \"an header search here\"));\n};\n\nconst tableWrapper = styled.form`\n  table {\n    /* border-spacing: 0; */\n    /* border: 1px solid black; */\n    border-collapse: separate;\n    border-style: 1em;\n    border-spacing: 1em;\n    /* border-spacing: 0 1em; */\n\n    thead tr {\n      :nth-child(1) {\n        display: none;\n      }\n      /* border: none !important; */\n      /* border-bottom: 2px solid; */\n      background: none !important;\n      border-radius: none !important;\n    }\n\n    tbody {\n      tr {\n        border-radius: 1rem;\n        padding: 1.5rem;\n\n        margin: 0.5rem 0;\n        box-shadow: 0 3px 6px rgba(0, 0, 0, 0.57), 0 2px 4px rgba(0, 0, 0, 0.05);\n        transition: transform 0.5s -webkit-transform 0.5s;\n        :last-child {\n          border-radius: 1rem;\n          td {\n            /* border-bottom: 0; */\n          }\n        }\n      }\n    }\n\n    th,\n    td {\n      margin: 0;\n      padding: 0.5rem;\n      /* border-bottom: 1px solid black;\n      border-right: 1px solid black; */\n\n      :last-child {\n        border-right: 0;\n      }\n\n      /* input {\n        font-size: 1rem;\n        padding: 0;\n        margin: 0;\n        border: 0;\n      } */\n    }\n\n    .pagination {\n      padding: 0.5rem;\n    }\n  }\n`;\n\nfunction fuzzyTextFilterFn(rows, id, filterValue) {\n  return matchSorter(rows, filterValue, {\n    keys: [row => row.values[id]]\n  });\n} // Let the table remove the filter if the string is empty\n\n\nfuzzyTextFilterFn.autoRemove = val => !val; // Create an editable cell renderer\n\n\nconst EditableCell = ({\n  value: initialValue,\n  row: {\n    index\n  },\n  column: {\n    id\n  },\n  updateData // This is a custom function that we supplied to our table instance\n\n}) => {\n  // We need to keep and update the state of the cell normally\n  const {\n    0: value,\n    1: setValue\n  } = useState(initialValue);\n\n  const onChange = e => {\n    setValue(e.target.value);\n  }; // We'll only update the external data when the input is blurred\n\n\n  const onBlur = () => {\n    updateData(index, id, value);\n  }; // If the initialValue is changed external, sync it up with our state\n\n\n  useEffect(() => {\n    setValue(initialValue);\n  }, [initialValue]);\n  return editableFields.includes(id) ? __jsx(\"input\", {\n    value: value,\n    onChange: onChange,\n    onBlur: onBlur,\n    className: \"w-full px-2 bg-transparent focus:bg-white\"\n  }) : __jsx(\"div\", {\n    className: \"\"\n  }, value);\n}; // Define a default UI for filtering\n\n\nfunction GlobalFilter({\n  preGlobalFilteredRows,\n  globalFilter,\n  setGlobalFilter\n}) {\n  const count = preGlobalFilteredRows.length;\n  const {\n    0: value,\n    1: setValue\n  } = useState(globalFilter);\n  const onChange = useAsyncDebounce(value => {\n    setGlobalFilter(value || undefined);\n  }, 200);\n  return __jsx(\"span\", {\n    className: \"mr-4 text-xl\"\n  }, \"Search:\", ' ', __jsx(\"input\", {\n    value: value || '',\n    onChange: e => {\n      setValue(e.target.value);\n      onChange(e.target.value);\n    },\n    className: \"w-2/5 px-4 py-1 radius-input\",\n    placeholder: `${count} records...`,\n    style: {\n      fontSize: '1.1rem',\n      border: '0'\n    }\n  }));\n} // Define a UI for filtering\n\n\nfunction DefaultColumnFilter({\n  column: {\n    filterValue,\n    preFilteredRows,\n    setFilter\n  }\n}) {\n  const count = preFilteredRows.length;\n  return __jsx(\"input\", {\n    value: filterValue || '',\n    onChange: e => {\n      setFilter(e.target.value || undefined); // Set undefined to remove the filter entirely\n    },\n    placeholder: `Search ${count} records...`\n  });\n}\n\nconst IndexPage = () => {\n  const {\n    0: data,\n    1: setData\n  } = useState([]);\n  const {\n    0: pageLoading,\n    1: setPageLoading\n  } = useState(false); // const [data, setData] = useState(() => makeData(6))\n\n  const columns = useMemo(() => [{\n    Header: 'Table',\n    columns: [{\n      Header: 'First Name',\n      accessor: 'firstName'\n    }, {\n      Header: 'Last Name',\n      accessor: 'lastName'\n    }, {\n      Header: 'Email',\n      accessor: 'email'\n    }]\n  }, {\n    Header: 'Test Info',\n    columns: [{\n      Header: 'Invite Sent',\n      accessor: 'inviteSent'\n    }, {\n      Header: 'Test Sent',\n      accessor: 'testSent'\n    }, {\n      Header: 'Test Status',\n      accessor: 'testStatus'\n    }]\n  }], []);\n  const spring = React.useMemo(() => ({\n    type: 'spring',\n    damping: 50,\n    stiffness: 100\n  }), []);\n  const filterTypes = useMemo(() => ({\n    // Add a new fuzzyTextFilterFn filter type.\n    fuzzyText: fuzzyTextFilterFn,\n    // Or, override the default text filter to use\n    // \"startWith\"\n    text: (rows, id, filterValue) => {\n      return rows.filter(row => {\n        const rowValue = row.values[id];\n        return rowValue !== undefined ? String(rowValue).toLowerCase().startsWith(String(filterValue).toLowerCase()) : true;\n      });\n    }\n  }), []);\n\n  const sendInvite = async (e, xdata) => {\n    e.preventDefault();\n    const resp = await inviteUser([xdata]);\n\n    if (resp) {\n      const currentData = data.map(d => {\n        if (d.email === xdata.email) d.inviteSent = 'Yes';\n        return d;\n      });\n      toast.success('User invited successfully');\n      setData(currentData);\n    }\n  };\n\n  const getAndSetUsers = async () => {\n    setPageLoading(true);\n    const dataX = await getUsers();\n    const data = dataX === null || dataX === void 0 ? void 0 : dataX.data;\n\n    if (!isEmpty(data)) {\n      setData(Array.from(data));\n    }\n\n    setPageLoading(false);\n  };\n\n  useEffect(() => {\n    getAndSetUsers();\n  }, []);\n\n  const uploadDatabase = (file, type) => {\n    switch (type) {\n      case 'spreadsheet':\n        //  var first_worksheet = workbook.Sheets[workbook.SheetNames[0]]\n        // var data = XLSX.utils.sheet_to_json(first_worksheet, { header: 1 })\n        // /* convert from array of arrays to workbook */\n        // var worksheet = XLSX.utils.aoa_to_sheet(data)\n        // var new_workbook = XLSX.utils.book_new()\n        // XLSX.utils.book_append_sheet(new_workbook, worksheet, 'SheetJS')\n        const f = file.selectedFile[0];\n        const reader = new FileReader();\n        const stateData = data;\n\n        reader.onload = function (e) {\n          const data = e.target.result;\n          const readedData = XLSX.read(data, {\n            type: 'binary'\n          });\n          const wsname = readedData.SheetNames[0];\n          const ws = readedData.Sheets[wsname];\n          /* Convert array to json*/\n          // const dataParse = XLSX.utils.sheet_to_json(ws, { header: 1 })\n\n          const dataParse = XLSX.utils.sheet_to_json(ws, {\n            raw: true\n          });\n          const fieldNames = ['Serial No', 'firstName', 'lastName', 'email', 'inviteSent', 'testSent', 'testStatus', 'subRows'];\n          const newDataSet = dataParse.map(d => {\n            const pos = Object.keys(d);\n            fieldNames.forEach((name, i) => {\n              if (name !== 'Serial No') {\n                d[name] = d[name] || d[pos[i]] || '';\n                d[name] = String(d[name]);\n              }\n\n              if (name === 'subRows') d[name] = undefined;\n            });\n            return d;\n          });\n          const update = newDataSet.concat(stateData);\n          setData(update);\n        };\n\n        reader.readAsBinaryString(f);\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const deleteRecord = async row => {\n    const newData = data.filter(d => d.email !== row.original.email);\n    await deleteUser(row.original);\n    toast.success('Deleted Successfully');\n    setData(newData);\n  };\n\n  const defaultColumn = React.useMemo(() => ({\n    // Let's set up our Filter UI\n    Filter: DefaultColumnFilter,\n    Cell: EditableCell\n  }), []);\n\n  const renderTableHooks = hooks => {\n    hooks.visibleColumns.push(columns => [// Let's make a column for selection\n    {\n      id: 'selection',\n      // The header can use the table's getToggleAllRowsSelectedProps method\n      // to render a checkbox\n      Header: ({\n        getToggleAllPageRowsSelectedProps\n      }) => !isEmpty(data) && __jsx(\"div\", null, __jsx(Checkbox, getToggleAllPageRowsSelectedProps())),\n      // The cell can use the individual row's getToggleRowSelectedProps method\n      // to the render a checkbox\n      Cell: ({\n        row\n      }) => __jsx(\"div\", null, __jsx(Checkbox, row.getToggleRowSelectedProps()))\n    }, ...columns, {\n      id: 'deletion',\n      // The header can use the table's getToggleAllRowsSelectedProps method\n      // to render a checkbox\n      Header: ({\n        getToggleAllPageRowsSelectedProps\n      }) => __jsx(\"div\", null),\n      // The cell can use the individual row's getToggleRowSelectedProps method\n      // to the render a checkbox\n      Cell: ({\n        row\n      }) => __jsx(\"div\", _extends({}, row.getToggleRowSelectedProps(), {\n        onClick: () => deleteRecord(row),\n        className: \"group\"\n      }), __jsx(MdDelete, _extends({}, row.getToggleRowSelectedProps(), {\n        className: \"opacity-50 group-hover:opacity-100 group-hover:hover:text-red-600\"\n      })))\n    }]);\n  };\n\n  const renderTableHeader = column => {\n    const header = column.render('Header');\n    return __jsx(React.Fragment, null, header);\n  };\n\n  const renderTableRow = (page, prepareRow) => {\n    const renderTableCell = cell => {\n      if (cell.column.id === 'inviteSent') {\n        var _cell$row, _cell$row$values, _cell$row$values$invi;\n\n        if (((_cell$row = cell.row) === null || _cell$row === void 0 ? void 0 : (_cell$row$values = _cell$row.values) === null || _cell$row$values === void 0 ? void 0 : (_cell$row$values$invi = _cell$row$values.inviteSent) === null || _cell$row$values$invi === void 0 ? void 0 : _cell$row$values$invi.toLowerCase()) === 'no') return __jsx(\"div\", {\n          className: \"z-50 inline-flex items-center justify-center w-full h-full align-middle group\"\n        }, __jsx(\"span\", {\n          className: \"text-red-600\"\n        }, cell.render('Cell')), __jsx(\"span\", {\n          className: \"align-middle group-focus:flex group-hover:flex align-center\"\n        }, __jsx(Dropdown, {\n          className: \"z-20 hidden ml-4 group-hover:flex\",\n          buttonLabel: __jsx(FiMoreHorizontal, {\n            className: \"flex self-center opacity-50\"\n          })\n        }, __jsx(\"ul\", {\n          className: \"w-40 py-2 space-y-4 text-sm\"\n        }, __jsx(\"li\", null, __jsx(\"span\", {\n          className: \"cursor-pointer text-primary hover:underline\",\n          title: \"components\",\n          onClick: e => {\n            e.stopPropagation();\n            sendInvite(e, cell.row.values);\n          }\n        }, __jsx(SiMinutemailer, {\n          className: \"inline ml-6 mr-4\"\n        }), \"Send Invite\")), __jsx(\"li\", null, __jsx(\"hr\", {\n          className: \"dark:border-gray-700\"\n        })), __jsx(\"li\", {\n          className: \"cursor-not-allowed\"\n        }, __jsx(\"span\", {\n          className: \"text-primary hover:underline\",\n          title: \"Typography\"\n        }, __jsx(MdMore, {\n          className: \"inline ml-6 mr-4 \"\n        }), \"More Options\"))))));else return __jsx(\"div\", {\n          className: \"inline-flex items-center justify-center w-full align-middle group\"\n        }, __jsx(\"span\", {\n          className: \"text-green-600\"\n        }, cell.render('Cell')));\n      }\n\n      if (cell.column.id === 'testSent') {\n        var _cell$row$values2, _cell$row$values2$tes;\n\n        if (((_cell$row$values2 = cell.row.values) === null || _cell$row$values2 === void 0 ? void 0 : (_cell$row$values2$tes = _cell$row$values2.testSent) === null || _cell$row$values2$tes === void 0 ? void 0 : _cell$row$values2$tes.toLowerCase()) === 'no') return __jsx(\"div\", {\n          className: \"inline-flex items-center justify-center w-full text-red-600\"\n        }, cell.render('Cell'));else return __jsx(\"div\", {\n          className: \"inline-flex items-center justify-center w-full text-green-600\"\n        }, cell.render('Cell'));\n      }\n\n      if (cell.column.id === 'testStatus') {\n        var _cell$row2, _cell$row2$values, _cell$row2$values$tes;\n\n        if (((_cell$row2 = cell.row) === null || _cell$row2 === void 0 ? void 0 : (_cell$row2$values = _cell$row2.values) === null || _cell$row2$values === void 0 ? void 0 : (_cell$row2$values$tes = _cell$row2$values.testStatus) === null || _cell$row2$values$tes === void 0 ? void 0 : _cell$row2$values$tes.toLowerCase()) === 'pending') return __jsx(\"div\", {\n          className: \"inline-flex items-center justify-center w-full text-yellow-700\"\n        }, cell.render('Cell'));else return __jsx(\"div\", {\n          className: \"inline-flex items-center justify-center w-full text-green-600\"\n        }, cell.render('Cell'));\n      }\n\n      return __jsx(\"div\", {\n        className: \"inline-flex items-center justify-center w-full \"\n      }, cell.render('Cell'));\n    };\n\n    return __jsx(React.Fragment, null, page.map((row, i1) => {\n      prepareRow(row);\n      return __jsx(motion.tr, _extends({}, row.getRowProps({\n        layoutTransition: spring,\n        exit: {\n          opacity: 0,\n          maxHeight: 0\n        }\n      }), {\n        className: `${i1 % 2 ? '' : ''} text-center h-16`\n      }), row.cells.map((cell, i) => {\n        return __jsx(motion.td, _extends({}, cell.getCellProps({\n          layoutTransition: spring\n        }), {\n          className: \"text-center\" // className={`${\n          //   i1 % 2 ? 'bg-gray-400 border-gray-400' : ''\n          // } h-16`}\n\n        }), renderTableCell ? renderTableCell(cell) : cell.render('Cell'));\n      }));\n    }));\n  };\n\n  const renderExtraTableTd = (controls, formikProps) => {\n    const {\n      visibleColumns\n    } = controls;\n    const {\n      values,\n      errors,\n      touched,\n      handleChange,\n      handleBlur,\n      isSubmitting\n    } = formikProps;\n    return __jsx(\"tr\", {\n      role: \"row\",\n      className: \"h-16 elevation-3\"\n    }, __jsx(\"td\", {\n      role: \"cell\",\n      className: \"text-center\"\n    }, \"\\xA0\"), __jsx(\"td\", {\n      role: \"cell\",\n      className: \"text-right\"\n    }, __jsx(\"div\", {\n      className: \"flex flex-col items-start\"\n    }, __jsx(\"input\", {\n      value: values.fName,\n      name: \"fName\",\n      id: \"fName\",\n      placeholder: 'First Name',\n      className: \"h-8 px-2 radius-input hover:border-primary\",\n      onBlur: handleBlur,\n      onChange: handleChange\n    }), __jsx(\"span\", null, errors.fName && touched.fName && __jsx(\"p\", {\n      className: \"text-xs text-left text-red-600\"\n    }, errors.fName)))), __jsx(\"td\", {\n      role: \"cell\",\n      className: \"text-right\"\n    }, __jsx(\"div\", {\n      className: \"flex flex-col items-start\"\n    }, __jsx(\"input\", {\n      value: values.lName,\n      name: \"lName\",\n      id: \"lName\",\n      placeholder: 'Last Name',\n      className: \"h-8 px-2 radius-input hover:border-primary\",\n      onChange: handleChange,\n      onBlur: handleBlur\n    }), __jsx(\"span\", null, errors.lName && touched.lName && __jsx(\"p\", {\n      className: \"text-xs text-left text-red-600\"\n    }, errors.lName)))), __jsx(\"td\", {\n      role: \"cell\",\n      className: \"text-right\",\n      placeholder: 'Last Name'\n    }, __jsx(\"div\", {\n      className: \"flex flex-col items-start\"\n    }, __jsx(\"input\", {\n      value: values.email,\n      id: \"email\",\n      name: \"email\",\n      placeholder: 'Email',\n      className: \"h-8 px-2 radius-input hover:border-primary\",\n      onChange: handleChange,\n      onBlur: handleBlur\n    }), __jsx(\"span\", null, errors.email && touched.email && __jsx(\"p\", {\n      className: \"text-xs text-left text-red-600\"\n    }, errors.email)))), __jsx(\"td\", {\n      role: \"cell\",\n      className: \"w-full text-right\",\n      colSpan: visibleColumns.length - 4\n    }, __jsx(Button, {\n      type: \"primary\",\n      htmlFor: \"submit\",\n      disabled: isSubmitting\n    }, \"Add new\")));\n  };\n\n  const handleBatchActions = controls => {\n    const {\n      state: tableState,\n      selectedFlatRows\n    } = controls;\n    const {\n      selectedRowIds\n    } = tableState;\n    const selectedLen = Object.keys(selectedRowIds || {}).length;\n    const selectedMembers = selectedFlatRows.map(d => d.original);\n    const uninvitedMembers = selectedMembers.filter(d => {\n      var _d$testSent;\n\n      return ((_d$testSent = d['testSent']) === null || _d$testSent === void 0 ? void 0 : _d$testSent.toLowerCase()) !== 'no';\n    });\n    const uninvitedLen = uninvitedMembers.length;\n    return __jsx(\"div\", {\n      className: `flex ${selectedLen ? 'justify-between' : 'justify-end'} w-full mb-2`\n    }, selectedLen > 0 && __jsx(React.Fragment, null, __jsx(\"p\", null, \"You have selected \", selectedLen, \" members\"), uninvitedLen > 0 && __jsx(\"div\", null, __jsx(Button, {\n      onClick: e => {\n        e.stopPropagation();\n        sendInvite(e, uninvitedMembers);\n      }\n    }, \"Send Invitation to \", uninvitedLen, \" members\"))), !selectedLen && __jsx(React.Fragment, null, __jsx(UploadComponent, {\n      allowedExtensions: ['xls', 'xlsx', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'] // autoUpload={true}\n      // render={(el: HTMLElement | null) => {\n      ,\n      render: el => {\n        return __jsx(\"span\", {\n          className: \"flex justify-end w-full px-4 py-2 border cursor-pointer hover:text-primary-lighter hover:border-primary-darker text-primary\",\n          onClick: e => {\n            e.preventDefault();\n            el && el.click();\n          }\n        }, __jsx(FaCloudUploadAlt, {\n          className: \"w-6 h-6 mr-2\"\n        }), \"Upload SpreadSheet\");\n      },\n      uploadHandler: (data, state, cb) => {\n        uploadDatabase(state, 'spreadsheet');\n      }\n    })));\n  };\n\n  const handleFormSubmit = async (data, cb) => {\n    const payload = {};\n    payload.firstName = data.fName;\n    payload.lastName = data.lName;\n    payload.email = data.email;\n    payload.inviteSent = 'No';\n    payload.testSent = 'No';\n    payload.testStatus = 'NA';\n    const resp = await inviteUser([payload]);\n\n    if (resp) {\n      cb.resetForm();\n      toast.success('New data added');\n      setData(resp.data);\n    }\n  };\n\n  return __jsx(Layout, {\n    title: \"Your Awesome App\",\n    className: \"container max-w-6xl py-8 overflow-auto\",\n    header: headerSearch()\n  }, __jsx(ToastContainer, null), __jsx(\"p\", {\n    className: \"mb-4 text-lg font-bolder\"\n  }, \"Demo spreadsheet upload and email list system.\"), __jsx(\"div\", null, __jsx(Formik, {\n    initialValues: {\n      fName: '',\n      lName: '',\n      email: ''\n    },\n    onSubmit: handleFormSubmit,\n    validateOnBlur: false,\n    validateOnMount: false,\n    validationSchema: Yup.object({\n      fName: Yup.string().min(3, 'Must contain 3 characters or more').required('First Name is required'),\n      lName: Yup.string().min(3, 'Must contain 3 characters or more').required('Last Name is required'),\n      email: Yup.string().email('Invalid email address').required('Please provide the email')\n    })\n  }, formikProps => __jsx(TableComponent, {\n    columns: columns,\n    data: data,\n    setData: setData,\n    tableClassName: \"w-full\",\n    filterTypes: filterTypes,\n    defaultColumn: defaultColumn,\n    globalFilter: {\n      use: true,\n      Component: GlobalFilter,\n      pos: 'below'\n    },\n    renderHeader: renderTableHeader // renderFilter= {(column: unknown) => JSX.Element}\n    // renderTableBody={renderTableBody}\n    ,\n    renderTableRow: renderTableRow,\n    renderExtraTableTd: controls => renderExtraTableTd(controls, formikProps),\n    loading: pageLoading // renderTableCell= {(cell: unknown) => JSX.Element}\n    ,\n    handleTableControls: {\n      jsx: handleBatchActions\n    },\n    tableWrapper: {\n      use: true,\n      wrapper: tableWrapper,\n      props: {\n        onSubmit: formikProps.handleSubmit\n      }\n    },\n    customHook: renderTableHooks\n  }))));\n};\n\nexport default IndexPage;","map":null,"metadata":{},"sourceType":"module"}