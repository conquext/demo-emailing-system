{"ast":null,"code":"var _jsxFileName = \"/mnt/c/Users/arash/Documents/DevInDoc/Getaboard/demoEmail/reward-test/src/components/Dropdown.tsx\";\nvar __jsx = React.createElement;\nimport * as React from 'react';\nimport clsx from 'clsx';\n\nconst Dropdown = ({\n  className,\n  buttonLabel,\n  children\n}) => {\n  const node = React.useRef();\n  const [showDropdown, setShowDropdown] = React.useState(false);\n\n  const toggleDropdown = () => {\n    setShowDropdown(!showDropdown);\n  };\n\n  const handleClickOutside = e => {\n    var _node$current;\n\n    if (node === null || node === void 0 ? void 0 : (_node$current = node.current) === null || _node$current === void 0 ? void 0 : _node$current.contains(e.target)) {\n      return;\n    }\n\n    setShowDropdown(false);\n  };\n\n  React.useEffect(() => {\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => document.removeEventListener('mousedown', handleClickOutside);\n  }, []);\n  return __jsx(\"div\", {\n    ref: node,\n    className: clsx('relative inline-block', className),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 5\n    }\n  }, __jsx(\"button\", {\n    className: clsx('p-2 rounded-full', {\n      'hover:bg-primary hover:bg-opacity-25': !showDropdown,\n      'bg-primary text-white': showDropdown\n    }),\n    onClick: toggleDropdown,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }\n  }, buttonLabel), showDropdown && __jsx(\"div\", {\n    className: \"absolute right-0 mt-1 bg-white dark:bg-gray-800 border dark:border-gray-700 rounded shadow-md p-2 space-y-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }\n  }, children));\n};\n\nexport default Dropdown;","map":{"version":3,"sources":["/mnt/c/Users/arash/Documents/DevInDoc/Getaboard/demoEmail/reward-test/src/components/Dropdown.tsx"],"names":["React","clsx","Dropdown","className","buttonLabel","children","node","useRef","showDropdown","setShowDropdown","useState","toggleDropdown","handleClickOutside","e","current","contains","target","useEffect","document","addEventListener","removeEventListener"],"mappings":";;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,IAAP,MAAiB,MAAjB;;AAOA,MAAMC,QAAyB,GAAG,CAAC;AAAEC,EAAAA,SAAF;AAAaC,EAAAA,WAAb;AAA0BC,EAAAA;AAA1B,CAAD,KAA0C;AAC1E,QAAMC,IAAI,GAAGN,KAAK,CAACO,MAAN,EAAb;AACA,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCT,KAAK,CAACU,QAAN,CAAe,KAAf,CAAxC;;AAEA,QAAMC,cAAc,GAAG,MAAM;AAC3BF,IAAAA,eAAe,CAAC,CAACD,YAAF,CAAf;AACD,GAFD;;AAIA,QAAMI,kBAAkB,GAAIC,CAAD,IAAmB;AAAA;;AAC5C,QAAIP,IAAJ,aAAIA,IAAJ,wCAAIA,IAAI,CAAEQ,OAAV,kDAAI,cAAeC,QAAf,CAAwBF,CAAC,CAACG,MAA1B,CAAJ,EAA+C;AAC7C;AACD;;AACDP,IAAAA,eAAe,CAAC,KAAD,CAAf;AACD,GALD;;AAOAT,EAAAA,KAAK,CAACiB,SAAN,CAAgB,MAAM;AACpBC,IAAAA,QAAQ,CAACC,gBAAT,CAA0B,WAA1B,EAAuCP,kBAAvC;AACA,WAAO,MAAMM,QAAQ,CAACE,mBAAT,CAA6B,WAA7B,EAA0CR,kBAA1C,CAAb;AACD,GAHD,EAGG,EAHH;AAKA,SACE;AAAK,IAAA,GAAG,EAAEN,IAAV;AAAgB,IAAA,SAAS,EAAEL,IAAI,CAAC,uBAAD,EAA0BE,SAA1B,CAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AACE,IAAA,SAAS,EAAEF,IAAI,CAAC,kBAAD,EAAqB;AAClC,8CAAwC,CAACO,YADP;AAElC,+BAAyBA;AAFS,KAArB,CADjB;AAKE,IAAA,OAAO,EAAEG,cALX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAOGP,WAPH,CADF,EAUGI,YAAY,IACX;AAAK,IAAA,SAAS,EAAC,6GAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGH,QADH,CAXJ,CADF;AAkBD,CAtCD;;AAwCA,eAAeH,QAAf","sourcesContent":["import * as React from 'react'\nimport clsx from 'clsx'\n\nexport interface Props {\n  className?: string | Record<string, unknown>\n  buttonLabel: string | React.ReactElement\n}\n\nconst Dropdown: React.FC<Props> = ({ className, buttonLabel, children }) => {\n  const node = React.useRef<HTMLDivElement>()\n  const [showDropdown, setShowDropdown] = React.useState(false)\n\n  const toggleDropdown = () => {\n    setShowDropdown(!showDropdown)\n  }\n\n  const handleClickOutside = (e: MouseEvent) => {\n    if (node?.current?.contains(e.target as Node)) {\n      return\n    }\n    setShowDropdown(false)\n  }\n\n  React.useEffect(() => {\n    document.addEventListener('mousedown', handleClickOutside)\n    return () => document.removeEventListener('mousedown', handleClickOutside)\n  }, [])\n\n  return (\n    <div ref={node} className={clsx('relative inline-block', className)}>\n      <button\n        className={clsx('p-2 rounded-full', {\n          'hover:bg-primary hover:bg-opacity-25': !showDropdown,\n          'bg-primary text-white': showDropdown,\n        })}\n        onClick={toggleDropdown}\n      >\n        {buttonLabel}\n      </button>\n      {showDropdown && (\n        <div className=\"absolute right-0 mt-1 bg-white dark:bg-gray-800 border dark:border-gray-700 rounded shadow-md p-2 space-y-2\">\n          {children}\n        </div>\n      )}\n    </div>\n  )\n}\n\nexport default Dropdown\n"]},"metadata":{},"sourceType":"module"}