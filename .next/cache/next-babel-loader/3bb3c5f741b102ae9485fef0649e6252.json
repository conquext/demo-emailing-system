{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect, useMemo, useState } from 'react';\nimport Layout from '@components/layout/Layout';\nimport matchSorter from 'match-sorter';\nimport TableComponent from '@components/Table';\nimport makeData from '@utils/helpers';\n\nconst headerSearch = () => {\n  return __jsx(\"div\", {\n    className: \"flex justify-start\",\n    style: {\n      width: '55%'\n    }\n  }, __jsx(\"p\", null, \"an header search here\"));\n};\n\nfunction fuzzyTextFilterFn(rows, id, filterValue) {\n  return matchSorter(rows, filterValue, {\n    keys: [row => row.values[id]]\n  });\n} // Let the table remove the filter if the string is empty\n\n\nfuzzyTextFilterFn.autoRemove = val => !val; // Create an editable cell renderer\n\n\nconst EditableCell = ({\n  value: initialValue,\n  row: {\n    index\n  },\n  column: {\n    id\n  },\n  updateData // This is a custom function that we supplied to our table instance\n\n}) => {\n  // We need to keep and update the state of the cell normally\n  const {\n    0: value,\n    1: setValue\n  } = useState(initialValue);\n\n  const onChange = e => {\n    setValue(e.target.value);\n  }; // We'll only update the external data when the input is blurred\n\n\n  const onBlur = () => {\n    updateData(index, id, value);\n  }; // If the initialValue is changed external, sync it up with our state\n\n\n  useEffect(() => {\n    setValue(initialValue);\n  }, [initialValue]);\n  return editableFields.includes(id) ? __jsx(\"input\", {\n    value: value,\n    onChange: onChange,\n    onBlur: onBlur,\n    className: \"w-full bg-transparent\"\n  }) : __jsx(\"p\", null, value);\n};\n\nconst IndexPage = () => {\n  const {\n    0: data,\n    1: setData\n  } = useState(() => makeData(20));\n  const columns = useMemo(() => [{\n    Header: 'Table',\n    columns: [{\n      Header: 'First Name',\n      accessor: 'firstName'\n    }, {\n      Header: 'Last Name',\n      accessor: 'lastName'\n    }, {\n      Header: 'Email',\n      accessor: 'email'\n    }]\n  }, {\n    Header: 'Test Info',\n    columns: [{\n      Header: 'Invite Sent',\n      accessor: 'inviteSent'\n    }, {\n      Header: 'Test Sent',\n      accessor: 'testSent'\n    }, {\n      Header: 'Test Status',\n      accessor: 'testStatus'\n    }]\n  }], []);\n  const filterTypes = useMemo(() => ({\n    // Add a new fuzzyTextFilterFn filter type.\n    fuzzyText: fuzzyTextFilterFn,\n    // Or, override the default text filter to use\n    // \"startWith\"\n    text: (rows, id, filterValue) => {\n      return rows.filter(row => {\n        const rowValue = row.values[id];\n        return rowValue !== undefined ? String(rowValue).toLowerCase().startsWith(String(filterValue).toLowerCase()) : true;\n      });\n    }\n  }), []);\n  const defaultColumn = React.useMemo(() => ({\n    // Let's set up our Filter UI\n    // Filter: DefaultColumnFilter,\n    Cell: EditableCell\n  }), []);\n  return __jsx(Layout, {\n    title: \"Your Awesome App\",\n    className: \"container py-8 overflow-auto\",\n    header: headerSearch()\n  }, __jsx(\"p\", {\n    className: \"mb-4 text-lg font-light\"\n  }, \"Demo spreadsheet upload and email list system.\"), __jsx(\"div\", null, __jsx(TableComponent, {\n    columns: columns,\n    data: data,\n    setData: setData,\n    filterTypes: filterTypes,\n    defaultColumn: DefaultColumn // globalFilter= {GlobalFilter}\n    // renderHeader= {(header: unknown) => JSX.Element}\n    // renderFilter= {(column: unknown) => JSX.Element}\n    // renderTableBody= {(column: unknown) => JSX.Element}\n    // renderTableRow= {(row: unknown) => JSX.Element}\n    // renderTableCell= {(cell: unknown) => JSX.Element}\n    // customHook= {(hooks: unknown) => unknown}\n    // editableFields={['firstName', 'lastName', 'email']}\n\n  })));\n};\n\nexport default IndexPage;","map":{"version":3,"sources":["/mnt/c/Users/arash/Documents/DevInDoc/Getaboard/demoEmail/reward-test/pages/index.tsx"],"names":["React","useEffect","useMemo","useState","Layout","matchSorter","TableComponent","makeData","headerSearch","width","fuzzyTextFilterFn","rows","id","filterValue","keys","row","values","autoRemove","val","EditableCell","value","initialValue","index","column","updateData","setValue","onChange","e","target","onBlur","editableFields","includes","IndexPage","data","setData","columns","Header","accessor","filterTypes","fuzzyText","text","filter","rowValue","undefined","String","toLowerCase","startsWith","defaultColumn","Cell","DefaultColumn"],"mappings":"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","sourcesContent":["import React, { useEffect, useMemo, useState } from 'react'\nimport { NextPage } from 'next'\nimport Layout from '@components/layout/Layout'\nimport routes from '@utils/routes'\nimport Link from 'next/link'\nimport matchSorter from 'match-sorter'\nimport { FiArrowRight } from 'react-icons/fi'\nimport TableComponent from '@components/Table'\nimport makeData from '@utils/helpers'\n\nconst headerSearch = () => {\n  return (\n    <div className=\"flex justify-start\" style={{ width: '55%' }}>\n      <p>an header search here</p>\n    </div>\n  )\n}\n\nfunction fuzzyTextFilterFn(rows, id, filterValue) {\n  return matchSorter(rows, filterValue, { keys: [(row) => row.values[id]] })\n}\n\n// Let the table remove the filter if the string is empty\nfuzzyTextFilterFn.autoRemove = (val) => !val\n\n// Create an editable cell renderer\nconst EditableCell = ({\n  value: initialValue,\n  row: { index },\n  column: { id },\n  updateData, // This is a custom function that we supplied to our table instance\n}) => {\n  // We need to keep and update the state of the cell normally\n  const [value, setValue] = useState(initialValue)\n\n  const onChange = (e) => {\n    setValue(e.target.value)\n  }\n\n  // We'll only update the external data when the input is blurred\n  const onBlur = () => {\n    updateData(index, id, value)\n  }\n\n  // If the initialValue is changed external, sync it up with our state\n  useEffect(() => {\n    setValue(initialValue)\n  }, [initialValue])\n\n  return editableFields.includes(id) ? (\n    <input\n      value={value}\n      onChange={onChange}\n      onBlur={onBlur}\n      className=\"w-full bg-transparent\"\n    />\n  ) : (\n    <p>{value}</p>\n  )\n}\n\nconst IndexPage: NextPage = () => {\n  const [data, setData] = useState(() => makeData(20))\n  const columns = useMemo(\n    () => [\n      {\n        Header: 'Table',\n        columns: [\n          {\n            Header: 'First Name',\n            accessor: 'firstName',\n          },\n          {\n            Header: 'Last Name',\n            accessor: 'lastName',\n          },\n          {\n            Header: 'Email',\n            accessor: 'email',\n          },\n        ],\n      },\n      {\n        Header: 'Test Info',\n        columns: [\n          {\n            Header: 'Invite Sent',\n            accessor: 'inviteSent',\n          },\n          {\n            Header: 'Test Sent',\n            accessor: 'testSent',\n          },\n          {\n            Header: 'Test Status',\n            accessor: 'testStatus',\n          },\n        ],\n      },\n    ],\n    []\n  )\n\n  const filterTypes = useMemo(\n    () => ({\n      // Add a new fuzzyTextFilterFn filter type.\n      fuzzyText: fuzzyTextFilterFn,\n      // Or, override the default text filter to use\n      // \"startWith\"\n      text: (rows, id, filterValue) => {\n        return rows.filter((row) => {\n          const rowValue = row.values[id]\n          return rowValue !== undefined\n            ? String(rowValue)\n                .toLowerCase()\n                .startsWith(String(filterValue).toLowerCase())\n            : true\n        })\n      },\n    }),\n    []\n  )\n\n  const defaultColumn = React.useMemo(\n    () => ({\n      // Let's set up our Filter UI\n      // Filter: DefaultColumnFilter,\n      Cell: EditableCell,\n    }),\n    []\n  )\n\n  return (\n    <Layout\n      title=\"Your Awesome App\"\n      className=\"container py-8 overflow-auto\"\n      header={headerSearch()}\n    >\n      {/* <h1 className=\"mb-4 text-3xl font-black dark:text-gray-100\">Welcome</h1> */}\n      <p className=\"mb-4 text-lg font-light\">\n        Demo spreadsheet upload and email list system.\n      </p>\n      <div>\n        <TableComponent\n          columns={columns}\n          data={data}\n          setData={setData}\n          filterTypes={filterTypes}\n          defaultColumn={DefaultColumn}\n          // globalFilter= {GlobalFilter}\n          // renderHeader= {(header: unknown) => JSX.Element}\n          // renderFilter= {(column: unknown) => JSX.Element}\n          // renderTableBody= {(column: unknown) => JSX.Element}\n          // renderTableRow= {(row: unknown) => JSX.Element}\n          // renderTableCell= {(cell: unknown) => JSX.Element}\n          // customHook= {(hooks: unknown) => unknown}\n          // editableFields={['firstName', 'lastName', 'email']}\n        />\n      </div>\n    </Layout>\n  )\n}\n\nexport default IndexPage\n"]},"metadata":{},"sourceType":"module"}