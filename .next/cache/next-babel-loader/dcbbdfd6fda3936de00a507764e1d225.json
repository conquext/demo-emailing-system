{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { getFileSizeAndUnit, isEmpty } from '@utils/helpers';\nimport React, { useState, useEffect, useRef } from 'react';\nimport { toast as toaster } from 'react-toastify';\nconst initialState = {\n  files: [],\n  events: [],\n  filePreviews: {},\n  uploading: false,\n  selectedFile: null,\n  loaded: 0,\n  error: '',\n  warning: '',\n  content: ''\n};\nexport default function UploadComponent({\n  autoUpload = true,\n  allowedExtensions = ['.doc', '.docx', '.xls', '.xlsx', '.pdf', '.svg', 'image/png', 'image/jpeg', 'image/gif', 'image/*', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'],\n  maxFileSize = 40000000,\n  disabled,\n  className = '',\n  render,\n  refreshCallback,\n  uploadHandler\n}) {\n  const {\n    0: state,\n    1: setState\n  } = useState(initialState);\n  const {\n    0: runAutoUpload,\n    1: setAutoUpload\n  } = useState(false);\n  const {\n    0: load,\n    1: reload\n  } = useState(false);\n\n  function updateState(update) {\n    const newState = _objectSpread(_objectSpread({}, state), update);\n\n    setState(newState);\n    refreshCallback && refreshCallback(newState);\n    return newState;\n  }\n\n  const toast = {\n    warn: msg => {\n      toaster.warn(msg);\n      updateState({\n        error: msg\n      });\n    },\n    error: msg => {\n      toaster.error(msg);\n      updateState({\n        error: msg\n      });\n    },\n    success: msg => {\n      toaster.success(msg);\n      updateState({\n        error: ''\n      });\n    }\n  };\n\n  const checkMimeType = (files, resetField) => {\n    const err = [];\n    const types = allowedExtensions;\n\n    for (let x = 0; x < files.length; x++) {\n      if (types.every(type => {\n        var _files$x;\n\n        return ((_files$x = files[x]) === null || _files$x === void 0 ? void 0 : _files$x.type) !== type;\n      })) {\n        err[x] = files[x].type + ' is not a supported format\\n';\n      }\n    }\n\n    for (let z = 0; z < err.length; z++) {\n      toast.error(err[z]);\n      resetField && resetField();\n    }\n\n    if (!isEmpty(err)) return false;\n    return true;\n  };\n\n  const maxSelectFile = (files, resetField) => {\n    const maxLength = 1;\n\n    if (files.length > maxLength) {\n      const msg = `Only ${maxLength} file can be uploaded at a time`;\n      resetField && resetField();\n      toast.warn(msg);\n      return false;\n    }\n\n    return true;\n  };\n\n  const checkFileSize = (files, resetField) => {\n    //  default max size is 2.05GB\n    const size = maxFileSize || 20000000;\n    const err = [];\n\n    for (let x = 0; x < files.length; x++) {\n      if (files[x].size > size) {\n        err[x] = files[x].type + ' is too large, please pick a smaller file\\n' + `Max size: ${getFileSizeAndUnit(size)}`;\n      }\n    }\n\n    for (let z = 0; z < err.length; z++) {\n      toast.error(err[z]);\n      resetField && resetField();\n    }\n\n    if (!isEmpty(err)) return false;\n    return true;\n  };\n\n  const readFile = (file, currentIndex = 0, lState = state, validateFile) => {\n    // run validations if any\n    if (validateFile) {\n      validateFile(file);\n    }\n\n    const files = lState.files;\n    const reader = new FileReader();\n    reader.addEventListener('load', event => {\n      if (event.target) {\n        const filesData = {\n          url: event.target.result,\n          meta: Array.from(lState.selectedFile)[currentIndex],\n          loaded: files[currentIndex] ? files[currentIndex].loaded : 0\n        };\n        const newfileUpdate = files;\n        newfileUpdate[currentIndex] = filesData;\n        updateState({\n          files: newfileUpdate,\n          selectedFile: lState.selectedFile\n        });\n      }\n    });\n    reader.readAsDataURL(file);\n  };\n\n  const onChangeHandler = event => {\n    const files = event.target.files;\n\n    const resetField = () => event.target.value = '';\n\n    if (files) {\n      if (maxSelectFile(files, resetField) && checkMimeType(files, resetField) && checkFileSize(files, resetField)) {\n        // if return true allow to setState\n        const newState = updateState({\n          selectedFile: files,\n          loaded: 0\n        });\n        Array.from(files).forEach((fl, index) => readFile(fl, index, newState));\n\n        if (autoUpload) {\n          setAutoUpload(true);\n        }\n      }\n    }\n  };\n\n  const handleUpload = (data, state, cb) => {\n    if (uploadHandler) uploadHandler(data, state, cb);\n  };\n\n  const onClickHandler = (newState = state) => {\n    try {\n      const selectedFile = newState.selectedFile;\n      const data = new FormData();\n\n      if (!isEmpty(selectedFile)) {\n        for (let x = 0; x < selectedFile.length; x++) {\n          data.append('file', selectedFile[x]);\n        }\n\n        handleUpload(data, newState, updateState);\n      }\n    } catch (err) {\n      console.log('err', err);\n    } finally {\n      setAutoUpload(false);\n    }\n  };\n\n  const uploadArea = useRef(null);\n  const uploadDomRef = useRef(null);\n  const dc = useRef(null);\n  const uploadDom = '#common-upload-component';\n  useEffect(() => {\n    dc.current = document;\n    uploadArea.current = document.querySelector(uploadDom);\n    if (runAutoUpload) onClickHandler(state); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [runAutoUpload, uploadDomRef.current]);\n\n  const getUploadArea = () => {\n    if (dc.current) return dc.current.querySelector(uploadDom);else if (uploadArea.current) return uploadArea.current;else if (uploadDomRef.current) return uploadDomRef.current;else if (!load) reload(true);\n  };\n\n  return __jsx(\"div\", {\n    id: \"drop-area\",\n    className: `pt-4 relative ${className}`,\n    style: {\n      minHeight: '50px'\n    }\n  }, __jsx(\"div\", {\n    className: \"container hidden\"\n  }, __jsx(\"div\", {\n    className: \"row\"\n  }, __jsx(\"div\", {\n    className: \"offset-md-3 col-md-6\"\n  }, __jsx(\"div\", {\n    className: \"form-group files\"\n  }, __jsx(\"label\", null, \"Upload Your File \"), __jsx(\"input\", {\n    type: \"file\",\n    id: \"common-upload-component\",\n    ref: uploadDomRef,\n    disabled: Boolean(disabled),\n    className: \"form-control\",\n    accept: \"xls, xlsx\",\n    onChange: onChangeHandler\n  })), !autoUpload && __jsx(\"button\", {\n    type: \"button\",\n    className: \"btn btn-success btn-block\",\n    onClick: () => onClickHandler()\n  }, \"Upload\")))), render(getUploadArea()));\n}","map":null,"metadata":{},"sourceType":"module"}