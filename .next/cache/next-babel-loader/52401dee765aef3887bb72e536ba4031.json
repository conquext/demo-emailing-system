{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { useEffect, useMemo, useState } from 'react';\nimport { motion } from 'framer-motion';\nimport matchSorter from 'match-sorter';\nimport { FiMoreHorizontal } from 'react-icons/fi';\nimport Layout from '@components/layout/Layout';\nimport TableComponent, { useAsyncDebounce } from '@components/Table';\nimport makeData from '@utils/helpers';\nimport Checkbox from '@components/Checkbox';\nimport Dropdown from '@components/Dropdown';\nimport { MdFeaturedPlayList } from 'react-icons/md';\nimport { AiOutlineFontColors } from 'react-icons/ai';\nimport Button from '@components/Button';\nconst editableFields = ['firstName', 'lastName', 'email'];\n\nconst headerSearch = () => {\n  return __jsx(\"div\", {\n    className: \"flex justify-start\",\n    style: {\n      width: '55%'\n    }\n  }, __jsx(\"p\", null, \"an header search here\"));\n};\n\nfunction fuzzyTextFilterFn(rows, id, filterValue) {\n  return matchSorter(rows, filterValue, {\n    keys: [row => row.values[id]]\n  });\n} // Let the table remove the filter if the string is empty\n\n\nfuzzyTextFilterFn.autoRemove = val => !val; // Create an editable cell renderer\n\n\nconst EditableCell = ({\n  value: initialValue,\n  row: {\n    index\n  },\n  column: {\n    id\n  },\n  updateData // This is a custom function that we supplied to our table instance\n\n}) => {\n  // We need to keep and update the state of the cell normally\n  const {\n    0: value,\n    1: setValue\n  } = useState(initialValue);\n\n  const onChange = e => {\n    setValue(e.target.value);\n  }; // We'll only update the external data when the input is blurred\n\n\n  const onBlur = () => {\n    updateData(index, id, value);\n  }; // If the initialValue is changed external, sync it up with our state\n\n\n  useEffect(() => {\n    setValue(initialValue);\n  }, [initialValue]);\n  return editableFields.includes(id) ? __jsx(\"input\", {\n    value: value,\n    onChange: onChange,\n    onBlur: onBlur,\n    className: \"w-full bg-transparent focus:bg-white\"\n  }) : __jsx(\"div\", {\n    className: \"\"\n  }, value);\n}; // Define a default UI for filtering\n\n\nfunction GlobalFilter({\n  preGlobalFilteredRows,\n  globalFilter,\n  setGlobalFilter\n}) {\n  const count = preGlobalFilteredRows.length;\n  const {\n    0: value,\n    1: setValue\n  } = useState(globalFilter);\n  const onChange = useAsyncDebounce(value => {\n    setGlobalFilter(value || undefined);\n  }, 200);\n  return __jsx(\"span\", null, \"Search:\", ' ', __jsx(\"input\", {\n    value: value || '',\n    onChange: e => {\n      setValue(e.target.value);\n      onChange(e.target.value);\n    },\n    placeholder: `${count} records...`,\n    style: {\n      fontSize: '1.1rem',\n      border: '0'\n    }\n  }));\n} // Define a UI for filtering\n\n\nfunction DefaultColumnFilter({\n  column: {\n    filterValue,\n    preFilteredRows,\n    setFilter\n  }\n}) {\n  const count = preFilteredRows.length;\n  return __jsx(\"input\", {\n    value: filterValue || '',\n    onChange: e => {\n      setFilter(e.target.value || undefined); // Set undefined to remove the filter entirely\n    },\n    placeholder: `Search ${count} records...`\n  });\n}\n\nconst sendInvite = (e, data) => {\n  e.stopPropagation();\n  console.log('we are sending the invite to', data);\n};\n\nconst IndexPage = () => {\n  const {\n    0: data,\n    1: setData\n  } = useState(() => makeData(20));\n  const columns = useMemo(() => [{\n    Header: 'Table',\n    columns: [{\n      Header: 'First Name',\n      accessor: 'firstName'\n    }, {\n      Header: 'Last Name',\n      accessor: 'lastName'\n    }, {\n      Header: 'Email',\n      accessor: 'email'\n    }]\n  }, {\n    Header: 'Test Info',\n    columns: [{\n      Header: 'Invite Sent',\n      accessor: 'inviteSent'\n    }, {\n      Header: 'Test Sent',\n      accessor: 'testSent'\n    }, {\n      Header: 'Test Status',\n      accessor: 'testStatus'\n    }]\n  }], []);\n  const spring = React.useMemo(() => ({\n    type: 'spring',\n    damping: 50,\n    stiffness: 100\n  }), []);\n  const filterTypes = useMemo(() => ({\n    // Add a new fuzzyTextFilterFn filter type.\n    fuzzyText: fuzzyTextFilterFn,\n    // Or, override the default text filter to use\n    // \"startWith\"\n    text: (rows, id, filterValue) => {\n      return rows.filter(row => {\n        const rowValue = row.values[id];\n        return rowValue !== undefined ? String(rowValue).toLowerCase().startsWith(String(filterValue).toLowerCase()) : true;\n      });\n    }\n  }), []);\n  const defaultColumn = React.useMemo(() => ({\n    // Let's set up our Filter UI\n    Filter: DefaultColumnFilter,\n    Cell: EditableCell\n  }), []);\n\n  const renderTableSelect = hooks => {\n    hooks.visibleColumns.push(columns => [// Let's make a column for selection\n    {\n      id: 'selection',\n      // The header can use the table's getToggleAllRowsSelectedProps method\n      // to render a checkbox\n      Header: ({\n        getToggleAllPageRowsSelectedProps\n      }) => __jsx(\"div\", null, __jsx(Checkbox, getToggleAllPageRowsSelectedProps())),\n      // The cell can use the individual row's getToggleRowSelectedProps method\n      // to the render a checkbox\n      Cell: ({\n        row\n      }) => __jsx(\"div\", null, __jsx(Checkbox, row.getToggleRowSelectedProps()))\n    }, ...columns]);\n  };\n\n  const renderTableHeader = column => {\n    const header = column.render('Header');\n    return __jsx(React.Fragment, null, header);\n  };\n\n  const renderTableRow = (page, prepareRow) => {\n    // console.log('in the body', page)\n    const renderTableCell = cell => {\n      // debugger\n      if (cell.column.id === 'inviteSent') {\n        var _cell$row, _cell$row$values, _cell$row$values$invi;\n\n        if (((_cell$row = cell.row) === null || _cell$row === void 0 ? void 0 : (_cell$row$values = _cell$row.values) === null || _cell$row$values === void 0 ? void 0 : (_cell$row$values$invi = _cell$row$values.inviteSent) === null || _cell$row$values$invi === void 0 ? void 0 : _cell$row$values$invi.toLowerCase()) === 'no') return __jsx(\"div\", {\n          className: \"z-50 inline-flex items-center justify-center w-full h-full align-middle group\"\n        }, __jsx(\"span\", {\n          className: \"text-red-600\"\n        }, cell.render('Cell')), __jsx(\"span\", {\n          className: \"hidden align-middle group-focus:flex group-hover:flex align-center\"\n        }, __jsx(Dropdown, {\n          buttonLabel: __jsx(FiMoreHorizontal, {\n            className: \"flex self-center opacity-50\"\n          }),\n          className: \"z-20 ml-4\"\n        }, __jsx(\"ul\", {\n          className: \"w-40 py-2 space-y-4 text-sm\"\n        }, __jsx(\"li\", null, __jsx(\"span\", {\n          className: \"cursor-pointer text-primary hover:underline\",\n          title: \"components\",\n          onClick: e => sendInvite(e, cell.row.values)\n        }, __jsx(MdFeaturedPlayList, {\n          className: \"inline ml-6 mr-4\"\n        }), \"Send Invite\")), __jsx(\"li\", null, __jsx(\"hr\", {\n          className: \"dark:border-gray-700\"\n        })), __jsx(\"li\", {\n          className: \"cursor-not-allowed\"\n        }, __jsx(\"span\", {\n          className: \"text-primary hover:underline\",\n          title: \"Typography\"\n        }, __jsx(AiOutlineFontColors, {\n          className: \"inline ml-6 mr-4 \"\n        }), \"More Options\"))))));else return __jsx(\"div\", {\n          className: \"inline-flex items-center justify-center w-full align-middle group\"\n        }, __jsx(\"span\", {\n          className: \"text-green-600\"\n        }, cell.render('Cell')));\n      }\n\n      if (cell.column.id === 'testSent') {\n        var _cell$row$values2, _cell$row$values2$tes;\n\n        if (((_cell$row$values2 = cell.row.values) === null || _cell$row$values2 === void 0 ? void 0 : (_cell$row$values2$tes = _cell$row$values2.testSent) === null || _cell$row$values2$tes === void 0 ? void 0 : _cell$row$values2$tes.toLowerCase()) === 'no') return __jsx(\"div\", {\n          className: \"inline text-red-600\"\n        }, cell.render('Cell'));else return __jsx(\"div\", {\n          className: \"inline text-green-600\"\n        }, cell.render('Cell'));\n      }\n\n      if (cell.column.id === 'testStatus') {\n        var _cell$row2, _cell$row2$values, _cell$row2$values$tes;\n\n        if (((_cell$row2 = cell.row) === null || _cell$row2 === void 0 ? void 0 : (_cell$row2$values = _cell$row2.values) === null || _cell$row2$values === void 0 ? void 0 : (_cell$row2$values$tes = _cell$row2$values.testStatus) === null || _cell$row2$values$tes === void 0 ? void 0 : _cell$row2$values$tes.toLowerCase()) === 'pending') return __jsx(\"div\", {\n          className: \"inline text-yellow-700\"\n        }, cell.render('Cell'));else return __jsx(\"div\", {\n          className: \"inline text-green-600\"\n        }, cell.render('Cell'));\n      }\n\n      return cell.render('Cell');\n    };\n\n    return __jsx(React.Fragment, null, page.map((row, i) => {\n      prepareRow(row);\n      return __jsx(motion.tr, _extends({}, row.getRowProps({\n        layoutTransition: spring,\n        exit: {\n          opacity: 0,\n          maxHeight: 0\n        }\n      }), {\n        className: `${i % 2 ? 'bg-gray-400' : ''} h-16`\n      }), row.cells.map((cell, i) => {\n        return __jsx(motion.td, cell.getCellProps({\n          layoutTransition: spring\n        }), renderTableCell ? renderTableCell(cell) : cell.render('Cell'));\n      }));\n    }));\n  };\n\n  const handleBatchActions = controls => {\n    console.log('over to batch', controls);\n    const {\n      state: tableState,\n      selectedFlatRows\n    } = controls;\n    const {\n      selectedRowIds\n    } = tableState;\n    const selectedLen = Object.keys(selectedRowIds || {}).length;\n    const selectedMembers = selectedFlatRows.map(d => d.original);\n    const uninvitedMembers = selectedMembers.filter(d => {\n      var _d$testSent;\n\n      return ((_d$testSent = d['testSent']) === null || _d$testSent === void 0 ? void 0 : _d$testSent.toLowerCase()) !== 'no';\n    });\n\n    if (selectedLen) {\n      return __jsx(\"div\", {\n        className: \"flex justify-between w-full mb-2\"\n      }, __jsx(\"p\", null, \"You have selected \", selectedLen, \" members\"), __jsx(\"div\", null, __jsx(Button, {\n        onClick: e => sendInvite(e, uninvitedMembers)\n      }, \"Send Invitation to \", selectedLen, \" members\")));\n    }\n\n    return __jsx(\"p\", null, \"hi\");\n  };\n\n  return __jsx(Layout, {\n    title: \"Your Awesome App\",\n    className: \"container max-w-5xl py-8 overflow-auto\",\n    header: headerSearch()\n  }, __jsx(\"p\", {\n    className: \"mb-4 text-lg font-light\"\n  }, \"Demo spreadsheet upload and email list system.\"), __jsx(\"div\", null, __jsx(TableComponent, {\n    columns: columns,\n    data: data,\n    setData: setData,\n    filterTypes: filterTypes,\n    defaultColumn: defaultColumn,\n    globalFilter: {\n      use: true,\n      Component: GlobalFilter\n    },\n    renderHeader: renderTableHeader // renderFilter= {(column: unknown) => JSX.Element}\n    // renderTableBody={renderTableBody}\n    ,\n    renderTableRow: renderTableRow // renderTableCell= {(cell: unknown) => JSX.Element}\n    ,\n    handleTableControls: {\n      jsx: handleBatchActions\n    },\n    customHook: renderTableSelect\n  })));\n};\n\nexport default IndexPage;","map":{"version":3,"sources":["/mnt/c/Users/arash/Documents/DevInDoc/Getaboard/demoEmail/reward-test/pages/index.tsx"],"names":["React","useEffect","useMemo","useState","motion","matchSorter","FiMoreHorizontal","Layout","TableComponent","useAsyncDebounce","makeData","Checkbox","Dropdown","MdFeaturedPlayList","AiOutlineFontColors","Button","editableFields","headerSearch","width","fuzzyTextFilterFn","rows","id","filterValue","keys","row","values","autoRemove","val","EditableCell","value","initialValue","index","column","updateData","setValue","onChange","e","target","onBlur","includes","GlobalFilter","preGlobalFilteredRows","globalFilter","setGlobalFilter","count","length","undefined","fontSize","border","DefaultColumnFilter","preFilteredRows","setFilter","sendInvite","data","stopPropagation","console","log","IndexPage","setData","columns","Header","accessor","spring","type","damping","stiffness","filterTypes","fuzzyText","text","filter","rowValue","String","toLowerCase","startsWith","defaultColumn","Filter","Cell","renderTableSelect","hooks","visibleColumns","push","getToggleAllPageRowsSelectedProps","getToggleRowSelectedProps","renderTableHeader","header","render","renderTableRow","page","prepareRow","renderTableCell","cell","inviteSent","testSent","testStatus","map","i","getRowProps","layoutTransition","exit","opacity","maxHeight","cells","getCellProps","handleBatchActions","controls","state","tableState","selectedFlatRows","selectedRowIds","selectedLen","Object","selectedMembers","d","original","uninvitedMembers","use","Component","jsx"],"mappings":"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","sourcesContent":["import React, { useEffect, useMemo, useState } from 'react'\nimport { NextPage } from 'next'\nimport { motion, AnimatePresence } from 'framer-motion'\nimport Link from 'next/link'\nimport matchSorter from 'match-sorter'\nimport { FiArrowRight, FiMoreHorizontal } from 'react-icons/fi'\nimport routes from '@utils/routes'\nimport Layout from '@components/layout/Layout'\nimport TableComponent, { useAsyncDebounce } from '@components/Table'\nimport makeData from '@utils/helpers'\nimport Checkbox from '@components/Checkbox'\nimport Dropdown from '@components/Dropdown'\nimport { MdFeaturedPlayList } from 'react-icons/md'\nimport { AiOutlineFontColors } from 'react-icons/ai'\nimport Button from '@components/Button'\n\nconst editableFields = ['firstName', 'lastName', 'email']\n\nconst headerSearch = () => {\n  return (\n    <div className=\"flex justify-start\" style={{ width: '55%' }}>\n      <p>an header search here</p>\n    </div>\n  )\n}\n\nfunction fuzzyTextFilterFn(rows, id, filterValue) {\n  return matchSorter(rows, filterValue, { keys: [(row) => row.values[id]] })\n}\n\n// Let the table remove the filter if the string is empty\nfuzzyTextFilterFn.autoRemove = (val) => !val\n\n// Create an editable cell renderer\nconst EditableCell = ({\n  value: initialValue,\n  row: { index },\n  column: { id },\n  updateData, // This is a custom function that we supplied to our table instance\n}) => {\n  // We need to keep and update the state of the cell normally\n  const [value, setValue] = useState(initialValue)\n\n  const onChange = (e) => {\n    setValue(e.target.value)\n  }\n\n  // We'll only update the external data when the input is blurred\n  const onBlur = () => {\n    updateData(index, id, value)\n  }\n\n  // If the initialValue is changed external, sync it up with our state\n  useEffect(() => {\n    setValue(initialValue)\n  }, [initialValue])\n\n  return editableFields.includes(id) ? (\n    <input\n      value={value}\n      onChange={onChange}\n      onBlur={onBlur}\n      className=\"w-full bg-transparent focus:bg-white\"\n    />\n  ) : (\n    <div className=\"\">{value}</div>\n  )\n}\n\n// Define a default UI for filtering\nfunction GlobalFilter({\n  preGlobalFilteredRows,\n  globalFilter,\n  setGlobalFilter,\n}) {\n  const count = preGlobalFilteredRows.length\n  const [value, setValue] = useState(globalFilter)\n  const onChange = useAsyncDebounce((value) => {\n    setGlobalFilter(value || undefined)\n  }, 200)\n\n  return (\n    <span>\n      Search:{' '}\n      <input\n        value={value || ''}\n        onChange={(e) => {\n          setValue(e.target.value)\n          onChange(e.target.value)\n        }}\n        placeholder={`${count} records...`}\n        style={{\n          fontSize: '1.1rem',\n          border: '0',\n        }}\n      />\n    </span>\n  )\n}\n\n// Define a UI for filtering\nfunction DefaultColumnFilter({\n  column: { filterValue, preFilteredRows, setFilter },\n}) {\n  const count = preFilteredRows.length\n\n  return (\n    <input\n      value={filterValue || ''}\n      onChange={(e) => {\n        setFilter(e.target.value || undefined) // Set undefined to remove the filter entirely\n      }}\n      placeholder={`Search ${count} records...`}\n    />\n  )\n}\n\nconst sendInvite = (e, data) => {\n  e.stopPropagation()\n  console.log('we are sending the invite to', data)\n}\n\nconst IndexPage: NextPage = () => {\n  const [data, setData] = useState(() => makeData(20))\n  const columns = useMemo(\n    () => [\n      {\n        Header: 'Table',\n        columns: [\n          {\n            Header: 'First Name',\n            accessor: 'firstName',\n          },\n          {\n            Header: 'Last Name',\n            accessor: 'lastName',\n          },\n          {\n            Header: 'Email',\n            accessor: 'email',\n          },\n        ],\n      },\n      {\n        Header: 'Test Info',\n        columns: [\n          {\n            Header: 'Invite Sent',\n            accessor: 'inviteSent',\n          },\n          {\n            Header: 'Test Sent',\n            accessor: 'testSent',\n          },\n          {\n            Header: 'Test Status',\n            accessor: 'testStatus',\n          },\n        ],\n      },\n    ],\n    []\n  )\n  const spring = React.useMemo(\n    () => ({\n      type: 'spring',\n      damping: 50,\n      stiffness: 100,\n    }),\n    []\n  )\n  const filterTypes = useMemo(\n    () => ({\n      // Add a new fuzzyTextFilterFn filter type.\n      fuzzyText: fuzzyTextFilterFn,\n      // Or, override the default text filter to use\n      // \"startWith\"\n      text: (rows, id, filterValue) => {\n        return rows.filter((row) => {\n          const rowValue = row.values[id]\n          return rowValue !== undefined\n            ? String(rowValue)\n                .toLowerCase()\n                .startsWith(String(filterValue).toLowerCase())\n            : true\n        })\n      },\n    }),\n    []\n  )\n\n  const defaultColumn = React.useMemo(\n    () => ({\n      // Let's set up our Filter UI\n      Filter: DefaultColumnFilter,\n      Cell: EditableCell,\n    }),\n    []\n  )\n\n  const renderTableSelect = (hooks) => {\n    hooks.visibleColumns.push((columns) => [\n      // Let's make a column for selection\n      {\n        id: 'selection',\n        // The header can use the table's getToggleAllRowsSelectedProps method\n        // to render a checkbox\n        Header: ({ getToggleAllPageRowsSelectedProps }) => (\n          <div>\n            <Checkbox {...getToggleAllPageRowsSelectedProps()} />\n          </div>\n        ),\n        // The cell can use the individual row's getToggleRowSelectedProps method\n        // to the render a checkbox\n        Cell: ({ row }) => (\n          <div>\n            <Checkbox {...row.getToggleRowSelectedProps()} />\n          </div>\n        ),\n      },\n      ...columns,\n    ])\n  }\n\n  const renderTableHeader = (column) => {\n    const header = column.render('Header')\n    return <>{header}</>\n  }\n  const renderTableRow = (page, prepareRow) => {\n    // console.log('in the body', page)\n    const renderTableCell = (cell) => {\n      // debugger\n      if (cell.column.id === 'inviteSent') {\n        if (cell.row?.values?.inviteSent?.toLowerCase() === 'no')\n          return (\n            <div className=\"z-50 inline-flex items-center justify-center w-full h-full align-middle group\">\n              <span className=\"text-red-600\">{cell.render('Cell')}</span>\n              <span className=\"hidden align-middle group-focus:flex group-hover:flex align-center\">\n                <Dropdown\n                  buttonLabel={\n                    <FiMoreHorizontal className=\"flex self-center opacity-50\" />\n                  }\n                  className=\"z-20 ml-4\"\n                >\n                  <ul className=\"w-40 py-2 space-y-4 text-sm\">\n                    <li>\n                      <span\n                        className=\"cursor-pointer text-primary hover:underline\"\n                        title=\"components\"\n                        onClick={(e) => sendInvite(e, cell.row.values)}\n                      >\n                        <MdFeaturedPlayList className=\"inline ml-6 mr-4\" />\n                        Send Invite\n                      </span>\n                    </li>\n                    <li>\n                      <hr className=\"dark:border-gray-700\" />\n                    </li>\n                    <li className=\"cursor-not-allowed\">\n                      <span\n                        className=\"text-primary hover:underline\"\n                        title=\"Typography\"\n                      >\n                        <AiOutlineFontColors className=\"inline ml-6 mr-4 \" />\n                        More Options\n                      </span>\n                    </li>\n                  </ul>\n                </Dropdown>\n              </span>\n            </div>\n          )\n        else\n          return (\n            <div className=\"inline-flex items-center justify-center w-full align-middle group\">\n              <span className=\"text-green-600\">{cell.render('Cell')}</span>\n            </div>\n          )\n      }\n      if (cell.column.id === 'testSent') {\n        if (cell.row.values?.testSent?.toLowerCase() === 'no')\n          return (\n            <div className=\"inline text-red-600\">{cell.render('Cell')}</div>\n          )\n        else\n          return (\n            <div className=\"inline text-green-600\">{cell.render('Cell')}</div>\n          )\n      }\n      if (cell.column.id === 'testStatus') {\n        if (cell.row?.values?.testStatus?.toLowerCase() === 'pending')\n          return (\n            <div className=\"inline text-yellow-700\">{cell.render('Cell')}</div>\n          )\n        else\n          return (\n            <div className=\"inline text-green-600\">{cell.render('Cell')}</div>\n          )\n      }\n      return cell.render('Cell')\n    }\n    return (\n      <>\n        {page.map((row, i) => {\n          prepareRow(row)\n          return (\n            <motion.tr\n              {...row.getRowProps({\n                layoutTransition: spring,\n                exit: { opacity: 0, maxHeight: 0 },\n              })}\n              className={`${i % 2 ? 'bg-gray-400' : ''} h-16`}\n            >\n              {row.cells.map((cell, i) => {\n                return (\n                  <motion.td\n                    {...cell.getCellProps({\n                      layoutTransition: spring,\n                    })}\n                  >\n                    {renderTableCell\n                      ? renderTableCell(cell)\n                      : cell.render('Cell')}\n                  </motion.td>\n                )\n              })}\n            </motion.tr>\n          )\n        })}\n      </>\n    )\n  }\n\n  const handleBatchActions = (controls) => {\n    console.log('over to batch', controls)\n    const { state: tableState, selectedFlatRows } = controls\n    const { selectedRowIds } = tableState\n    const selectedLen = Object.keys(selectedRowIds || {}).length\n\n    const selectedMembers = selectedFlatRows.map((d) => d.original)\n    const uninvitedMembers = selectedMembers.filter(\n      (d) => d['testSent']?.toLowerCase() !== 'no'\n    )\n\n    if (selectedLen) {\n      return (\n        <div className=\"flex justify-between w-full mb-2\">\n          <p>You have selected {selectedLen} members</p>\n          <div>\n            <Button onClick={(e) => sendInvite(e, uninvitedMembers)}>\n              Send Invitation to {selectedLen} members\n            </Button>\n          </div>\n        </div>\n      )\n    }\n    return <p>hi</p>\n  }\n\n  return (\n    <Layout\n      title=\"Your Awesome App\"\n      className=\"container max-w-5xl py-8 overflow-auto\"\n      header={headerSearch()}\n    >\n      {/* <h1 className=\"mb-4 text-3xl font-black dark:text-gray-100\">Welcome</h1> */}\n      <p className=\"mb-4 text-lg font-light\">\n        Demo spreadsheet upload and email list system.\n      </p>\n      <div>\n        <TableComponent\n          columns={columns}\n          data={data}\n          setData={setData}\n          filterTypes={filterTypes}\n          defaultColumn={defaultColumn}\n          globalFilter={{ use: true, Component: GlobalFilter }}\n          renderHeader={renderTableHeader}\n          // renderFilter= {(column: unknown) => JSX.Element}\n          // renderTableBody={renderTableBody}\n          renderTableRow={renderTableRow}\n          // renderTableCell= {(cell: unknown) => JSX.Element}\n          handleTableControls={{ jsx: handleBatchActions }}\n          customHook={renderTableSelect}\n        />\n      </div>\n    </Layout>\n  )\n}\n\nexport default IndexPage\n"]},"metadata":{},"sourceType":"module"}