{"ast":null,"code":"var _jsxFileName = \"/mnt/c/Users/arash/Documents/DevInDoc/Getaboard/demoEmail/reward-test/src/components/Table.tsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useState } from 'react';\nimport { useTable, usePagination, useRowSelect } from 'react-table';\nimport styled from 'styled-components';\nimport Checkbox from './Checkbox';\nconst Styles = styled.div`\n  padding: 1rem;\n\n  table {\n    border-spacing: 0;\n    border: 1px solid black;\n\n    tr {\n      :last-child {\n        td {\n          border-bottom: 0;\n        }\n      }\n    }\n\n    th,\n    td {\n      margin: 0;\n      padding: 0.5rem;\n      border-bottom: 1px solid black;\n      border-right: 1px solid black;\n\n      :last-child {\n        border-right: 0;\n      }\n\n      input {\n        font-size: 1rem;\n        padding: 0;\n        margin: 0;\n        border: 0;\n      }\n    }\n\n    .pagination {\n      padding: 0.5rem;\n    }\n  }\n`;\n\nfunction TableComponent({\n  columns,\n  data,\n  setData,\n  editableFields\n}) {\n  const {\n    0: skipPageReset,\n    1: setSkipPageReset\n  } = useState(false); // We need to keep the table from resetting the pageIndex when we\n  // Update data. So we can keep track of that flag with a ref.\n  // When our cell renderer calls updateMyData, we'll use\n  // the rowIndex, columnId and new value to update the\n  // original data\n\n  const updateData = (rowIndex, columnId, value) => {\n    // We also turn on the flag to not reset the page\n    setSkipPageReset(true);\n    setData(old => old.map((row, index) => {\n      if (index === rowIndex) {\n        return _objectSpread(_objectSpread({}, old[rowIndex]), {}, {\n          [columnId]: value\n        });\n      }\n\n      return row;\n    }));\n  }; // After data chagnes, we turn the flag back off\n  // so that if data actually changes when we're not\n  // editing it, the page is reset\n\n\n  useEffect(() => {\n    setSkipPageReset(false);\n  }, [data]);\n  return __jsx(Styles, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 5\n    }\n  }, __jsx(Table, {\n    columns: columns,\n    data: data,\n    updateData: updateData,\n    skipPageReset: skipPageReset,\n    editableFields: editableFields,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default TableComponent; // Be sure to pass our updateData and the skipPageReset option\n\nfunction Table({\n  columns,\n  data,\n  updateData,\n  skipPageReset,\n  editableFields\n}) {\n  // Create an editable cell renderer\n  const EditableCell = (_ref) => {\n    let {\n      value: initialValue,\n      row: {\n        index\n      },\n      column: {\n        id\n      },\n      updateData\n    } = _ref,\n        rest = _objectWithoutProperties(_ref, [\"value\", \"row\", \"column\", \"updateData\"]);\n\n    console.log(' them edit', initialValue, index, id, rest); // We need to keep and update the state of the cell normally\n\n    const {\n      0: value,\n      1: setValue\n    } = useState(initialValue);\n\n    const onChange = e => {\n      setValue(e.target.value);\n    }; // We'll only update the external data when the input is blurred\n\n\n    const onBlur = () => {\n      updateData(index, id, value);\n    }; // If the initialValue is changed external, sync it up with our state\n\n\n    useEffect(() => {\n      setValue(initialValue);\n    }, [initialValue]);\n    return editableFields.includes(id) ? __jsx(\"input\", {\n      value: value,\n      onChange: onChange,\n      onBlur: onBlur,\n      className: \"w-full bg-transparent\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 7\n      }\n    }) : __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 7\n      }\n    }, value);\n  }; // Set our editable cell renderer as the default Cell renderer\n\n\n  const defaultColumn = {\n    Cell: EditableCell\n  };\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    prepareRow,\n    page,\n    canPreviousPage,\n    canNextPage,\n    pageOptions,\n    pageCount,\n    gotoPage,\n    nextPage,\n    previousPage,\n    setPageSize,\n    selectedFlatRows,\n    state: {\n      pageIndex,\n      pageSize,\n      selectedRowIds\n    }\n  } = useTable({\n    columns,\n    data,\n    defaultColumn,\n    // use the skipPageReset option to disable page resetting temporarily\n    autoResetPage: !skipPageReset,\n    updateData\n  }, usePagination, useRowSelect, hooks => {\n    hooks.visibleColumns.push(columns => [// Let's make a column for selection\n    {\n      id: 'selection',\n      // The header can use the table's getToggleAllRowsSelectedProps method\n      // to render a checkbox\n      Header: ({\n        getToggleAllPageRowsSelectedProps\n      }) => __jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 13\n        }\n      }, __jsx(Checkbox, _extends({}, getToggleAllPageRowsSelectedProps(), {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 15\n        }\n      }))),\n      // The cell can use the individual row's getToggleRowSelectedProps method\n      // to the render a checkbox\n      Cell: ({\n        row\n      }) => __jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 13\n        }\n      }, __jsx(Checkbox, _extends({}, row.getToggleRowSelectedProps(), {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 15\n        }\n      })))\n    }, ...columns]);\n  }); // Render the UI for your table\n\n  return __jsx(React.Fragment, null, __jsx(\"table\", _extends({}, getTableProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 7\n    }\n  }), __jsx(\"thead\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 9\n    }\n  }, headerGroups.map(headerGroup => __jsx(\"tr\", _extends({}, headerGroup.getHeaderGroupProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 13\n    }\n  }), headerGroup.headers.map(column => __jsx(\"th\", _extends({}, column.getHeaderProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 17\n    }\n  }), column.render('Header')))))), __jsx(\"tbody\", _extends({}, getTableBodyProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 9\n    }\n  }), page.map((row, i) => {\n    prepareRow(row);\n    return __jsx(\"tr\", _extends({}, row.getRowProps(), {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 15\n      }\n    }), row.cells.map(cell => {\n      return __jsx(\"td\", _extends({}, cell.getCellProps(), {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 26\n        }\n      }), cell.render('Cell'));\n    }));\n  }))), __jsx(\"div\", {\n    className: \"pagination\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 7\n    }\n  }, __jsx(\"button\", {\n    onClick: () => gotoPage(0),\n    disabled: !canPreviousPage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 9\n    }\n  }, '<<'), ' ', __jsx(\"button\", {\n    onClick: () => previousPage(),\n    disabled: !canPreviousPage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 9\n    }\n  }, '<'), ' ', __jsx(\"button\", {\n    onClick: () => nextPage(),\n    disabled: !canNextPage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 9\n    }\n  }, '>'), ' ', __jsx(\"button\", {\n    onClick: () => gotoPage(pageCount - 1),\n    disabled: !canNextPage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 9\n    }\n  }, '>>'), ' ', __jsx(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 9\n    }\n  }, \"Page\", ' ', __jsx(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 11\n    }\n  }, pageIndex + 1, \" of \", pageOptions.length), ' '), __jsx(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 9\n    }\n  }, \"| Go to page:\", ' ', __jsx(\"input\", {\n    type: \"number\",\n    defaultValue: pageIndex + 1,\n    onChange: e => {\n      const page = e.target.value ? Number(e.target.value) - 1 : 0;\n      gotoPage(page);\n    },\n    style: {\n      width: '100px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 262,\n      columnNumber: 11\n    }\n  })), ' ', __jsx(\"select\", {\n    value: pageSize,\n    onChange: e => {\n      setPageSize(Number(e.target.value));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 9\n    }\n  }, [10, 20, 30, 40, 50].map(pageSize => __jsx(\"option\", {\n    key: pageSize,\n    value: pageSize,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 281,\n      columnNumber: 13\n    }\n  }, \"Show \", pageSize)))));\n}","map":{"version":3,"sources":["/mnt/c/Users/arash/Documents/DevInDoc/Getaboard/demoEmail/reward-test/src/components/Table.tsx"],"names":["React","useEffect","useState","useTable","usePagination","useRowSelect","styled","Checkbox","Styles","div","TableComponent","columns","data","setData","editableFields","skipPageReset","setSkipPageReset","updateData","rowIndex","columnId","value","old","map","row","index","Table","EditableCell","initialValue","column","id","rest","console","log","setValue","onChange","e","target","onBlur","includes","defaultColumn","Cell","getTableProps","getTableBodyProps","headerGroups","prepareRow","page","canPreviousPage","canNextPage","pageOptions","pageCount","gotoPage","nextPage","previousPage","setPageSize","selectedFlatRows","state","pageIndex","pageSize","selectedRowIds","autoResetPage","hooks","visibleColumns","push","Header","getToggleAllPageRowsSelectedProps","getToggleRowSelectedProps","headerGroup","getHeaderGroupProps","headers","getHeaderProps","render","i","getRowProps","cells","cell","getCellProps","length","Number","width"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport clsx from 'clsx'\nimport { useTable, usePagination, useRowSelect } from 'react-table'\nimport styled from 'styled-components'\nimport Input from './Input'\nimport Checkbox from './Checkbox'\n\nexport interface Props {\n  className?: string | Record<string, unknown>\n  ordered?: boolean\n  item?: boolean\n}\n\nconst Styles = styled.div`\n  padding: 1rem;\n\n  table {\n    border-spacing: 0;\n    border: 1px solid black;\n\n    tr {\n      :last-child {\n        td {\n          border-bottom: 0;\n        }\n      }\n    }\n\n    th,\n    td {\n      margin: 0;\n      padding: 0.5rem;\n      border-bottom: 1px solid black;\n      border-right: 1px solid black;\n\n      :last-child {\n        border-right: 0;\n      }\n\n      input {\n        font-size: 1rem;\n        padding: 0;\n        margin: 0;\n        border: 0;\n      }\n    }\n\n    .pagination {\n      padding: 0.5rem;\n    }\n  }\n`\n\nfunction TableComponent({\n  columns,\n  data,\n  setData,\n  editableFields,\n}: {\n  editableFields?: Array<unknown>\n  columns: {\n    Header?: string\n    columns: {\n      Header: string\n      accessor: string\n      Cell?: unknown\n    }[]\n  }[]\n  data: Record<string, unknown>\n  setData: React.Dispatch<unknown>\n}) {\n  const [skipPageReset, setSkipPageReset] = useState(false)\n\n  // We need to keep the table from resetting the pageIndex when we\n  // Update data. So we can keep track of that flag with a ref.\n\n  // When our cell renderer calls updateMyData, we'll use\n  // the rowIndex, columnId and new value to update the\n  // original data\n  const updateData = (rowIndex, columnId, value) => {\n    // We also turn on the flag to not reset the page\n    setSkipPageReset(true)\n    setData((old) =>\n      old.map((row, index) => {\n        if (index === rowIndex) {\n          return {\n            ...old[rowIndex],\n            [columnId]: value,\n          }\n        }\n        return row\n      })\n    )\n  }\n\n  // After data chagnes, we turn the flag back off\n  // so that if data actually changes when we're not\n  // editing it, the page is reset\n  useEffect(() => {\n    setSkipPageReset(false)\n  }, [data])\n\n  return (\n    <Styles>\n      <Table\n        columns={columns}\n        data={data}\n        updateData={updateData}\n        skipPageReset={skipPageReset}\n        editableFields={editableFields}\n      />\n    </Styles>\n  )\n}\n\nexport default TableComponent\n\n// Be sure to pass our updateData and the skipPageReset option\nfunction Table({ columns, data, updateData, skipPageReset, editableFields }) {\n  // Create an editable cell renderer\n  const EditableCell = ({\n    value: initialValue,\n    row: { index },\n    column: { id },\n    updateData, // This is a custom function that we supplied to our table instance\n    ...rest\n  }) => {\n    console.log(' them edit', initialValue, index, id, rest)\n    // We need to keep and update the state of the cell normally\n    const [value, setValue] = useState(initialValue)\n\n    const onChange = (e) => {\n      setValue(e.target.value)\n    }\n\n    // We'll only update the external data when the input is blurred\n    const onBlur = () => {\n      updateData(index, id, value)\n    }\n\n    // If the initialValue is changed external, sync it up with our state\n    useEffect(() => {\n      setValue(initialValue)\n    }, [initialValue])\n\n    return editableFields.includes(id) ? (\n      <input\n        value={value}\n        onChange={onChange}\n        onBlur={onBlur}\n        className=\"w-full bg-transparent\"\n      />\n    ) : (\n      <p>{value}</p>\n    )\n  }\n\n  // Set our editable cell renderer as the default Cell renderer\n  const defaultColumn = {\n    Cell: EditableCell,\n  }\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    prepareRow,\n    page,\n    canPreviousPage,\n    canNextPage,\n    pageOptions,\n    pageCount,\n    gotoPage,\n    nextPage,\n    previousPage,\n    setPageSize,\n    selectedFlatRows,\n    state: { pageIndex, pageSize, selectedRowIds },\n  } = useTable(\n    {\n      columns,\n      data,\n      defaultColumn,\n      // use the skipPageReset option to disable page resetting temporarily\n      autoResetPage: !skipPageReset,\n      updateData,\n    },\n    usePagination,\n    useRowSelect,\n    (hooks) => {\n      hooks.visibleColumns.push((columns) => [\n        // Let's make a column for selection\n        {\n          id: 'selection',\n          // The header can use the table's getToggleAllRowsSelectedProps method\n          // to render a checkbox\n          Header: ({ getToggleAllPageRowsSelectedProps }) => (\n            <div>\n              <Checkbox {...getToggleAllPageRowsSelectedProps()} />\n            </div>\n          ),\n          // The cell can use the individual row's getToggleRowSelectedProps method\n          // to the render a checkbox\n          Cell: ({ row }) => (\n            <div>\n              <Checkbox {...row.getToggleRowSelectedProps()} />\n            </div>\n          ),\n        },\n        ...columns,\n      ])\n    }\n  )\n\n  // Render the UI for your table\n  return (\n    <>\n      <table {...getTableProps()}>\n        <thead>\n          {headerGroups.map((headerGroup) => (\n            <tr {...headerGroup.getHeaderGroupProps()}>\n              {headerGroup.headers.map((column) => (\n                <th {...column.getHeaderProps()}>{column.render('Header')}</th>\n              ))}\n            </tr>\n          ))}\n        </thead>\n        <tbody {...getTableBodyProps()}>\n          {page.map((row, i) => {\n            prepareRow(row)\n            return (\n              <tr {...row.getRowProps()}>\n                {row.cells.map((cell) => {\n                  return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\n                })}\n              </tr>\n            )\n          })}\n        </tbody>\n      </table>\n      <div className=\"pagination\">\n        <button onClick={() => gotoPage(0)} disabled={!canPreviousPage}>\n          {'<<'}\n        </button>{' '}\n        <button onClick={() => previousPage()} disabled={!canPreviousPage}>\n          {'<'}\n        </button>{' '}\n        <button onClick={() => nextPage()} disabled={!canNextPage}>\n          {'>'}\n        </button>{' '}\n        <button onClick={() => gotoPage(pageCount - 1)} disabled={!canNextPage}>\n          {'>>'}\n        </button>{' '}\n        <span>\n          Page{' '}\n          <strong>\n            {pageIndex + 1} of {pageOptions.length}\n          </strong>{' '}\n        </span>\n        <span>\n          | Go to page:{' '}\n          <input\n            type=\"number\"\n            defaultValue={pageIndex + 1}\n            onChange={(e) => {\n              const page = e.target.value ? Number(e.target.value) - 1 : 0\n              gotoPage(page)\n            }}\n            style={{\n              width: '100px',\n            }}\n          />\n        </span>{' '}\n        <select\n          value={pageSize}\n          onChange={(e) => {\n            setPageSize(Number(e.target.value))\n          }}\n        >\n          {[10, 20, 30, 40, 50].map((pageSize) => (\n            <option key={pageSize} value={pageSize}>\n              Show {pageSize}\n            </option>\n          ))}\n        </select>\n      </div>\n    </>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}