{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  padding: 1rem;\\n\\n  table {\\n    /* border-spacing: 0; */\\n    /* border: 1px solid black; */\\n    border-collapse: separate;\\n    border-style: 1em;\\n    border-spacing: 1em;\\n    /* border-spacing: 0 1em; */\\n\\n    thead tr {\\n      :first-child {\\n        display: none;\\n      }\\n      /* border: none !important; */\\n      /* border-bottom: 2px solid; */\\n      background: none !important;\\n      border-radius: none !important;\\n    }\\n\\n    tbody {\\n      tr {\\n        border-radius: 1rem;\\n        padding: 1.5rem;\\n\\n        margin: 0.5rem 0;\\n        box-shadow: 0 3px 6px rgba(0, 0, 0, 0.57), 0 2px 4px rgba(0, 0, 0, 0.05);\\n        transition: transform 0.5s -webkit-transform 0.5s;\\n        :last-child {\\n          border-radius: 1rem;\\n          td {\\n            /* border-bottom: 0; */\\n          }\\n        }\\n      }\\n    }\\n\\n    th,\\n    td {\\n      margin: 0;\\n      padding: 0.5rem;\\n      /* border-bottom: 1px solid black;\\n      border-right: 1px solid black; */\\n\\n      :last-child {\\n        border-right: 0;\\n      }\\n\\n      /* input {\\n        font-size: 1rem;\\n        padding: 0;\\n        margin: 0;\\n        border: 0;\\n      } */\\n    }\\n\\n    .pagination {\\n      padding: 0.5rem;\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useEffect, useState } from 'react';\nimport { useTable, usePagination, useRowSelect, useSortBy, useFilters, useColumnOrder, useGlobalFilter, useAsyncDebounce } from 'react-table';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport matchSorter from 'match-sorter';\nimport styled from 'styled-components';\nimport { isEmpty } from '@utils/helpers';\nvar Styles = styled.div(_templateObject());\n\nfunction TableComponent(_ref) {\n  var columns = _ref.columns,\n      data = _ref.data,\n      setData = _ref.setData,\n      loading = _ref.loading,\n      tableClassName = _ref.tableClassName,\n      tableWrapper = _ref.tableWrapper,\n      rest = _objectWithoutProperties(_ref, [\"columns\", \"data\", \"setData\", \"loading\", \"tableClassName\", \"tableWrapper\"]);\n\n  var _useState = useState(false),\n      skipPageReset = _useState[0],\n      setSkipPageReset = _useState[1]; // We need to keep the table from resetting the pageIndex when we\n  // Update data. So we can keep track of that flag with a ref.\n  // When our cell renderer calls updateMyData, we'll use\n  // the rowIndex, columnId and new value to update the\n  // original data\n\n\n  var updateData = function updateData(rowIndex, columnId, value) {\n    // We also turn on the flag to not reset the page\n    setSkipPageReset(true);\n    setData(function (old) {\n      return old.map(function (row, index) {\n        if (index === rowIndex) {\n          return _objectSpread(_objectSpread({}, old[rowIndex]), {}, _defineProperty({}, columnId, value));\n        }\n\n        return row;\n      });\n    });\n  }; // After data chagnes, we turn the flag back off\n  // so that if data actually changes when we're not\n  // editing it, the page is reset\n\n\n  useEffect(function () {\n    setSkipPageReset(false);\n  }, [data]);\n  var tableOptions = {};\n  Array.from(['renderHeader', 'renderFilter', 'renderTableBody', 'renderTableRow', 'renderExtraTableTd', 'renderTableCell', 'defaultColumn', 'globalFilter', 'handleTableControls', 'customHook']).forEach(function (option) {\n    if (rest[option]) {\n      tableOptions[option] = rest[option];\n    }\n  });\n  var TableWrapper = Styles;\n\n  if (tableWrapper.use) {\n    TableWrapper = tableWrapper.wrapper;\n  }\n\n  return __jsx(TableWrapper, tableWrapper.use && _objectSpread({}, tableWrapper.props), __jsx(Table, {\n    tableClassName: tableClassName,\n    columns: columns,\n    loading: loading,\n    data: data,\n    updateData: updateData,\n    skipPageReset: skipPageReset,\n    options: _objectSpread({}, tableOptions)\n  }));\n}\n\nexport default TableComponent; // Be sure to pass our updateData and the skipPageReset option\n\nfunction Table(_ref2) {\n  var columns = _ref2.columns,\n      data = _ref2.data,\n      updateData = _ref2.updateData,\n      skipPageReset = _ref2.skipPageReset,\n      loading = _ref2.loading,\n      options = _ref2.options,\n      tableClassName = _ref2.tableClassName;\n\n  var _ref3 = options || {},\n      filterTypes = _ref3.filterTypes,\n      defaultColumn = _ref3.defaultColumn,\n      globalFilter = _ref3.globalFilter,\n      renderHeader = _ref3.renderHeader,\n      renderFilter = _ref3.renderFilter,\n      renderTableRow = _ref3.renderTableRow,\n      renderExtraTableTd = _ref3.renderExtraTableTd,\n      renderTableCell = _ref3.renderTableCell,\n      handleTableControls = _ref3.handleTableControls,\n      customHook = _ref3.customHook;\n\n  var extraHook = function extraHook(hooks) {\n    hooks.visibleColumns.push(function (columns) {\n      return _toConsumableArray(columns);\n    });\n  };\n\n  if (customHook) extraHook = customHook;\n  var hookOptions = {};\n  if (filterTypes) hookOptions.filterTypes = filterTypes;\n  if (defaultColumn) hookOptions.defaultColumn = defaultColumn;else hookOptions.defaultColumn = {};\n\n  var _useTable = useTable(_objectSpread({\n    columns: columns,\n    data: data,\n    // use the skipPageReset option to disable page resetting temporarily\n    autoResetPage: !skipPageReset,\n    updateData: updateData\n  }, hookOptions), useColumnOrder, useFilters, useGlobalFilter, useSortBy, usePagination, useRowSelect, extraHook),\n      getTableProps = _useTable.getTableProps,\n      getTableBodyProps = _useTable.getTableBodyProps,\n      headerGroups = _useTable.headerGroups,\n      prepareRow = _useTable.prepareRow,\n      page = _useTable.page,\n      canPreviousPage = _useTable.canPreviousPage,\n      canNextPage = _useTable.canNextPage,\n      pageOptions = _useTable.pageOptions,\n      pageCount = _useTable.pageCount,\n      gotoPage = _useTable.gotoPage,\n      nextPage = _useTable.nextPage,\n      previousPage = _useTable.previousPage,\n      setGlobalFilter = _useTable.setGlobalFilter,\n      setPageSize = _useTable.setPageSize,\n      selectedFlatRows = _useTable.selectedFlatRows,\n      visibleColumns = _useTable.visibleColumns,\n      preGlobalFilteredRows = _useTable.preGlobalFilteredRows,\n      state = _useTable.state;\n\n  var pageIndex = state.pageIndex,\n      pageSize = state.pageSize,\n      selectedRowIds = state.selectedRowIds;\n  var spring = React.useMemo(function () {\n    return {\n      type: 'spring',\n      damping: 50,\n      stiffness: 100\n    };\n  }, []);\n  var controls = {\n    getTableProps: getTableProps,\n    getTableBodyProps: getTableBodyProps,\n    headerGroups: headerGroups,\n    prepareRow: prepareRow,\n    page: page,\n    canPreviousPage: canPreviousPage,\n    canNextPage: canNextPage,\n    pageOptions: pageOptions,\n    pageCount: pageCount,\n    gotoPage: gotoPage,\n    nextPage: nextPage,\n    previousPage: previousPage,\n    setGlobalFilter: setGlobalFilter,\n    // setGlobalFilteredRows,\n    setPageSize: setPageSize,\n    selectedFlatRows: selectedFlatRows,\n    visibleColumns: visibleColumns,\n    preGlobalFilteredRows: preGlobalFilteredRows,\n    // setColumnOrder,\n    state: state\n  };\n\n  if (handleTableControls && handleTableControls.beforeTableRender) {\n    return handleTableControls.beforeTableRender(controls);\n  } // Render the UI for your table\n\n\n  return __jsx(React.Fragment, null, handleTableControls && handleTableControls.jsx && handleTableControls.jsx(controls), __jsx(\"table\", _extends({}, getTableProps(), {\n    className: tableClassName || ''\n  }), __jsx(\"thead\", null, (globalFilter === null || globalFilter === void 0 ? void 0 : globalFilter.use) && (globalFilter === null || globalFilter === void 0 ? void 0 : globalFilter.pos) === 'above' && data.length > 10 && __jsx(\"tr\", null, __jsx(\"th\", {\n    colSpan: visibleColumns.length,\n    style: {\n      textAlign: 'left'\n    }\n  }, __jsx(globalFilter.Component, {\n    preGlobalFilteredRows: preGlobalFilteredRows,\n    globalFilter: state.globalFilter,\n    setGlobalFilter: setGlobalFilter\n  }))), headerGroups.map(function (headerGroup) {\n    return __jsx(\"tr\", headerGroup.getHeaderGroupProps(), headerGroup.headers.map(function (column) {\n      return __jsx(motion.th, column.getHeaderProps({\n        layoutTransition: spring,\n        style: {}\n      }), __jsx(\"div\", column.getSortByToggleProps(), renderHeader ? renderHeader(column) : __jsx(React.Fragment, null, column.render('Header'), __jsx(\"span\", null, column.isSorted ? column.isSortedDesc ? ' 🔽' : ' 🔼' : ''))), __jsx(\"div\", null, column.canFilter && filterTypes ? renderFilter ? renderFilter(column) : column.render('Filter') : null));\n    }));\n  }), (globalFilter === null || globalFilter === void 0 ? void 0 : globalFilter.use) && (globalFilter === null || globalFilter === void 0 ? void 0 : globalFilter.pos) === 'below' && data.length > 10 && __jsx(\"tr\", null, __jsx(\"th\", {\n    colSpan: visibleColumns.length,\n    style: {\n      textAlign: 'left'\n    }\n  }, __jsx(globalFilter.Component, {\n    preGlobalFilteredRows: preGlobalFilteredRows,\n    globalFilter: state.globalFilter,\n    setGlobalFilter: setGlobalFilter\n  }))), isEmpty(data) && __jsx(\"tr\", null, __jsx(\"th\", {\n    colSpan: visibleColumns.length,\n    className: \"w-full h-48 my-4 text-base text-center hover:border-red-600 nothing-to-show-th\",\n    style: {\n      fontWeight: 'normal',\n      textAlign: 'center',\n      border: '1px dashed darkgreen'\n    }\n  }, loading ? __jsx(\"div\", {\n    className: \"spinner\"\n  }) : __jsx(\"p\", {\n    className: \"text-xl text-red-800 font-base\"\n  }, \"Nothing to show\")))), __jsx(\"tbody\", getTableBodyProps(), __jsx(AnimatePresence, null, renderTableRow ? renderTableRow(page, prepareRow) : page.map(function (row, i) {\n    prepareRow(row);\n    return __jsx(motion.tr, row.getRowProps({\n      layoutTransition: spring,\n      exit: {\n        opacity: 0,\n        maxHeight: 0\n      }\n    }), row.cells.map(function (cell, i) {\n      return __jsx(motion.td, cell.getCellProps({\n        layoutTransition: spring\n      }), renderTableCell ? renderTableCell(cell) : cell.render('Cell'));\n    }));\n  })), renderExtraTableTd && renderExtraTableTd(controls))), __jsx(\"div\", {\n    className: \"mt-2 pagination\"\n  }, data.length > 10 && __jsx(React.Fragment, null, __jsx(\"button\", {\n    onClick: function onClick() {\n      return gotoPage(0);\n    },\n    className: \"\".concat(!canPreviousPage ? 'opacity-25' : ''),\n    disabled: !canPreviousPage\n  }, '<<'), ' ', __jsx(\"button\", {\n    onClick: function onClick() {\n      return previousPage();\n    },\n    className: \"\".concat(!canPreviousPage ? 'opacity-25' : ''),\n    disabled: !canPreviousPage\n  }, '<'), ' ', __jsx(\"button\", {\n    onClick: function onClick() {\n      return nextPage();\n    },\n    disabled: !canNextPage,\n    className: \"\".concat(!canNextPage ? 'opacity-25' : '')\n  }, '>'), ' ', __jsx(\"button\", {\n    onClick: function onClick() {\n      return gotoPage(pageCount - 1);\n    },\n    disabled: !canNextPage,\n    className: \"\".concat(!canNextPage ? 'opacity-25' : '')\n  }, '>>')), (data === null || data === void 0 ? void 0 : data.length) > 10 && __jsx(React.Fragment, null, __jsx(\"span\", {\n    className: \"text-sm\"\n  }, \"Page\", ' ', __jsx(\"strong\", null, pageIndex + 1, \" of \", pageOptions.length), ' '), __jsx(\"span\", null, \"| Go to page:\", ' ', __jsx(\"input\", {\n    type: \"number\",\n    defaultValue: pageIndex + 1,\n    onChange: function onChange(e) {\n      var page = e.target.value ? Number(e.target.value) - 1 : 0;\n      gotoPage(page);\n    },\n    style: {\n      width: '100px'\n    }\n  })), __jsx(\"select\", {\n    value: pageSize,\n    className: \"px-2 mx-4 text-sm\",\n    onChange: function onChange(e) {\n      setPageSize(Number(e.target.value));\n    }\n  }, [10, 20, 30, 40, 50].map(function (pageSize) {\n    return __jsx(\"option\", {\n      key: pageSize,\n      value: pageSize\n    }, \"Show \", pageSize);\n  })))));\n}\n\nexport { useAsyncDebounce, matchSorter };","map":null,"metadata":{},"sourceType":"module"}