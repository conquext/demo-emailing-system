{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport axios from 'axios';\nexport const baseURL = process.env.BASE_URL || 'https://rewarddemo.herokuapp.com';\nexport const makeApiCall = axiosConfigObj => {\n  const config = _objectSpread(_objectSpread({}, axiosConfigObj), {}, {\n    baseURL\n  });\n\n  return new Promise((resolve, reject) => {\n    return axios(config).then(({\n      data\n    }) => {\n      return resolve(data);\n    }).catch(err => {\n      return reject(err);\n    });\n  });\n};\nexport const inviteUser = data => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const url = `/sendinvite`;\n      let resp = null;\n      resp = await makeApiCall({\n        url,\n        headers: {\n          Authorization: ``\n        },\n        method: 'post',\n        data\n      });\n      return resolve(resp);\n    } catch (error) {\n      return reject(error);\n    }\n  });\n};\nexport const deleteUser = data => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const url = `/staffs/${data.email}`;\n      let resp = null;\n      resp = await makeApiCall({\n        url,\n        headers: {\n          Authorization: ``\n        },\n        method: 'delete',\n        data\n      });\n      return resolve(resp);\n    } catch (error) {\n      return reject(error);\n    }\n  });\n};\nexport const getUsers = () => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const url = `/staffs`;\n      let resp = null;\n      resp = await makeApiCall({\n        url,\n        headers: {\n          Authorization: ``\n        },\n        method: 'get'\n      });\n      return resolve(resp);\n    } catch (error) {\n      return reject(error);\n    }\n  });\n};","map":null,"metadata":{},"sourceType":"module"}