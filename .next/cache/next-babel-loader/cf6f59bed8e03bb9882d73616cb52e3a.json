{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useEffect, useMemo, useState } from 'react';\nimport Layout from '@components/layout/Layout';\nimport matchSorter from 'match-sorter';\nimport TableComponent from '@components/Table';\nimport makeData from '@utils/helpers';\n\nvar headerSearch = function headerSearch() {\n  return __jsx(\"div\", {\n    className: \"flex justify-start\",\n    style: {\n      width: '55%'\n    }\n  }, __jsx(\"p\", null, \"an header search here\"));\n};\n\nfunction fuzzyTextFilterFn(rows, id, filterValue) {\n  return matchSorter(rows, filterValue, {\n    keys: [function (row) {\n      return row.values[id];\n    }]\n  });\n} // Let the table remove the filter if the string is empty\n\n\nfuzzyTextFilterFn.autoRemove = function (val) {\n  return !val;\n}; // Create an editable cell renderer\n\n\nvar EditableCell = function EditableCell(_ref) {\n  _s();\n\n  var initialValue = _ref.value,\n      index = _ref.row.index,\n      id = _ref.column.id,\n      updateData = _ref.updateData;\n\n  // We need to keep and update the state of the cell normally\n  var _useState = useState(initialValue),\n      value = _useState[0],\n      setValue = _useState[1];\n\n  var onChange = function onChange(e) {\n    setValue(e.target.value);\n  }; // We'll only update the external data when the input is blurred\n\n\n  var onBlur = function onBlur() {\n    updateData(index, id, value);\n  }; // If the initialValue is changed external, sync it up with our state\n\n\n  useEffect(function () {\n    setValue(initialValue);\n  }, [initialValue]);\n  return editableFields.includes(id) ? __jsx(\"input\", {\n    value: value,\n    onChange: onChange,\n    onBlur: onBlur,\n    className: \"w-full bg-transparent\"\n  }) : __jsx(\"p\", null, value);\n};\n\n_s(EditableCell, \"tWiMN+R1KrlPc+I/v9D+hnPBFtc=\");\n\n_c = EditableCell;\n\nvar IndexPage = function IndexPage() {\n  _s2();\n\n  var _useState2 = useState(function () {\n    return makeData(20);\n  }),\n      data = _useState2[0],\n      setData = _useState2[1];\n\n  var columns = useMemo(function () {\n    return [{\n      Header: 'Table',\n      columns: [{\n        Header: 'First Name',\n        accessor: 'firstName'\n      }, {\n        Header: 'Last Name',\n        accessor: 'lastName'\n      }, {\n        Header: 'Email',\n        accessor: 'email'\n      }]\n    }, {\n      Header: 'Test Info',\n      columns: [{\n        Header: 'Invite Sent',\n        accessor: 'inviteSent'\n      }, {\n        Header: 'Test Sent',\n        accessor: 'testSent'\n      }, {\n        Header: 'Test Status',\n        accessor: 'testStatus'\n      }]\n    }];\n  }, []);\n  var filterTypes = useMemo(function () {\n    return {\n      // Add a new fuzzyTextFilterFn filter type.\n      fuzzyText: fuzzyTextFilterFn,\n      // Or, override the default text filter to use\n      // \"startWith\"\n      text: function text(rows, id, filterValue) {\n        return rows.filter(function (row) {\n          var rowValue = row.values[id];\n          return rowValue !== undefined ? String(rowValue).toLowerCase().startsWith(String(filterValue).toLowerCase()) : true;\n        });\n      }\n    };\n  }, []);\n  var defaultColumn = React.useMemo(function () {\n    return {\n      // Let's set up our Filter UI\n      // Filter: DefaultColumnFilter,\n      Cell: EditableCell\n    };\n  }, []);\n  return __jsx(Layout, {\n    title: \"Your Awesome App\",\n    className: \"container py-8 overflow-auto\",\n    header: headerSearch()\n  }, __jsx(\"p\", {\n    className: \"mb-4 text-lg font-light\"\n  }, \"Demo spreadsheet upload and email list system.\"), __jsx(\"div\", null, __jsx(TableComponent, {\n    columns: columns,\n    data: data,\n    setData: setData,\n    filterTypes: filterTypes,\n    defaultColumn: DefaultColumn // globalFilter= {GlobalFilter}\n    // renderHeader= {(header: unknown) => JSX.Element}\n    // renderFilter= {(column: unknown) => JSX.Element}\n    // renderTableBody= {(column: unknown) => JSX.Element}\n    // renderTableRow= {(row: unknown) => JSX.Element}\n    // renderTableCell= {(cell: unknown) => JSX.Element}\n    // customHook= {(hooks: unknown) => unknown}\n    // editableFields={['firstName', 'lastName', 'email']}\n\n  })));\n};\n\n_s2(IndexPage, \"cnQ7Ay/Ie+708b0nsIVnPBB9zIQ=\");\n\n_c2 = IndexPage;\nexport default IndexPage;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"EditableCell\");\n$RefreshReg$(_c2, \"IndexPage\");","map":{"version":3,"sources":["/mnt/c/Users/arash/Documents/DevInDoc/Getaboard/demoEmail/reward-test/pages/index.tsx"],"names":["React","useEffect","useMemo","useState","Layout","matchSorter","TableComponent","makeData","headerSearch","width","fuzzyTextFilterFn","rows","id","filterValue","keys","row","values","autoRemove","val","EditableCell","initialValue","value","index","column","updateData","setValue","onChange","e","target","onBlur","editableFields","includes","IndexPage","data","setData","columns","Header","accessor","filterTypes","fuzzyText","text","filter","rowValue","undefined","String","toLowerCase","startsWith","defaultColumn","Cell","DefaultColumn"],"mappings":"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","sourcesContent":["import React, { useEffect, useMemo, useState } from 'react'\nimport { NextPage } from 'next'\nimport Layout from '@components/layout/Layout'\nimport routes from '@utils/routes'\nimport Link from 'next/link'\nimport matchSorter from 'match-sorter'\nimport { FiArrowRight } from 'react-icons/fi'\nimport TableComponent from '@components/Table'\nimport makeData from '@utils/helpers'\n\nconst headerSearch = () => {\n  return (\n    <div className=\"flex justify-start\" style={{ width: '55%' }}>\n      <p>an header search here</p>\n    </div>\n  )\n}\n\nfunction fuzzyTextFilterFn(rows, id, filterValue) {\n  return matchSorter(rows, filterValue, { keys: [(row) => row.values[id]] })\n}\n\n// Let the table remove the filter if the string is empty\nfuzzyTextFilterFn.autoRemove = (val) => !val\n\n// Create an editable cell renderer\nconst EditableCell = ({\n  value: initialValue,\n  row: { index },\n  column: { id },\n  updateData, // This is a custom function that we supplied to our table instance\n}) => {\n  // We need to keep and update the state of the cell normally\n  const [value, setValue] = useState(initialValue)\n\n  const onChange = (e) => {\n    setValue(e.target.value)\n  }\n\n  // We'll only update the external data when the input is blurred\n  const onBlur = () => {\n    updateData(index, id, value)\n  }\n\n  // If the initialValue is changed external, sync it up with our state\n  useEffect(() => {\n    setValue(initialValue)\n  }, [initialValue])\n\n  return editableFields.includes(id) ? (\n    <input\n      value={value}\n      onChange={onChange}\n      onBlur={onBlur}\n      className=\"w-full bg-transparent\"\n    />\n  ) : (\n    <p>{value}</p>\n  )\n}\n\nconst IndexPage: NextPage = () => {\n  const [data, setData] = useState(() => makeData(20))\n  const columns = useMemo(\n    () => [\n      {\n        Header: 'Table',\n        columns: [\n          {\n            Header: 'First Name',\n            accessor: 'firstName',\n          },\n          {\n            Header: 'Last Name',\n            accessor: 'lastName',\n          },\n          {\n            Header: 'Email',\n            accessor: 'email',\n          },\n        ],\n      },\n      {\n        Header: 'Test Info',\n        columns: [\n          {\n            Header: 'Invite Sent',\n            accessor: 'inviteSent',\n          },\n          {\n            Header: 'Test Sent',\n            accessor: 'testSent',\n          },\n          {\n            Header: 'Test Status',\n            accessor: 'testStatus',\n          },\n        ],\n      },\n    ],\n    []\n  )\n\n  const filterTypes = useMemo(\n    () => ({\n      // Add a new fuzzyTextFilterFn filter type.\n      fuzzyText: fuzzyTextFilterFn,\n      // Or, override the default text filter to use\n      // \"startWith\"\n      text: (rows, id, filterValue) => {\n        return rows.filter((row) => {\n          const rowValue = row.values[id]\n          return rowValue !== undefined\n            ? String(rowValue)\n                .toLowerCase()\n                .startsWith(String(filterValue).toLowerCase())\n            : true\n        })\n      },\n    }),\n    []\n  )\n\n  const defaultColumn = React.useMemo(\n    () => ({\n      // Let's set up our Filter UI\n      // Filter: DefaultColumnFilter,\n      Cell: EditableCell,\n    }),\n    []\n  )\n\n  return (\n    <Layout\n      title=\"Your Awesome App\"\n      className=\"container py-8 overflow-auto\"\n      header={headerSearch()}\n    >\n      {/* <h1 className=\"mb-4 text-3xl font-black dark:text-gray-100\">Welcome</h1> */}\n      <p className=\"mb-4 text-lg font-light\">\n        Demo spreadsheet upload and email list system.\n      </p>\n      <div>\n        <TableComponent\n          columns={columns}\n          data={data}\n          setData={setData}\n          filterTypes={filterTypes}\n          defaultColumn={DefaultColumn}\n          // globalFilter= {GlobalFilter}\n          // renderHeader= {(header: unknown) => JSX.Element}\n          // renderFilter= {(column: unknown) => JSX.Element}\n          // renderTableBody= {(column: unknown) => JSX.Element}\n          // renderTableRow= {(row: unknown) => JSX.Element}\n          // renderTableCell= {(cell: unknown) => JSX.Element}\n          // customHook= {(hooks: unknown) => unknown}\n          // editableFields={['firstName', 'lastName', 'email']}\n        />\n      </div>\n    </Layout>\n  )\n}\n\nexport default IndexPage\n"]},"metadata":{},"sourceType":"module"}