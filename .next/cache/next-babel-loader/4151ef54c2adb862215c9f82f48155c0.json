{"ast":null,"code":"var _jsxFileName = \"/mnt/c/Users/arash/Documents/DevInDoc/Getaboard/demoEmail/reward-test/src/components/Table.tsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useState } from 'react';\nimport { useTable, usePagination, useRowSelect, useSortBy, useFilters, useColumnOrder } from 'react-table';\nimport { motion } from 'framer-motion';\nimport styled from 'styled-components';\nimport Checkbox from './Checkbox';\nconst Styles = styled.div`\n  padding: 1rem;\n\n  table {\n    border-spacing: 0;\n    border: 1px solid black;\n\n    tr {\n      :last-child {\n        td {\n          border-bottom: 0;\n        }\n      }\n    }\n\n    th,\n    td {\n      margin: 0;\n      padding: 0.5rem;\n      border-bottom: 1px solid black;\n      border-right: 1px solid black;\n\n      :last-child {\n        border-right: 0;\n      }\n\n      input {\n        font-size: 1rem;\n        padding: 0;\n        margin: 0;\n        border: 0;\n      }\n    }\n\n    .pagination {\n      padding: 0.5rem;\n    }\n  }\n`; // Define a default UI for filtering\n\nfunction DefaultColumnFilter({\n  column: {\n    filterValue,\n    preFilteredRows,\n    setFilter\n  }\n}) {\n  const count = preFilteredRows.length;\n  return __jsx(\"input\", {\n    value: filterValue || '',\n    onChange: e => {\n      setFilter(e.target.value || undefined); // Set undefined to remove the filter entirely\n    },\n    placeholder: `Search ${count} records...`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 5\n    }\n  });\n} // This is a custom filter UI for selecting\n// a unique option from a list\n\n\nfunction SelectColumnFilter({\n  column: {\n    filterValue,\n    setFilter,\n    preFilteredRows,\n    id\n  }\n}) {\n  // Calculate the options for filtering\n  // using the preFilteredRows\n  const options = React.useMemo(() => {\n    const options = new Set();\n    preFilteredRows.forEach(row => {\n      options.add(row.values[id]);\n    });\n    return [...options.values()];\n  }, [id, preFilteredRows]); // Render a multi-select box\n\n  return __jsx(\"select\", {\n    value: filterValue,\n    onChange: e => {\n      setFilter(e.target.value || undefined);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 5\n    }\n  }, __jsx(\"option\", {\n    value: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }\n  }, \"All\"), options.map((option, i) => __jsx(\"option\", {\n    key: i,\n    value: option,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 9\n    }\n  }, option)));\n}\n\nfunction TableComponent({\n  columns,\n  data,\n  setData,\n  editableFields\n}) {\n  const {\n    0: skipPageReset,\n    1: setSkipPageReset\n  } = useState(false); // We need to keep the table from resetting the pageIndex when we\n  // Update data. So we can keep track of that flag with a ref.\n  // When our cell renderer calls updateMyData, we'll use\n  // the rowIndex, columnId and new value to update the\n  // original data\n\n  const updateData = (rowIndex, columnId, value) => {\n    // We also turn on the flag to not reset the page\n    setSkipPageReset(true);\n    setData(old => old.map((row, index) => {\n      if (index === rowIndex) {\n        return _objectSpread(_objectSpread({}, old[rowIndex]), {}, {\n          [columnId]: value\n        });\n      }\n\n      return row;\n    }));\n  }; // After data chagnes, we turn the flag back off\n  // so that if data actually changes when we're not\n  // editing it, the page is reset\n\n\n  useEffect(() => {\n    setSkipPageReset(false);\n  }, [data]);\n  return __jsx(Styles, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 5\n    }\n  }, __jsx(Table, {\n    columns: columns,\n    data: data,\n    updateData: updateData,\n    skipPageReset: skipPageReset,\n    editableFields: editableFields,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default TableComponent; // Be sure to pass our updateData and the skipPageReset option\n\nfunction Table({\n  columns,\n  data,\n  updateData,\n  skipPageReset,\n  editableFields\n}) {\n  // Create an editable cell renderer\n  const EditableCell = (_ref) => {\n    let {\n      value: initialValue,\n      row: {\n        index\n      },\n      column: {\n        id\n      },\n      updateData\n    } = _ref,\n        rest = _objectWithoutProperties(_ref, [\"value\", \"row\", \"column\", \"updateData\"]);\n\n    // We need to keep and update the state of the cell normally\n    const {\n      0: value,\n      1: setValue\n    } = useState(initialValue);\n\n    const onChange = e => {\n      setValue(e.target.value);\n    }; // We'll only update the external data when the input is blurred\n\n\n    const onBlur = () => {\n      updateData(index, id, value);\n    }; // If the initialValue is changed external, sync it up with our state\n\n\n    useEffect(() => {\n      setValue(initialValue);\n    }, [initialValue]);\n    return editableFields.includes(id) ? __jsx(\"input\", {\n      value: value,\n      onChange: onChange,\n      onBlur: onBlur,\n      className: \"w-full bg-transparent\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 7\n      }\n    }) : __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 7\n      }\n    }, value);\n  };\n\n  const defaultColumn = React.useMemo(() => ({\n    // Let's set up our default Filter UI\n    Filter: DefaultColumnFilter,\n    Cell: EditableCell\n  }), []);\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    prepareRow,\n    page,\n    canPreviousPage,\n    canNextPage,\n    pageOptions,\n    pageCount,\n    gotoPage,\n    nextPage,\n    previousPage,\n    setPageSize,\n    selectedFlatRows,\n    visibleColumns,\n    setColumnOrder,\n    state: {\n      pageIndex,\n      pageSize,\n      selectedRowIds\n    }\n  } = useTable({\n    columns,\n    data,\n    defaultColumn,\n    useColumnOrder,\n    useFilters,\n    useSortBy,\n    // use the skipPageReset option to disable page resetting temporarily\n    autoResetPage: !skipPageReset,\n    updateData\n  }, usePagination, useRowSelect, hooks => {\n    hooks.visibleColumns.push(columns => [// Let's make a column for selection\n    {\n      id: 'selection',\n      // The header can use the table's getToggleAllRowsSelectedProps method\n      // to render a checkbox\n      Header: ({\n        getToggleAllPageRowsSelectedProps\n      }) => __jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 13\n        }\n      }, __jsx(Checkbox, _extends({}, getToggleAllPageRowsSelectedProps(), {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 267,\n          columnNumber: 15\n        }\n      }))),\n      // The cell can use the individual row's getToggleRowSelectedProps method\n      // to the render a checkbox\n      Cell: ({\n        row\n      }) => __jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 13\n        }\n      }, __jsx(Checkbox, _extends({}, row.getToggleRowSelectedProps(), {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 274,\n          columnNumber: 15\n        }\n      })))\n    }, ...columns]);\n  });\n  const spring = React.useMemo(() => ({\n    type: 'spring',\n    damping: 50,\n    stiffness: 100\n  }), []); // Render the UI for your table\n\n  return __jsx(React.Fragment, null, __jsx(\"table\", _extends({}, getTableProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 295,\n      columnNumber: 7\n    }\n  }), __jsx(\"thead\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 296,\n      columnNumber: 9\n    }\n  }, headerGroups.map(headerGroup => __jsx(\"tr\", _extends({}, headerGroup.getHeaderGroupProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 298,\n      columnNumber: 13\n    }\n  }), headerGroup.headers.map(column => __jsx(motion.th, _extends({}, column.getHeaderProps({\n    layoutTransition: spring,\n    style: {}\n  }), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 300,\n      columnNumber: 17\n    }\n  }), __jsx(\"div\", _extends({}, column.getSortByToggleProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 306,\n      columnNumber: 19\n    }\n  }), column.render('Header'), __jsx(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 308,\n      columnNumber: 21\n    }\n  }, column.isSorted ? column.isSortedDesc ? ' 🔽' : ' 🔼' : '')), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 316,\n      columnNumber: 19\n    }\n  }, column.canFilter ? column.render('Filter') : null)))))), __jsx(\"tbody\", _extends({}, getTableBodyProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 322,\n      columnNumber: 9\n    }\n  }), page.map((row, i) => {\n    prepareRow(row);\n    return __jsx(\"tr\", _extends({}, row.getRowProps(), {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 326,\n        columnNumber: 15\n      }\n    }), row.cells.map(cell => {\n      return __jsx(\"td\", _extends({}, cell.getCellProps(), {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 328,\n          columnNumber: 26\n        }\n      }), cell.render('Cell'));\n    }));\n  }))), __jsx(\"div\", {\n    className: \"pagination\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 335,\n      columnNumber: 7\n    }\n  }, __jsx(\"button\", {\n    onClick: () => gotoPage(0),\n    disabled: !canPreviousPage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 336,\n      columnNumber: 9\n    }\n  }, '<<'), ' ', __jsx(\"button\", {\n    onClick: () => previousPage(),\n    disabled: !canPreviousPage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 339,\n      columnNumber: 9\n    }\n  }, '<'), ' ', __jsx(\"button\", {\n    onClick: () => nextPage(),\n    disabled: !canNextPage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 342,\n      columnNumber: 9\n    }\n  }, '>'), ' ', __jsx(\"button\", {\n    onClick: () => gotoPage(pageCount - 1),\n    disabled: !canNextPage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 345,\n      columnNumber: 9\n    }\n  }, '>>'), ' ', __jsx(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 348,\n      columnNumber: 9\n    }\n  }, \"Page\", ' ', __jsx(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 350,\n      columnNumber: 11\n    }\n  }, pageIndex + 1, \" of \", pageOptions.length), ' '), __jsx(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 354,\n      columnNumber: 9\n    }\n  }, \"| Go to page:\", ' ', __jsx(\"input\", {\n    type: \"number\",\n    defaultValue: pageIndex + 1,\n    onChange: e => {\n      const page = e.target.value ? Number(e.target.value) - 1 : 0;\n      gotoPage(page);\n    },\n    style: {\n      width: '100px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 356,\n      columnNumber: 11\n    }\n  })), ' ', __jsx(\"select\", {\n    value: pageSize,\n    onChange: e => {\n      setPageSize(Number(e.target.value));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 368,\n      columnNumber: 9\n    }\n  }, [10, 20, 30, 40, 50].map(pageSize => __jsx(\"option\", {\n    key: pageSize,\n    value: pageSize,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 375,\n      columnNumber: 13\n    }\n  }, \"Show \", pageSize))), __jsx(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 380,\n      columnNumber: 9\n    }\n  }, __jsx(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 381,\n      columnNumber: 11\n    }\n  }, JSON.stringify({\n    selectedRowIds: selectedRowIds,\n    'selectedFlatRows[].original': selectedFlatRows.map(d => d.original)\n  }, null, 2)))));\n}","map":{"version":3,"sources":["/mnt/c/Users/arash/Documents/DevInDoc/Getaboard/demoEmail/reward-test/src/components/Table.tsx"],"names":["React","useEffect","useState","useTable","usePagination","useRowSelect","useSortBy","useFilters","useColumnOrder","motion","styled","Checkbox","Styles","div","DefaultColumnFilter","column","filterValue","preFilteredRows","setFilter","count","length","e","target","value","undefined","SelectColumnFilter","id","options","useMemo","Set","forEach","row","add","values","map","option","i","TableComponent","columns","data","setData","editableFields","skipPageReset","setSkipPageReset","updateData","rowIndex","columnId","old","index","Table","EditableCell","initialValue","rest","setValue","onChange","onBlur","includes","defaultColumn","Filter","Cell","getTableProps","getTableBodyProps","headerGroups","prepareRow","page","canPreviousPage","canNextPage","pageOptions","pageCount","gotoPage","nextPage","previousPage","setPageSize","selectedFlatRows","visibleColumns","setColumnOrder","state","pageIndex","pageSize","selectedRowIds","autoResetPage","hooks","push","Header","getToggleAllPageRowsSelectedProps","getToggleRowSelectedProps","spring","type","damping","stiffness","headerGroup","getHeaderGroupProps","headers","getHeaderProps","layoutTransition","style","getSortByToggleProps","render","isSorted","isSortedDesc","canFilter","getRowProps","cells","cell","getCellProps","Number","width","JSON","stringify","d","original"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport clsx from 'clsx'\nimport {\n  useTable,\n  usePagination,\n  useRowSelect,\n  useSortBy,\n  useFilters,\n  useColumnOrder,\n} from 'react-table'\nimport { motion, AnimatePresence } from 'framer-motion'\nimport matchSorter from 'match-sorter'\n\nimport styled from 'styled-components'\nimport Input from './Input'\nimport Checkbox from './Checkbox'\n\nexport interface Props {\n  className?: string | Record<string, unknown>\n  ordered?: boolean\n  item?: boolean\n}\n\nconst Styles = styled.div`\n  padding: 1rem;\n\n  table {\n    border-spacing: 0;\n    border: 1px solid black;\n\n    tr {\n      :last-child {\n        td {\n          border-bottom: 0;\n        }\n      }\n    }\n\n    th,\n    td {\n      margin: 0;\n      padding: 0.5rem;\n      border-bottom: 1px solid black;\n      border-right: 1px solid black;\n\n      :last-child {\n        border-right: 0;\n      }\n\n      input {\n        font-size: 1rem;\n        padding: 0;\n        margin: 0;\n        border: 0;\n      }\n    }\n\n    .pagination {\n      padding: 0.5rem;\n    }\n  }\n`\n\n// Define a default UI for filtering\nfunction DefaultColumnFilter({\n  column: { filterValue, preFilteredRows, setFilter },\n}) {\n  const count = preFilteredRows.length\n\n  return (\n    <input\n      value={filterValue || ''}\n      onChange={(e) => {\n        setFilter(e.target.value || undefined) // Set undefined to remove the filter entirely\n      }}\n      placeholder={`Search ${count} records...`}\n    />\n  )\n}\n\n// This is a custom filter UI for selecting\n// a unique option from a list\nfunction SelectColumnFilter({\n  column: { filterValue, setFilter, preFilteredRows, id },\n}) {\n  // Calculate the options for filtering\n  // using the preFilteredRows\n  const options = React.useMemo(() => {\n    const options = new Set()\n    preFilteredRows.forEach((row) => {\n      options.add(row.values[id])\n    })\n    return [...options.values()]\n  }, [id, preFilteredRows])\n\n  // Render a multi-select box\n  return (\n    <select\n      value={filterValue}\n      onChange={(e) => {\n        setFilter(e.target.value || undefined)\n      }}\n    >\n      <option value=\"\">All</option>\n      {options.map((option, i) => (\n        <option key={i} value={option}>\n          {option}\n        </option>\n      ))}\n    </select>\n  )\n}\n\nfunction TableComponent({\n  columns,\n  data,\n  setData,\n  editableFields,\n}: {\n  editableFields?: Array<unknown>\n  columns: {\n    Header?: string\n    columns: {\n      Header: string\n      accessor: string\n      Cell?: unknown\n    }[]\n  }[]\n  data: Record<string, unknown>\n  setData: React.Dispatch<unknown>\n}) {\n  const [skipPageReset, setSkipPageReset] = useState(false)\n\n  // We need to keep the table from resetting the pageIndex when we\n  // Update data. So we can keep track of that flag with a ref.\n\n  // When our cell renderer calls updateMyData, we'll use\n  // the rowIndex, columnId and new value to update the\n  // original data\n  const updateData = (rowIndex, columnId, value) => {\n    // We also turn on the flag to not reset the page\n    setSkipPageReset(true)\n    setData((old) =>\n      old.map((row, index) => {\n        if (index === rowIndex) {\n          return {\n            ...old[rowIndex],\n            [columnId]: value,\n          }\n        }\n        return row\n      })\n    )\n  }\n\n  // After data chagnes, we turn the flag back off\n  // so that if data actually changes when we're not\n  // editing it, the page is reset\n  useEffect(() => {\n    setSkipPageReset(false)\n  }, [data])\n\n  return (\n    <Styles>\n      <Table\n        columns={columns}\n        data={data}\n        updateData={updateData}\n        skipPageReset={skipPageReset}\n        editableFields={editableFields}\n      />\n    </Styles>\n  )\n}\n\nexport default TableComponent\n\n// Be sure to pass our updateData and the skipPageReset option\nfunction Table({ columns, data, updateData, skipPageReset, editableFields }) {\n  // Create an editable cell renderer\n  const EditableCell = ({\n    value: initialValue,\n    row: { index },\n    column: { id },\n    updateData, // This is a custom function that we supplied to our table instance\n    ...rest\n  }) => {\n    // We need to keep and update the state of the cell normally\n    const [value, setValue] = useState(initialValue)\n\n    const onChange = (e) => {\n      setValue(e.target.value)\n    }\n\n    // We'll only update the external data when the input is blurred\n    const onBlur = () => {\n      updateData(index, id, value)\n    }\n\n    // If the initialValue is changed external, sync it up with our state\n    useEffect(() => {\n      setValue(initialValue)\n    }, [initialValue])\n\n    return editableFields.includes(id) ? (\n      <input\n        value={value}\n        onChange={onChange}\n        onBlur={onBlur}\n        className=\"w-full bg-transparent\"\n      />\n    ) : (\n      <p>{value}</p>\n    )\n  }\n\n  const defaultColumn = React.useMemo(\n    () => ({\n      // Let's set up our default Filter UI\n      Filter: DefaultColumnFilter,\n      Cell: EditableCell,\n    }),\n    []\n  )\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    prepareRow,\n    page,\n    canPreviousPage,\n    canNextPage,\n    pageOptions,\n    pageCount,\n    gotoPage,\n    nextPage,\n    previousPage,\n    setPageSize,\n    selectedFlatRows,\n    visibleColumns,\n    setColumnOrder,\n    state: { pageIndex, pageSize, selectedRowIds },\n  } = useTable(\n    {\n      columns,\n      data,\n      defaultColumn,\n      useColumnOrder,\n      useFilters,\n      useSortBy,\n      // use the skipPageReset option to disable page resetting temporarily\n      autoResetPage: !skipPageReset,\n      updateData,\n    },\n    usePagination,\n    useRowSelect,\n    (hooks) => {\n      hooks.visibleColumns.push((columns) => [\n        // Let's make a column for selection\n        {\n          id: 'selection',\n          // The header can use the table's getToggleAllRowsSelectedProps method\n          // to render a checkbox\n          Header: ({ getToggleAllPageRowsSelectedProps }) => (\n            <div>\n              <Checkbox {...getToggleAllPageRowsSelectedProps()} />\n            </div>\n          ),\n          // The cell can use the individual row's getToggleRowSelectedProps method\n          // to the render a checkbox\n          Cell: ({ row }) => (\n            <div>\n              <Checkbox {...row.getToggleRowSelectedProps()} />\n            </div>\n          ),\n        },\n        ...columns,\n      ])\n    }\n  )\n\n  const spring = React.useMemo(\n    () => ({\n      type: 'spring',\n      damping: 50,\n      stiffness: 100,\n    }),\n    []\n  )\n\n  // Render the UI for your table\n  return (\n    <>\n      <table {...getTableProps()}>\n        <thead>\n          {headerGroups.map((headerGroup) => (\n            <tr {...headerGroup.getHeaderGroupProps()}>\n              {headerGroup.headers.map((column) => (\n                <motion.th\n                  {...column.getHeaderProps({\n                    layoutTransition: spring,\n                    style: {},\n                  })}\n                >\n                  <div {...column.getSortByToggleProps()}>\n                    {column.render('Header')}\n                    <span>\n                      {column.isSorted\n                        ? column.isSortedDesc\n                          ? ' 🔽'\n                          : ' 🔼'\n                        : ''}\n                    </span>\n                  </div>\n                  <div>{column.canFilter ? column.render('Filter') : null}</div>\n                </motion.th>\n              ))}\n            </tr>\n          ))}\n        </thead>\n        <tbody {...getTableBodyProps()}>\n          {page.map((row, i) => {\n            prepareRow(row)\n            return (\n              <tr {...row.getRowProps()}>\n                {row.cells.map((cell) => {\n                  return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\n                })}\n              </tr>\n            )\n          })}\n        </tbody>\n      </table>\n      <div className=\"pagination\">\n        <button onClick={() => gotoPage(0)} disabled={!canPreviousPage}>\n          {'<<'}\n        </button>{' '}\n        <button onClick={() => previousPage()} disabled={!canPreviousPage}>\n          {'<'}\n        </button>{' '}\n        <button onClick={() => nextPage()} disabled={!canNextPage}>\n          {'>'}\n        </button>{' '}\n        <button onClick={() => gotoPage(pageCount - 1)} disabled={!canNextPage}>\n          {'>>'}\n        </button>{' '}\n        <span>\n          Page{' '}\n          <strong>\n            {pageIndex + 1} of {pageOptions.length}\n          </strong>{' '}\n        </span>\n        <span>\n          | Go to page:{' '}\n          <input\n            type=\"number\"\n            defaultValue={pageIndex + 1}\n            onChange={(e) => {\n              const page = e.target.value ? Number(e.target.value) - 1 : 0\n              gotoPage(page)\n            }}\n            style={{\n              width: '100px',\n            }}\n          />\n        </span>{' '}\n        <select\n          value={pageSize}\n          onChange={(e) => {\n            setPageSize(Number(e.target.value))\n          }}\n        >\n          {[10, 20, 30, 40, 50].map((pageSize) => (\n            <option key={pageSize} value={pageSize}>\n              Show {pageSize}\n            </option>\n          ))}\n        </select>\n        <pre>\n          <code>\n            {JSON.stringify(\n              {\n                selectedRowIds: selectedRowIds,\n                'selectedFlatRows[].original': selectedFlatRows.map(\n                  (d) => d.original\n                ),\n              },\n              null,\n              2\n            )}\n          </code>\n        </pre>\n      </div>\n    </>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}