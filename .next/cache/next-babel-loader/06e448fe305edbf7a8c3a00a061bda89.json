{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { getFileSizeAndUnit, isEmpty } from '@utils/helpers';\nimport React, { useState, useEffect, useRef } from 'react';\nimport { toast as toaster } from 'react-toastify';\nconst initialState = {\n  files: [],\n  events: [],\n  filePreviews: {},\n  uploading: false,\n  selectedFile: null,\n  loaded: 0,\n  error: '',\n  warning: '',\n  content: ''\n};\nexport default function UploadComponent({\n  autoUpload = true,\n  allowedExtensions = ['.doc', '.docx', '.xls', '.xlsx', '.pdf', '.svg', 'image/png', 'image/jpeg', 'image/gif', 'image/*', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'],\n  maxFileSize = 40000000,\n  disabled,\n  className = '',\n  render,\n  refreshCallback,\n  uploadHandler\n}) {\n  const {\n    0: state,\n    1: setState\n  } = useState(initialState);\n  const {\n    0: runAutoUpload,\n    1: setAutoUpload\n  } = useState(false);\n\n  function updateState(update) {\n    const newState = _objectSpread(_objectSpread({}, state), update);\n\n    setState(newState);\n    refreshCallback && refreshCallback(newState);\n    return newState;\n  }\n\n  const toast = {\n    warn: msg => {\n      toaster.warn(msg);\n      updateState({\n        error: msg\n      });\n    },\n    error: msg => {\n      toaster.error(msg);\n      updateState({\n        error: msg\n      });\n    },\n    success: msg => {\n      toaster.success(msg);\n      updateState({\n        error: ''\n      });\n    }\n  };\n\n  const checkMimeType = (files, resetField) => {\n    const err = [];\n    const types = allowedExtensions;\n\n    for (let x = 0; x < files.length; x++) {\n      if (types.every(type => {\n        var _files$x;\n\n        return ((_files$x = files[x]) === null || _files$x === void 0 ? void 0 : _files$x.type) !== type;\n      })) {\n        err[x] = files[x].type + ' is not a supported format\\n';\n      }\n    }\n\n    for (let z = 0; z < err.length; z++) {\n      toast.error(err[z]);\n      resetField && resetField();\n    }\n\n    if (!isEmpty(err)) return false;\n    return true;\n  };\n\n  const maxSelectFile = (files, resetField) => {\n    const maxLength = 1;\n\n    if (files.length > maxLength) {\n      const msg = `Only ${maxLength} file can be uploaded at a time`;\n      resetField && resetField();\n      toast.warn(msg);\n      return false;\n    }\n\n    return true;\n  };\n\n  const checkFileSize = (files, resetField) => {\n    //  default max size is 2.05GB\n    const size = maxFileSize || 20000000;\n    const err = [];\n\n    for (let x = 0; x < files.length; x++) {\n      if (files[x].size > size) {\n        err[x] = files[x].type + ' is too large, please pick a smaller file\\n' + `Max size: ${getFileSizeAndUnit(size)}`;\n      }\n    }\n\n    for (let z = 0; z < err.length; z++) {\n      toast.error(err[z]);\n      resetField && resetField();\n    }\n\n    if (!isEmpty(err)) return false;\n    return true;\n  };\n\n  const readFile = (file, currentIndex = 0, lState = state, validateFile) => {\n    // run validations if any\n    if (validateFile) {\n      validateFile(file);\n    }\n\n    const files = lState.files;\n    const reader = new FileReader();\n    reader.addEventListener('load', event => {\n      if (event.target) {\n        const filesData = {\n          url: event.target.result,\n          meta: Array.from(lState.selectedFile)[currentIndex],\n          loaded: files[currentIndex] ? files[currentIndex].loaded : 0\n        };\n        const newfileUpdate = files;\n        newfileUpdate[currentIndex] = filesData;\n        updateState({\n          files: newfileUpdate,\n          selectedFile: lState.selectedFile\n        });\n      }\n    });\n    reader.readAsDataURL(file);\n  };\n\n  const onChangeHandler = event => {\n    const files = event.target.files;\n\n    const resetField = () => event.target.value = '';\n\n    if (files) {\n      if (maxSelectFile(files, resetField) && checkMimeType(files, resetField) && checkFileSize(files, resetField)) {\n        // if return true allow to setState\n        const newState = updateState({\n          selectedFile: files,\n          loaded: 0\n        });\n        Array.from(files).forEach((fl, index) => readFile(fl, index, newState));\n\n        if (autoUpload) {\n          setAutoUpload(true);\n        }\n      }\n    }\n  };\n\n  const handleUpload = (data, state, cb) => {\n    if (uploadHandler) uploadHandler(data, state, cb);\n  };\n\n  const onClickHandler = (newState = state) => {\n    try {\n      const selectedFile = newState.selectedFile;\n      const data = new FormData();\n\n      if (!isEmpty(selectedFile)) {\n        for (let x = 0; x < selectedFile.length; x++) {\n          data.append('file', selectedFile[x]);\n        }\n\n        handleUpload(data, newState, updateState);\n      }\n    } catch (err) {\n      console.log('err', err);\n    } finally {\n      setAutoUpload(false);\n    }\n  };\n\n  const uploadArea = useRef(null);\n  const uploadDomRef = useRef(null);\n  const dc = useRef(null);\n  const uploadDom = '#common-upload-component';\n  useEffect(() => {\n    dc.current = document;\n    uploadArea.current = document.querySelector(uploadDom);\n    if (runAutoUpload) onClickHandler(state); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [runAutoUpload]);\n\n  const getUploadArea = () => {\n    if (dc.current) return dc.current.querySelector(uploadDom);else if (dc.current) return uploadArea.current;else {\n      return uploadDomRef.current;\n    }\n  };\n\n  console.log('getUpload Area', getUploadArea());\n  return __jsx(\"div\", {\n    id: \"drop-area\",\n    className: `pt-4 relative ${className}`,\n    style: {\n      minHeight: '50px'\n    }\n  }, __jsx(\"div\", {\n    className: \"container hidden\"\n  }, __jsx(\"div\", {\n    className: \"row\"\n  }, __jsx(\"div\", {\n    className: \"offset-md-3 col-md-6\"\n  }, __jsx(\"div\", {\n    className: \"form-group files\"\n  }, __jsx(\"label\", null, \"Upload Your File \"), __jsx(\"input\", {\n    type: \"file\",\n    id: \"common-upload-component\",\n    ref: uploadDomRef,\n    disabled: Boolean(disabled),\n    className: \"form-control\",\n    accept: \"xls, xlsx\",\n    onChange: onChangeHandler\n  })), !autoUpload && __jsx(\"button\", {\n    type: \"button\",\n    className: \"btn btn-success btn-block\",\n    onClick: () => onClickHandler()\n  }, \"Upload\")))), render(uploadDomRef));\n}","map":{"version":3,"sources":["/mnt/c/Users/arash/Documents/DevInDoc/Getaboard/demoEmail/reward-test/src/components/FileUpload.tsx"],"names":["getFileSizeAndUnit","isEmpty","React","useState","useEffect","useRef","toast","toaster","initialState","files","events","filePreviews","uploading","selectedFile","loaded","error","warning","content","UploadComponent","autoUpload","allowedExtensions","maxFileSize","disabled","className","render","refreshCallback","uploadHandler","state","setState","runAutoUpload","setAutoUpload","updateState","update","newState","warn","msg","success","checkMimeType","resetField","err","types","x","length","every","type","z","maxSelectFile","maxLength","checkFileSize","size","readFile","file","currentIndex","lState","validateFile","reader","FileReader","addEventListener","event","target","filesData","url","result","meta","Array","from","newfileUpdate","readAsDataURL","onChangeHandler","value","forEach","fl","index","handleUpload","data","cb","onClickHandler","FormData","append","console","log","uploadArea","uploadDomRef","dc","uploadDom","current","document","querySelector","getUploadArea","minHeight","Boolean"],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { getFileSizeAndUnit, isEmpty } from '@utils/helpers'\nimport React, { useState, useEffect, useRef, useMemo } from 'react'\nimport { toast as toaster } from 'react-toastify'\n\ninterface UploadProps {\n  disabled?: boolean\n  autoUpload?: boolean\n  allowedExtensions?: string[]\n  maxFileSize?: number\n  className?: string\n  render: (string) => JSX.Element\n  // render: (uploadElement: HTMLElement | null) => JSX.Element\n  refreshCallback?: (data: UploadState) => void\n  uploadHandler?: (\n    data: FormData,\n    state: UploadState,\n    cb: (update: any) => void\n  ) => Promise<boolean> | void\n}\n\ntype UploadState = {\n  files: any[]\n  events: any[]\n  filePreviews: any\n  uploading: boolean\n  content: string\n  selectedFile: any\n  loaded: number\n  warning: string\n  error: string\n}\n\ntype UploadStateOptional = {\n  files?: any[]\n  events?: any[]\n  filePreviews?: any\n  uploading?: boolean\n  content?: string\n  selectedFile?: any\n  loaded?: number\n  warning?: string\n  error?: string\n}\n\nconst initialState: UploadState = {\n  files: [],\n  events: [],\n  filePreviews: {},\n  uploading: false,\n  selectedFile: null,\n  loaded: 0,\n  error: '',\n  warning: '',\n  content: '',\n}\n\nexport default function UploadComponent({\n  autoUpload = true,\n  allowedExtensions = [\n    '.doc',\n    '.docx',\n    '.xls',\n    '.xlsx',\n    '.pdf',\n    '.svg',\n    'image/png',\n    'image/jpeg',\n    'image/gif',\n    'image/*',\n    'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n  ],\n  maxFileSize = 40000000,\n  disabled,\n  className = '',\n  render,\n  refreshCallback,\n  uploadHandler,\n}: UploadProps) {\n  const [state, setState] = useState<UploadState>(initialState)\n  const [runAutoUpload, setAutoUpload] = useState(false)\n\n  function updateState(update: UploadStateOptional) {\n    const newState = { ...state, ...update }\n    setState(newState)\n    refreshCallback && refreshCallback(newState)\n    return newState\n  }\n\n  const toast = {\n    warn: (msg: string) => {\n      toaster.warn(msg)\n      updateState({ error: msg })\n    },\n    error: (msg: string) => {\n      toaster.error(msg)\n      updateState({ error: msg })\n    },\n    success: (msg: string) => {\n      toaster.success(msg)\n      updateState({ error: '' })\n    },\n  }\n\n  const checkMimeType = (files: FileList, resetField?: () => void) => {\n    const err = []\n    const types = allowedExtensions\n    for (let x = 0; x < files.length; x++) {\n      if (types.every((type) => files[x]?.type !== type)) {\n        err[x] = files[x].type + ' is not a supported format\\n'\n      }\n    }\n    for (let z = 0; z < err.length; z++) {\n      toast.error(err[z])\n      resetField && resetField()\n    }\n    if (!isEmpty(err)) return false\n    return true\n  }\n\n  const maxSelectFile = (files: FileList, resetField?: () => void) => {\n    const maxLength = 1\n\n    if (files.length > maxLength) {\n      const msg = `Only ${maxLength} file can be uploaded at a time`\n      resetField && resetField()\n      toast.warn(msg)\n      return false\n    }\n    return true\n  }\n\n  const checkFileSize = (files: FileList, resetField?: () => void) => {\n    //  default max size is 2.05GB\n    const size = maxFileSize || 20000000\n    const err = []\n    for (let x = 0; x < files.length; x++) {\n      if (files[x].size > size) {\n        err[x] =\n          files[x].type +\n          ' is too large, please pick a smaller file\\n' +\n          `Max size: ${getFileSizeAndUnit(size)}`\n      }\n    }\n    for (let z = 0; z < err.length; z++) {\n      toast.error(err[z])\n      resetField && resetField()\n    }\n    if (!isEmpty(err)) return false\n    return true\n  }\n\n  const readFile = (\n    file: any,\n    currentIndex = 0,\n    lState: UploadStateOptional = state,\n    validateFile?: (file: any) => any\n  ) => {\n    // run validations if any\n    if (validateFile) {\n      validateFile(file)\n    }\n\n    const files = lState.files\n\n    const reader = new FileReader()\n    reader.addEventListener('load', (event) => {\n      if (event.target) {\n        const filesData: {\n          url: string\n          meta: any\n          loaded: number\n        } = {\n          url: event.target.result as string,\n          meta: Array.from(lState.selectedFile)[currentIndex],\n          loaded: files[currentIndex] ? files[currentIndex].loaded : 0,\n        }\n        const newfileUpdate = files\n        newfileUpdate[currentIndex] = filesData\n        updateState({\n          files: newfileUpdate,\n          selectedFile: lState.selectedFile,\n        })\n      }\n    })\n    reader.readAsDataURL(file)\n  }\n\n  const onChangeHandler:\n    | ((event: React.ChangeEvent<HTMLInputElement>) => void)\n    | undefined = (event) => {\n    const files = event.target.files\n    const resetField = () => (event.target.value = '')\n    if (files) {\n      if (\n        maxSelectFile(files, resetField) &&\n        checkMimeType(files, resetField) &&\n        checkFileSize(files, resetField)\n      ) {\n        // if return true allow to setState\n        const newState = updateState({\n          selectedFile: files,\n          loaded: 0,\n        })\n        Array.from(files).forEach((fl: any, index: number) =>\n          readFile(fl, index, newState)\n        )\n        if (autoUpload) {\n          setAutoUpload(true)\n        }\n      }\n    }\n  }\n\n  const handleUpload = (\n    data: FormData,\n    state: UploadState,\n    cb: (update: any) => void\n  ) => {\n    if (uploadHandler) uploadHandler(data, state, cb)\n  }\n\n  const onClickHandler = (newState: UploadState = state) => {\n    try {\n      const selectedFile = newState.selectedFile\n      const data = new FormData()\n      if (!isEmpty(selectedFile)) {\n        for (let x = 0; x < selectedFile.length; x++) {\n          data.append('file', selectedFile[x])\n        }\n        handleUpload(data, newState, updateState)\n      }\n    } catch (err) {\n      console.log('err', err)\n    } finally {\n      setAutoUpload(false)\n    }\n  }\n\n  const uploadArea = useRef(null)\n  const uploadDomRef = useRef(null)\n  const dc = useRef(null)\n  const uploadDom = '#common-upload-component'\n\n  useEffect(() => {\n    dc.current = document\n    uploadArea.current = document.querySelector(uploadDom) as HTMLElement\n    if (runAutoUpload) onClickHandler(state)\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [runAutoUpload])\n\n  const getUploadArea = () => {\n    if (dc.current) return dc.current.querySelector(uploadDom) as HTMLElement\n    else if (dc.current) return uploadArea.current\n    else {\n      return uploadDomRef.current\n    }\n  }\n\n  console.log('getUpload Area', getUploadArea())\n\n  return (\n    <div\n      id=\"drop-area\"\n      className={`pt-4 relative ${className}`}\n      style={{ minHeight: '50px' }}\n    >\n      <div className=\"container hidden\">\n        <div className=\"row\">\n          <div className=\"offset-md-3 col-md-6\">\n            <div className=\"form-group files\">\n              <label>Upload Your File </label>\n              <input\n                type=\"file\"\n                id=\"common-upload-component\"\n                ref={uploadDomRef}\n                disabled={Boolean(disabled)}\n                className=\"form-control\"\n                accept=\"xls, xlsx\"\n                onChange={onChangeHandler}\n              />\n            </div>\n\n            {!autoUpload && (\n              <button\n                type=\"button\"\n                className=\"btn btn-success btn-block\"\n                onClick={() => onClickHandler()}\n              >\n                Upload\n              </button>\n            )}\n          </div>\n        </div>\n      </div>\n      {render(uploadDomRef)}\n    </div>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}