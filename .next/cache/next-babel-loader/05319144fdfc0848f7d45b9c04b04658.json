{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { useEffect, useState } from 'react';\nimport { useTable, usePagination, useRowSelect, useSortBy, useFilters, useColumnOrder, useGlobalFilter, useAsyncDebounce } from 'react-table';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport styled from 'styled-components';\nconst Styles = styled.div`\n  padding: 1rem;\n\n  table {\n    border-spacing: 0;\n    border: 1px solid black;\n\n    tr {\n      :last-child {\n        td {\n          border-bottom: 0;\n        }\n      }\n    }\n\n    th,\n    td {\n      margin: 0;\n      padding: 0.5rem;\n      border-bottom: 1px solid black;\n      border-right: 1px solid black;\n\n      :last-child {\n        border-right: 0;\n      }\n\n      input {\n        font-size: 1rem;\n        padding: 0;\n        margin: 0;\n        border: 0;\n      }\n    }\n\n    .pagination {\n      padding: 0.5rem;\n    }\n  }\n`;\n\nfunction TableComponent(_ref) {\n  let {\n    columns,\n    data,\n    setData\n  } = _ref,\n      rest = _objectWithoutProperties(_ref, [\"columns\", \"data\", \"setData\"]);\n\n  const {\n    0: skipPageReset,\n    1: setSkipPageReset\n  } = useState(false); // We need to keep the table from resetting the pageIndex when we\n  // Update data. So we can keep track of that flag with a ref.\n  // When our cell renderer calls updateMyData, we'll use\n  // the rowIndex, columnId and new value to update the\n  // original data\n\n  const updateData = (rowIndex, columnId, value) => {\n    // We also turn on the flag to not reset the page\n    setSkipPageReset(true);\n    setData(old => old.map((row, index) => {\n      if (index === rowIndex) {\n        return _objectSpread(_objectSpread({}, old[rowIndex]), {}, {\n          [columnId]: value\n        });\n      }\n\n      return row;\n    }));\n  }; // After data chagnes, we turn the flag back off\n  // so that if data actually changes when we're not\n  // editing it, the page is reset\n\n\n  useEffect(() => {\n    setSkipPageReset(false);\n  }, [data]);\n  const tableOptions = {};\n  Array.from(['renderHeader', 'renderFilter', 'renderTableBody', 'renderTableRow', 'renderTableCell', 'defaultColumn', 'globalFilter', 'handleTableControls', 'customHook']).forEach(option => {\n    if (rest[option]) {\n      tableOptions[option] = rest[option];\n    }\n  });\n  return __jsx(Styles, null, __jsx(Table, {\n    columns: columns,\n    data: data,\n    updateData: updateData,\n    skipPageReset: skipPageReset,\n    options: _objectSpread({}, tableOptions)\n  }));\n}\n\nexport default TableComponent; // Be sure to pass our updateData and the skipPageReset option\n\nfunction Table({\n  columns,\n  data,\n  updateData,\n  skipPageReset,\n  options\n}) {\n  const {\n    filterTypes,\n    defaultColumn,\n    globalFilter,\n    renderHeader,\n    renderFilter,\n    renderTableBody,\n    renderTableRow,\n    renderTableCell,\n    handleTableControls,\n    customHook\n  } = options || {};\n\n  let extraHook = hooks => {\n    hooks.visibleColumns.push(columns => [...columns]);\n  };\n\n  if (customHook) extraHook = customHook;\n  const hookOptions = {};\n  if (filterTypes) hookOptions.filterTypes = filterTypes;\n  if (defaultColumn) hookOptions.defaultColumn = defaultColumn;else hookOptions.defaultColumn = {};\n  console.log('hook options', options);\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    prepareRow,\n    page,\n    canPreviousPage,\n    canNextPage,\n    pageOptions,\n    pageCount,\n    gotoPage,\n    nextPage,\n    previousPage,\n    setGlobalFilter,\n    // setGlobalFilteredRows,\n    setPageSize,\n    selectedFlatRows,\n    visibleColumns,\n    preGlobalFilteredRows,\n    // setColumnOrder,\n    state\n  } = useTable(_objectSpread({\n    columns,\n    data,\n    // use the skipPageReset option to disable page resetting temporarily\n    autoResetPage: !skipPageReset,\n    updateData\n  }, hookOptions), useColumnOrder, useFilters, useGlobalFilter, useSortBy, usePagination, useRowSelect, extraHook);\n  const {\n    pageIndex,\n    pageSize,\n    selectedRowIds\n  } = state;\n  const spring = React.useMemo(() => ({\n    type: 'spring',\n    damping: 50,\n    stiffness: 100\n  }), []);\n  const controls = {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    prepareRow,\n    page,\n    canPreviousPage,\n    canNextPage,\n    pageOptions,\n    pageCount,\n    gotoPage,\n    nextPage,\n    previousPage,\n    setGlobalFilter,\n    // setGlobalFilteredRows,\n    setPageSize,\n    selectedFlatRows,\n    visibleColumns,\n    preGlobalFilteredRows,\n    // setColumnOrder,\n    state\n  };\n\n  if (handleTableControls && handleTableControls.beforeTableRender) {\n    return handleTableControls.beforeTableRender(controls);\n  } // Render the UI for your table\n\n\n  return __jsx(React.Fragment, null, handleTableControls && handleTableControls.jsx && handleTableControls.jsx(controls), __jsx(\"table\", getTableProps(), __jsx(\"thead\", null, headerGroups.map(headerGroup => __jsx(\"tr\", headerGroup.getHeaderGroupProps(), headerGroup.headers.map(column => __jsx(motion.th, column.getHeaderProps({\n    layoutTransition: spring,\n    style: {}\n  }), __jsx(\"div\", column.getSortByToggleProps(), renderHeader ? renderHeader(column) : __jsx(React.Fragment, null, column.render('Header'), __jsx(\"span\", null, column.isSorted ? column.isSortedDesc ? ' ðŸ”½' : ' ðŸ”¼' : ''))), __jsx(\"div\", null, column.canFilter && filterTypes ? renderFilter ? renderFilter(column) : column.render('Filter') : null))))), (globalFilter === null || globalFilter === void 0 ? void 0 : globalFilter.use) && __jsx(\"tr\", null, __jsx(\"th\", {\n    colSpan: visibleColumns.length,\n    style: {\n      textAlign: 'left'\n    }\n  }, __jsx(globalFilter.Component, {\n    preGlobalFilteredRows: preGlobalFilteredRows,\n    globalFilter: state.globalFilter,\n    setGlobalFilter: setGlobalFilter\n  })))), __jsx(\"tbody\", getTableBodyProps(), __jsx(AnimatePresence, null, page.map((row, i) => {\n    prepareRow(row);\n    return renderTableRow ? renderTableRow(row) : __jsx(motion.tr, row.getRowProps({\n      layoutTransition: spring,\n      exit: {\n        opacity: 0,\n        maxHeight: 0\n      }\n    }), row.cells.map((cell, i) => {\n      return __jsx(motion.td, cell.getCellProps({\n        layoutTransition: spring\n      }), renderTableBody ? renderTableCell(cell) : cell.render('Cell'));\n    }));\n  })))), __jsx(\"div\", {\n    className: \"pagination\"\n  }, __jsx(\"button\", {\n    onClick: () => gotoPage(0),\n    disabled: !canPreviousPage\n  }, '<<'), ' ', __jsx(\"button\", {\n    onClick: () => previousPage(),\n    disabled: !canPreviousPage\n  }, '<'), ' ', __jsx(\"button\", {\n    onClick: () => nextPage(),\n    disabled: !canNextPage\n  }, '>'), ' ', __jsx(\"button\", {\n    onClick: () => gotoPage(pageCount - 1),\n    disabled: !canNextPage\n  }, '>>'), ' ', __jsx(\"span\", null, \"Page\", ' ', __jsx(\"strong\", null, pageIndex + 1, \" of \", pageOptions.length), ' '), __jsx(\"span\", null, \"| Go to page:\", ' ', __jsx(\"input\", {\n    type: \"number\",\n    defaultValue: pageIndex + 1,\n    onChange: e => {\n      const page = e.target.value ? Number(e.target.value) - 1 : 0;\n      gotoPage(page);\n    },\n    style: {\n      width: '100px'\n    }\n  })), ' ', __jsx(\"select\", {\n    value: pageSize,\n    onChange: e => {\n      setPageSize(Number(e.target.value));\n    }\n  }, [10, 20, 30, 40, 50].map(pageSize => __jsx(\"option\", {\n    key: pageSize,\n    value: pageSize\n  }, \"Show \", pageSize)))), __jsx(\"pre\", null, __jsx(\"code\", null, JSON.stringify({\n    state,\n    selectedRowIds: selectedRowIds,\n    'selectedFlatRows[].original': selectedFlatRows.map(d => d.original)\n  }, null, 2))));\n}\n\nexport { useAsyncDebounce };","map":{"version":3,"sources":["/mnt/c/Users/arash/Documents/DevInDoc/Getaboard/demoEmail/reward-test/src/components/Table.tsx"],"names":["React","useEffect","useState","useTable","usePagination","useRowSelect","useSortBy","useFilters","useColumnOrder","useGlobalFilter","useAsyncDebounce","motion","AnimatePresence","styled","Styles","div","TableComponent","columns","data","setData","rest","skipPageReset","setSkipPageReset","updateData","rowIndex","columnId","value","old","map","row","index","tableOptions","Array","from","forEach","option","Table","options","filterTypes","defaultColumn","globalFilter","renderHeader","renderFilter","renderTableBody","renderTableRow","renderTableCell","handleTableControls","customHook","extraHook","hooks","visibleColumns","push","hookOptions","console","log","getTableProps","getTableBodyProps","headerGroups","prepareRow","page","canPreviousPage","canNextPage","pageOptions","pageCount","gotoPage","nextPage","previousPage","setGlobalFilter","setPageSize","selectedFlatRows","preGlobalFilteredRows","state","autoResetPage","pageIndex","pageSize","selectedRowIds","spring","useMemo","type","damping","stiffness","controls","beforeTableRender","jsx","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","layoutTransition","style","getSortByToggleProps","render","isSorted","isSortedDesc","canFilter","use","length","textAlign","i","getRowProps","exit","opacity","maxHeight","cells","cell","getCellProps","e","target","Number","width","JSON","stringify","d","original"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport clsx from 'clsx'\nimport {\n  useTable,\n  usePagination,\n  useRowSelect,\n  useSortBy,\n  useFilters,\n  useColumnOrder,\n  useGlobalFilter,\n  useAsyncDebounce,\n} from 'react-table'\nimport { motion, AnimatePresence } from 'framer-motion'\nimport matchSorter from 'match-sorter'\n\nimport styled from 'styled-components'\nimport Input from './Input'\nimport Checkbox from './Checkbox'\n\nexport interface Props {\n  className?: string | Record<string, unknown>\n  ordered?: boolean\n  item?: boolean\n}\n\nexport interface gFilterProps {\n  preGlobalFilteredRows: unknown\n  globalFilter: unknown\n  setGlobalFilter: unknown\n}\n\nexport type gFilterState = unknown\n\nexport type filterColumnProps = unknown\n\nexport type FilterType = {\n  fuzzyText: unknown\n  text: (rows: unknown, id: unknown, filterValue: unknown) => unknown\n}\n\nexport type DefaultColumn = {\n  Filter?: ({\n    column: { filterValue, preFilteredRows, setFilter },\n  }: {\n    column: {\n      filterValue: unknown\n      preFilteredRows: unknown\n      setFilter: unknown\n    }\n  }) => JSX.Element\n  Cell?: ({\n    value: initialValue,\n    row: { index },\n    column,\n    updateData,\n  }: {\n    value: unknown\n    row: {\n      index: unknown\n    }\n    column: unknown\n    updateData: (index, id, value) => unknown\n  }) => unknown\n}\n\nexport type GlobalFilter = {\n  use: boolean\n  Component: ({\n    preGlobalFilteredRows,\n    globalFilter,\n    setGlobalFilter,\n  }) => JSX.Element\n}\n\nexport interface TableOptions {\n  filterTypes?: FilterType\n  defaultColumn?: DefaultColumn\n  globalFilter?: GlobalFilter\n  renderHeader?: (header: unknown) => JSX.Element\n  renderFilter?: (column: unknown) => JSX.Element\n  renderTableBody?: (column: unknown) => JSX.Element\n  renderTableRow?: (row: unknown) => JSX.Element\n  renderTableCell?: (cell: unknown) => JSX.Element\n  handleTableControls?: {\n    beforeTableRender?: (controls: unknown) => JSX.Element\n    jsx?: (controls) => JSX.Element\n  }\n  customHook?: (hooks: unknown) => unknown\n}\n\nconst Styles = styled.div`\n  padding: 1rem;\n\n  table {\n    border-spacing: 0;\n    border: 1px solid black;\n\n    tr {\n      :last-child {\n        td {\n          border-bottom: 0;\n        }\n      }\n    }\n\n    th,\n    td {\n      margin: 0;\n      padding: 0.5rem;\n      border-bottom: 1px solid black;\n      border-right: 1px solid black;\n\n      :last-child {\n        border-right: 0;\n      }\n\n      input {\n        font-size: 1rem;\n        padding: 0;\n        margin: 0;\n        border: 0;\n      }\n    }\n\n    .pagination {\n      padding: 0.5rem;\n    }\n  }\n`\n\nfunction TableComponent({\n  columns,\n  data,\n  setData,\n  ...rest\n}: {\n  columns: {\n    Header?: string\n    columns: {\n      Header: string\n      accessor: string\n      Cell?: unknown\n    }[]\n  }[]\n  data: Record<string, unknown>\n  setData: React.Dispatch<unknown>\n} & TableOptions) {\n  const [skipPageReset, setSkipPageReset] = useState(false)\n\n  // We need to keep the table from resetting the pageIndex when we\n  // Update data. So we can keep track of that flag with a ref.\n\n  // When our cell renderer calls updateMyData, we'll use\n  // the rowIndex, columnId and new value to update the\n  // original data\n  const updateData = (rowIndex, columnId, value) => {\n    // We also turn on the flag to not reset the page\n    setSkipPageReset(true)\n    setData((old) =>\n      old.map((row, index) => {\n        if (index === rowIndex) {\n          return {\n            ...old[rowIndex],\n            [columnId]: value,\n          }\n        }\n        return row\n      })\n    )\n  }\n\n  // After data chagnes, we turn the flag back off\n  // so that if data actually changes when we're not\n  // editing it, the page is reset\n  useEffect(() => {\n    setSkipPageReset(false)\n  }, [data])\n\n  const tableOptions: TableOptions = {}\n\n  Array.from([\n    'renderHeader',\n    'renderFilter',\n    'renderTableBody',\n    'renderTableRow',\n    'renderTableCell',\n    'defaultColumn',\n    'globalFilter',\n    'handleTableControls',\n    'customHook',\n  ]).forEach((option) => {\n    if (rest[option]) {\n      tableOptions[option] = rest[option]\n    }\n  })\n\n  return (\n    <Styles>\n      <Table\n        columns={columns}\n        data={data}\n        updateData={updateData}\n        skipPageReset={skipPageReset}\n        options={{ ...tableOptions }}\n      />\n    </Styles>\n  )\n}\n\nexport default TableComponent\n\n// Be sure to pass our updateData and the skipPageReset option\nfunction Table({ columns, data, updateData, skipPageReset, options }) {\n  const {\n    filterTypes,\n    defaultColumn,\n    globalFilter,\n    renderHeader,\n    renderFilter,\n    renderTableBody,\n    renderTableRow,\n    renderTableCell,\n    handleTableControls,\n    customHook,\n  }: TableOptions = options || {}\n\n  let extraHook = (hooks) => {\n    hooks.visibleColumns.push((columns) => [...columns])\n  }\n  if (customHook) extraHook = customHook\n\n  const hookOptions: {\n    filterTypes?: FilterType\n    defaultColumn?: DefaultColumn\n  } = {}\n\n  if (filterTypes) hookOptions.filterTypes = filterTypes\n  if (defaultColumn) hookOptions.defaultColumn = defaultColumn\n  else hookOptions.defaultColumn = {}\n\n  console.log('hook options', options)\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    prepareRow,\n    page,\n    canPreviousPage,\n    canNextPage,\n    pageOptions,\n    pageCount,\n    gotoPage,\n    nextPage,\n    previousPage,\n    setGlobalFilter,\n    // setGlobalFilteredRows,\n    setPageSize,\n    selectedFlatRows,\n    visibleColumns,\n    preGlobalFilteredRows,\n    // setColumnOrder,\n    state,\n  } = useTable(\n    {\n      columns,\n      data,\n      // use the skipPageReset option to disable page resetting temporarily\n      autoResetPage: !skipPageReset,\n      updateData,\n      ...hookOptions,\n    },\n    useColumnOrder,\n    useFilters,\n    useGlobalFilter,\n    useSortBy,\n    usePagination,\n    useRowSelect,\n    extraHook\n  )\n\n  const { pageIndex, pageSize, selectedRowIds } = state\n\n  const spring = React.useMemo(\n    () => ({\n      type: 'spring',\n      damping: 50,\n      stiffness: 100,\n    }),\n    []\n  )\n\n  const controls = {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    prepareRow,\n    page,\n    canPreviousPage,\n    canNextPage,\n    pageOptions,\n    pageCount,\n    gotoPage,\n    nextPage,\n    previousPage,\n    setGlobalFilter,\n    // setGlobalFilteredRows,\n    setPageSize,\n    selectedFlatRows,\n    visibleColumns,\n    preGlobalFilteredRows,\n    // setColumnOrder,\n    state,\n  }\n\n  if (handleTableControls && handleTableControls.beforeTableRender) {\n    return handleTableControls.beforeTableRender(controls)\n  }\n\n  // Render the UI for your table\n  return (\n    <>\n      {handleTableControls &&\n        handleTableControls.jsx &&\n        handleTableControls.jsx(controls)}\n      <table {...getTableProps()}>\n        <thead>\n          {headerGroups.map((headerGroup) => (\n            <tr {...headerGroup.getHeaderGroupProps()}>\n              {headerGroup.headers.map((column) => (\n                <motion.th\n                  {...column.getHeaderProps({\n                    layoutTransition: spring,\n                    style: {},\n                  })}\n                >\n                  <div {...column.getSortByToggleProps()}>\n                    {renderHeader ? (\n                      renderHeader(column)\n                    ) : (\n                      <>\n                        {column.render('Header')}\n                        <span>\n                          {column.isSorted\n                            ? column.isSortedDesc\n                              ? ' ðŸ”½'\n                              : ' ðŸ”¼'\n                            : ''}\n                        </span>\n                      </>\n                    )}\n                  </div>\n                  <div>\n                    {column.canFilter && filterTypes\n                      ? renderFilter\n                        ? renderFilter(column)\n                        : column.render('Filter')\n                      : null}\n                  </div>\n                </motion.th>\n              ))}\n            </tr>\n          ))}\n          {globalFilter?.use && (\n            <tr>\n              <th\n                colSpan={visibleColumns.length}\n                style={{\n                  textAlign: 'left',\n                }}\n              >\n                {/* @ts-ignore */}\n                <globalFilter.Component\n                  preGlobalFilteredRows={preGlobalFilteredRows}\n                  globalFilter={state.globalFilter}\n                  setGlobalFilter={setGlobalFilter}\n                />\n              </th>\n            </tr>\n          )}\n        </thead>\n        <tbody {...getTableBodyProps()}>\n          <AnimatePresence>\n            {page.map((row, i) => {\n              prepareRow(row)\n              return renderTableRow ? (\n                renderTableRow(row)\n              ) : (\n                <motion.tr\n                  {...row.getRowProps({\n                    layoutTransition: spring,\n                    exit: { opacity: 0, maxHeight: 0 },\n                  })}\n                >\n                  {row.cells.map((cell, i) => {\n                    return (\n                      <motion.td\n                        {...cell.getCellProps({\n                          layoutTransition: spring,\n                        })}\n                      >\n                        {renderTableBody\n                          ? renderTableCell(cell)\n                          : cell.render('Cell')}\n                      </motion.td>\n                    )\n                  })}\n                </motion.tr>\n              )\n            })}\n          </AnimatePresence>\n        </tbody>\n      </table>\n      <div className=\"pagination\">\n        <button onClick={() => gotoPage(0)} disabled={!canPreviousPage}>\n          {'<<'}\n        </button>{' '}\n        <button onClick={() => previousPage()} disabled={!canPreviousPage}>\n          {'<'}\n        </button>{' '}\n        <button onClick={() => nextPage()} disabled={!canNextPage}>\n          {'>'}\n        </button>{' '}\n        <button onClick={() => gotoPage(pageCount - 1)} disabled={!canNextPage}>\n          {'>>'}\n        </button>{' '}\n        <span>\n          Page{' '}\n          <strong>\n            {pageIndex + 1} of {pageOptions.length}\n          </strong>{' '}\n        </span>\n        <span>\n          | Go to page:{' '}\n          <input\n            type=\"number\"\n            defaultValue={pageIndex + 1}\n            onChange={(e) => {\n              const page = e.target.value ? Number(e.target.value) - 1 : 0\n              gotoPage(page)\n            }}\n            style={{\n              width: '100px',\n            }}\n          />\n        </span>{' '}\n        <select\n          value={pageSize}\n          onChange={(e) => {\n            setPageSize(Number(e.target.value))\n          }}\n        >\n          {[10, 20, 30, 40, 50].map((pageSize) => (\n            <option key={pageSize} value={pageSize}>\n              Show {pageSize}\n            </option>\n          ))}\n        </select>\n      </div>\n      <pre>\n        <code>\n          {JSON.stringify(\n            {\n              state,\n              selectedRowIds: selectedRowIds,\n              'selectedFlatRows[].original': selectedFlatRows.map(\n                (d) => d.original\n              ),\n            },\n            null,\n            2\n          )}\n        </code>\n      </pre>\n    </>\n  )\n}\n\nexport { useAsyncDebounce }\n"]},"metadata":{},"sourceType":"module"}