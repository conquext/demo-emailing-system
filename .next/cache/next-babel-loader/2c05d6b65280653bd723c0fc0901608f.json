{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\n\nvar _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useEffect, useMemo, useState } from 'react';\nimport { motion } from 'framer-motion';\nimport matchSorter from 'match-sorter';\nimport Layout from '@components/layout/Layout';\nimport TableComponent, { useAsyncDebounce } from '@components/Table';\nimport makeData from '@utils/helpers';\nimport Checkbox from '@components/Checkbox';\nvar editableFields = ['firstName', 'lastName', 'email'];\n\nvar headerSearch = function headerSearch() {\n  return __jsx(\"div\", {\n    className: \"flex justify-start\",\n    style: {\n      width: '55%'\n    }\n  }, __jsx(\"p\", null, \"an header search here\"));\n};\n\nfunction fuzzyTextFilterFn(rows, id, filterValue) {\n  return matchSorter(rows, filterValue, {\n    keys: [function (row) {\n      return row.values[id];\n    }]\n  });\n} // Let the table remove the filter if the string is empty\n\n\nfuzzyTextFilterFn.autoRemove = function (val) {\n  return !val;\n}; // Create an editable cell renderer\n\n\nvar EditableCell = function EditableCell(_ref) {\n  _s();\n\n  var initialValue = _ref.value,\n      index = _ref.row.index,\n      id = _ref.column.id,\n      updateData = _ref.updateData;\n\n  // We need to keep and update the state of the cell normally\n  var _useState = useState(initialValue),\n      value = _useState[0],\n      setValue = _useState[1];\n\n  var onChange = function onChange(e) {\n    setValue(e.target.value);\n  }; // We'll only update the external data when the input is blurred\n\n\n  var onBlur = function onBlur() {\n    updateData(index, id, value);\n  }; // If the initialValue is changed external, sync it up with our state\n\n\n  useEffect(function () {\n    setValue(initialValue);\n  }, [initialValue]);\n  return editableFields.includes(id) ? __jsx(\"input\", {\n    value: value,\n    onChange: onChange,\n    onBlur: onBlur,\n    className: \"w-full bg-transparent bg-yellow-500\"\n  }) : __jsx(\"p\", {\n    className: \"bg-red-400\"\n  }, value);\n}; // Define a default UI for filtering\n\n\n_s(EditableCell, \"tWiMN+R1KrlPc+I/v9D+hnPBFtc=\");\n\n_c = EditableCell;\n\nfunction GlobalFilter(_ref2) {\n  _s2();\n\n  var preGlobalFilteredRows = _ref2.preGlobalFilteredRows,\n      globalFilter = _ref2.globalFilter,\n      setGlobalFilter = _ref2.setGlobalFilter;\n  var count = preGlobalFilteredRows.length;\n\n  var _useState2 = useState(globalFilter),\n      value = _useState2[0],\n      setValue = _useState2[1];\n\n  var _onChange = useAsyncDebounce(function (value) {\n    setGlobalFilter(value || undefined);\n  }, 200);\n\n  return __jsx(\"span\", null, \"Search:\", ' ', __jsx(\"input\", {\n    value: value || '',\n    onChange: function onChange(e) {\n      setValue(e.target.value);\n\n      _onChange(e.target.value);\n    },\n    placeholder: \"\".concat(count, \" records...\"),\n    style: {\n      fontSize: '1.1rem',\n      border: '0'\n    }\n  }));\n} // Define a UI for filtering\n\n\n_s2(GlobalFilter, \"u76gItWTPW4jhTYSCcNG7/LfbyA=\", false, function () {\n  return [useAsyncDebounce];\n});\n\n_c2 = GlobalFilter;\n\nfunction DefaultColumnFilter(_ref3) {\n  var _ref3$column = _ref3.column,\n      filterValue = _ref3$column.filterValue,\n      preFilteredRows = _ref3$column.preFilteredRows,\n      setFilter = _ref3$column.setFilter;\n  var count = preFilteredRows.length;\n  return __jsx(\"input\", {\n    value: filterValue || '',\n    onChange: function onChange(e) {\n      setFilter(e.target.value || undefined); // Set undefined to remove the filter entirely\n    },\n    placeholder: \"Search \".concat(count, \" records...\")\n  });\n}\n\n_c3 = DefaultColumnFilter;\n\nvar IndexPage = function IndexPage() {\n  _s3();\n\n  var _useState3 = useState(function () {\n    return makeData(20);\n  }),\n      data = _useState3[0],\n      setData = _useState3[1];\n\n  var columns = useMemo(function () {\n    return [{\n      Header: 'Table',\n      columns: [{\n        Header: 'First Name',\n        accessor: 'firstName'\n      }, {\n        Header: 'Last Name',\n        accessor: 'lastName'\n      }, {\n        Header: 'Email',\n        accessor: 'email'\n      }]\n    }, {\n      Header: 'Test Info',\n      columns: [{\n        Header: 'Invite Sent',\n        accessor: 'inviteSent'\n      }, {\n        Header: 'Test Sent',\n        accessor: 'testSent'\n      }, {\n        Header: 'Test Status',\n        accessor: 'testStatus'\n      }]\n    }];\n  }, []);\n  var spring = React.useMemo(function () {\n    return {\n      type: 'spring',\n      damping: 50,\n      stiffness: 100\n    };\n  }, []);\n  var filterTypes = useMemo(function () {\n    return {\n      // Add a new fuzzyTextFilterFn filter type.\n      fuzzyText: fuzzyTextFilterFn,\n      // Or, override the default text filter to use\n      // \"startWith\"\n      text: function text(rows, id, filterValue) {\n        return rows.filter(function (row) {\n          var rowValue = row.values[id];\n          return rowValue !== undefined ? String(rowValue).toLowerCase().startsWith(String(filterValue).toLowerCase()) : true;\n        });\n      }\n    };\n  }, []);\n  var defaultColumn = React.useMemo(function () {\n    return {\n      // Let's set up our Filter UI\n      Filter: DefaultColumnFilter,\n      Cell: EditableCell\n    };\n  }, []);\n\n  var renderTableSelect = function renderTableSelect(hooks) {\n    hooks.visibleColumns.push(function (columns) {\n      return [// Let's make a column for selection\n      {\n        id: 'selection',\n        // The header can use the table's getToggleAllRowsSelectedProps method\n        // to render a checkbox\n        Header: function Header(_ref4) {\n          var getToggleAllPageRowsSelectedProps = _ref4.getToggleAllPageRowsSelectedProps;\n          return __jsx(\"div\", null, __jsx(Checkbox, getToggleAllPageRowsSelectedProps()));\n        },\n        // The cell can use the individual row's getToggleRowSelectedProps method\n        // to the render a checkbox\n        Cell: function Cell(_ref5) {\n          var row = _ref5.row;\n          return __jsx(\"div\", null, __jsx(Checkbox, row.getToggleRowSelectedProps()));\n        }\n      }].concat(_toConsumableArray(columns));\n    });\n  };\n\n  var renderTableHeader = function renderTableHeader(column) {\n    var header = column.render('Header');\n    return __jsx(React.Fragment, null, header);\n  };\n\n  var renderTableRow = function renderTableRow(row) {\n    console.log('in the body', row);\n\n    var renderTableCell = function renderTableCell(cell) {\n      return cell.render('Cell');\n    };\n\n    return __jsx(React.Fragment, null, __jsx(motion.tr, _extends({}, row.getRowProps({\n      layoutTransition: spring,\n      exit: {\n        opacity: 0,\n        maxHeight: 0\n      }\n    }), {\n      className: \"\".concat(true ? 'bg-red-700' : '', \" h-12\")\n    }), row.cells.map(function (cell, i) {\n      return __jsx(motion.td, cell.getCellProps({\n        layoutTransition: spring\n      }), renderTableCell ? renderTableCell(cell) : cell.render('Cell'));\n    })));\n  };\n\n  return __jsx(Layout, {\n    title: \"Your Awesome App\",\n    className: \"container py-8 overflow-auto\",\n    header: headerSearch()\n  }, __jsx(\"p\", {\n    className: \"mb-4 text-lg font-light\"\n  }, \"Demo spreadsheet upload and email list system.\"), __jsx(\"div\", null, __jsx(TableComponent, {\n    columns: columns,\n    data: data,\n    setData: setData,\n    filterTypes: filterTypes,\n    defaultColumn: defaultColumn,\n    globalFilter: {\n      use: true,\n      Component: GlobalFilter\n    },\n    renderHeader: renderTableHeader // renderFilter= {(column: unknown) => JSX.Element}\n    // renderTableBody={renderTableBody}\n    ,\n    renderTableRow: renderTableRow // renderTableCell= {(cell: unknown) => JSX.Element}\n    ,\n    handleTableControls: {},\n    customHook: renderTableSelect\n  })));\n};\n\n_s3(IndexPage, \"rsQ77kUnh51HdMY4m2S5cVUoOu0=\");\n\n_c4 = IndexPage;\nexport default IndexPage;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"EditableCell\");\n$RefreshReg$(_c2, \"GlobalFilter\");\n$RefreshReg$(_c3, \"DefaultColumnFilter\");\n$RefreshReg$(_c4, \"IndexPage\");","map":{"version":3,"sources":["/mnt/c/Users/arash/Documents/DevInDoc/Getaboard/demoEmail/reward-test/pages/index.tsx"],"names":["React","useEffect","useMemo","useState","motion","matchSorter","Layout","TableComponent","useAsyncDebounce","makeData","Checkbox","editableFields","headerSearch","width","fuzzyTextFilterFn","rows","id","filterValue","keys","row","values","autoRemove","val","EditableCell","initialValue","value","index","column","updateData","setValue","onChange","e","target","onBlur","includes","GlobalFilter","preGlobalFilteredRows","globalFilter","setGlobalFilter","count","length","undefined","fontSize","border","DefaultColumnFilter","preFilteredRows","setFilter","IndexPage","data","setData","columns","Header","accessor","spring","type","damping","stiffness","filterTypes","fuzzyText","text","filter","rowValue","String","toLowerCase","startsWith","defaultColumn","Filter","Cell","renderTableSelect","hooks","visibleColumns","push","getToggleAllPageRowsSelectedProps","getToggleRowSelectedProps","renderTableHeader","header","render","renderTableRow","console","log","renderTableCell","cell","getRowProps","layoutTransition","exit","opacity","maxHeight","cells","map","i","getCellProps","use","Component"],"mappings":"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","sourcesContent":["import React, { useEffect, useMemo, useState } from 'react'\nimport { NextPage } from 'next'\nimport { motion, AnimatePresence } from 'framer-motion'\nimport Link from 'next/link'\nimport matchSorter from 'match-sorter'\nimport { FiArrowRight } from 'react-icons/fi'\nimport routes from '@utils/routes'\nimport Layout from '@components/layout/Layout'\nimport TableComponent, { useAsyncDebounce } from '@components/Table'\nimport makeData from '@utils/helpers'\nimport Checkbox from '@components/Checkbox'\n\nconst editableFields = ['firstName', 'lastName', 'email']\n\nconst headerSearch = () => {\n  return (\n    <div className=\"flex justify-start\" style={{ width: '55%' }}>\n      <p>an header search here</p>\n    </div>\n  )\n}\n\nfunction fuzzyTextFilterFn(rows, id, filterValue) {\n  return matchSorter(rows, filterValue, { keys: [(row) => row.values[id]] })\n}\n\n// Let the table remove the filter if the string is empty\nfuzzyTextFilterFn.autoRemove = (val) => !val\n\n// Create an editable cell renderer\nconst EditableCell = ({\n  value: initialValue,\n  row: { index },\n  column: { id },\n  updateData, // This is a custom function that we supplied to our table instance\n}) => {\n  // We need to keep and update the state of the cell normally\n  const [value, setValue] = useState(initialValue)\n\n  const onChange = (e) => {\n    setValue(e.target.value)\n  }\n\n  // We'll only update the external data when the input is blurred\n  const onBlur = () => {\n    updateData(index, id, value)\n  }\n\n  // If the initialValue is changed external, sync it up with our state\n  useEffect(() => {\n    setValue(initialValue)\n  }, [initialValue])\n\n  return editableFields.includes(id) ? (\n    <input\n      value={value}\n      onChange={onChange}\n      onBlur={onBlur}\n      className=\"w-full bg-transparent bg-yellow-500\"\n    />\n  ) : (\n    <p className=\"bg-red-400\">{value}</p>\n  )\n}\n\n// Define a default UI for filtering\nfunction GlobalFilter({\n  preGlobalFilteredRows,\n  globalFilter,\n  setGlobalFilter,\n}) {\n  const count = preGlobalFilteredRows.length\n  const [value, setValue] = useState(globalFilter)\n  const onChange = useAsyncDebounce((value) => {\n    setGlobalFilter(value || undefined)\n  }, 200)\n\n  return (\n    <span>\n      Search:{' '}\n      <input\n        value={value || ''}\n        onChange={(e) => {\n          setValue(e.target.value)\n          onChange(e.target.value)\n        }}\n        placeholder={`${count} records...`}\n        style={{\n          fontSize: '1.1rem',\n          border: '0',\n        }}\n      />\n    </span>\n  )\n}\n\n// Define a UI for filtering\nfunction DefaultColumnFilter({\n  column: { filterValue, preFilteredRows, setFilter },\n}) {\n  const count = preFilteredRows.length\n\n  return (\n    <input\n      value={filterValue || ''}\n      onChange={(e) => {\n        setFilter(e.target.value || undefined) // Set undefined to remove the filter entirely\n      }}\n      placeholder={`Search ${count} records...`}\n    />\n  )\n}\n\nconst IndexPage: NextPage = () => {\n  const [data, setData] = useState(() => makeData(20))\n  const columns = useMemo(\n    () => [\n      {\n        Header: 'Table',\n        columns: [\n          {\n            Header: 'First Name',\n            accessor: 'firstName',\n          },\n          {\n            Header: 'Last Name',\n            accessor: 'lastName',\n          },\n          {\n            Header: 'Email',\n            accessor: 'email',\n          },\n        ],\n      },\n      {\n        Header: 'Test Info',\n        columns: [\n          {\n            Header: 'Invite Sent',\n            accessor: 'inviteSent',\n          },\n          {\n            Header: 'Test Sent',\n            accessor: 'testSent',\n          },\n          {\n            Header: 'Test Status',\n            accessor: 'testStatus',\n          },\n        ],\n      },\n    ],\n    []\n  )\n  const spring = React.useMemo(\n    () => ({\n      type: 'spring',\n      damping: 50,\n      stiffness: 100,\n    }),\n    []\n  )\n  const filterTypes = useMemo(\n    () => ({\n      // Add a new fuzzyTextFilterFn filter type.\n      fuzzyText: fuzzyTextFilterFn,\n      // Or, override the default text filter to use\n      // \"startWith\"\n      text: (rows, id, filterValue) => {\n        return rows.filter((row) => {\n          const rowValue = row.values[id]\n          return rowValue !== undefined\n            ? String(rowValue)\n                .toLowerCase()\n                .startsWith(String(filterValue).toLowerCase())\n            : true\n        })\n      },\n    }),\n    []\n  )\n\n  const defaultColumn = React.useMemo(\n    () => ({\n      // Let's set up our Filter UI\n      Filter: DefaultColumnFilter,\n      Cell: EditableCell,\n    }),\n    []\n  )\n\n  const renderTableSelect = (hooks) => {\n    hooks.visibleColumns.push((columns) => [\n      // Let's make a column for selection\n      {\n        id: 'selection',\n        // The header can use the table's getToggleAllRowsSelectedProps method\n        // to render a checkbox\n        Header: ({ getToggleAllPageRowsSelectedProps }) => (\n          <div>\n            <Checkbox {...getToggleAllPageRowsSelectedProps()} />\n          </div>\n        ),\n        // The cell can use the individual row's getToggleRowSelectedProps method\n        // to the render a checkbox\n        Cell: ({ row }) => (\n          <div>\n            <Checkbox {...row.getToggleRowSelectedProps()} />\n          </div>\n        ),\n      },\n      ...columns,\n    ])\n  }\n\n  const renderTableHeader = (column) => {\n    const header = column.render('Header')\n    return <>{header}</>\n  }\n  const renderTableRow = (row) => {\n    console.log('in the body', row)\n    const renderTableCell = (cell) => {\n      return cell.render('Cell')\n    }\n    return (\n      <>\n        <motion.tr\n          {...row.getRowProps({\n            layoutTransition: spring,\n            exit: { opacity: 0, maxHeight: 0 },\n          })}\n          className={`${true ? 'bg-red-700' : ''} h-12`}\n        >\n          {row.cells.map((cell, i) => {\n            return (\n              <motion.td\n                {...cell.getCellProps({\n                  layoutTransition: spring,\n                })}\n              >\n                {renderTableCell ? renderTableCell(cell) : cell.render('Cell')}\n              </motion.td>\n            )\n          })}\n        </motion.tr>\n      </>\n    )\n  }\n\n  return (\n    <Layout\n      title=\"Your Awesome App\"\n      className=\"container py-8 overflow-auto\"\n      header={headerSearch()}\n    >\n      {/* <h1 className=\"mb-4 text-3xl font-black dark:text-gray-100\">Welcome</h1> */}\n      <p className=\"mb-4 text-lg font-light\">\n        Demo spreadsheet upload and email list system.\n      </p>\n      <div>\n        <TableComponent\n          columns={columns}\n          data={data}\n          setData={setData}\n          filterTypes={filterTypes}\n          defaultColumn={defaultColumn}\n          globalFilter={{ use: true, Component: GlobalFilter }}\n          renderHeader={renderTableHeader}\n          // renderFilter= {(column: unknown) => JSX.Element}\n          // renderTableBody={renderTableBody}\n          renderTableRow={renderTableRow}\n          // renderTableCell= {(cell: unknown) => JSX.Element}\n          handleTableControls={{}}\n          customHook={renderTableSelect}\n        />\n      </div>\n    </Layout>\n  )\n}\n\nexport default IndexPage\n"]},"metadata":{},"sourceType":"module"}