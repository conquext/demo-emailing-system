{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport * as React from 'react';\nimport clsx from 'clsx';\n\nvar Dropdown = function Dropdown(_ref) {\n  _s();\n\n  var className = _ref.className,\n      buttonLabel = _ref.buttonLabel,\n      children = _ref.children;\n  var node = React.useRef();\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      showDropdown = _React$useState2[0],\n      setShowDropdown = _React$useState2[1];\n\n  var toggleDropdown = function toggleDropdown() {\n    setShowDropdown(!showDropdown);\n  };\n\n  var handleClickOutside = function handleClickOutside(e) {\n    var _node$current;\n\n    if (node === null || node === void 0 ? void 0 : (_node$current = node.current) === null || _node$current === void 0 ? void 0 : _node$current.contains(e.target)) {\n      return;\n    }\n\n    setShowDropdown(false);\n  };\n\n  React.useEffect(function () {\n    document.addEventListener('mousedown', handleClickOutside);\n    return function () {\n      return document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, []);\n  return __jsx(\"div\", {\n    ref: node,\n    className: clsx('relative inline-block', className)\n  }, __jsx(\"button\", {\n    className: clsx('p-2 rounded-full', {\n      'hover:bg-primary hover:bg-opacity-25': !showDropdown,\n      'bg-primary text-white': showDropdown\n    }),\n    onClick: toggleDropdown\n  }, buttonLabel), showDropdown && __jsx(\"div\", {\n    className: \"absolute right-0 mt-1 bg-white dark:bg-gray-800 border dark:border-gray-700 rounded shadow-md p-2 space-y-2\"\n  }, children));\n};\n\n_s(Dropdown, \"kKkicUeuCUMlAvFpZK2v9FiUdys=\");\n\n_c = Dropdown;\nexport default Dropdown;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dropdown\");","map":{"version":3,"sources":["/mnt/c/Users/arash/Documents/DevInDoc/Getaboard/demoEmail/reward-test/src/components/Dropdown.tsx"],"names":["React","clsx","Dropdown","className","buttonLabel","children","node","useRef","useState","showDropdown","setShowDropdown","toggleDropdown","handleClickOutside","e","current","contains","target","useEffect","document","addEventListener","removeEventListener"],"mappings":";;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,IAAP,MAAiB,MAAjB;;AAOA,IAAMC,QAAyB,GAAG,SAA5BA,QAA4B,OAA0C;AAAA;;AAAA,MAAvCC,SAAuC,QAAvCA,SAAuC;AAAA,MAA5BC,WAA4B,QAA5BA,WAA4B;AAAA,MAAfC,QAAe,QAAfA,QAAe;AAC1E,MAAMC,IAAI,GAAGN,KAAK,CAACO,MAAN,EAAb;;AAD0E,wBAElCP,KAAK,CAACQ,QAAN,CAAe,KAAf,CAFkC;AAAA;AAAA,MAEnEC,YAFmE;AAAA,MAErDC,eAFqD;;AAI1E,MAAMC,cAAc,GAAG,SAAjBA,cAAiB,GAAM;AAC3BD,IAAAA,eAAe,CAAC,CAACD,YAAF,CAAf;AACD,GAFD;;AAIA,MAAMG,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,CAAD,EAAmB;AAAA;;AAC5C,QAAIP,IAAJ,aAAIA,IAAJ,wCAAIA,IAAI,CAAEQ,OAAV,kDAAI,cAAeC,QAAf,CAAwBF,CAAC,CAACG,MAA1B,CAAJ,EAA+C;AAC7C;AACD;;AACDN,IAAAA,eAAe,CAAC,KAAD,CAAf;AACD,GALD;;AAOAV,EAAAA,KAAK,CAACiB,SAAN,CAAgB,YAAM;AACpBC,IAAAA,QAAQ,CAACC,gBAAT,CAA0B,WAA1B,EAAuCP,kBAAvC;AACA,WAAO;AAAA,aAAMM,QAAQ,CAACE,mBAAT,CAA6B,WAA7B,EAA0CR,kBAA1C,CAAN;AAAA,KAAP;AACD,GAHD,EAGG,EAHH;AAKA,SACE;AAAK,IAAA,GAAG,EAAEN,IAAV;AAAgB,IAAA,SAAS,EAAEL,IAAI,CAAC,uBAAD,EAA0BE,SAA1B;AAA/B,KACE;AACE,IAAA,SAAS,EAAEF,IAAI,CAAC,kBAAD,EAAqB;AAClC,8CAAwC,CAACQ,YADP;AAElC,+BAAyBA;AAFS,KAArB,CADjB;AAKE,IAAA,OAAO,EAAEE;AALX,KAOGP,WAPH,CADF,EAUGK,YAAY,IACX;AAAK,IAAA,SAAS,EAAC;AAAf,KACGJ,QADH,CAXJ,CADF;AAkBD,CAtCD;;GAAMH,Q;;KAAAA,Q;AAwCN,eAAeA,QAAf","sourcesContent":["import * as React from 'react'\nimport clsx from 'clsx'\n\nexport interface Props {\n  className?: string | Record<string, unknown>\n  buttonLabel: string | React.ReactElement\n}\n\nconst Dropdown: React.FC<Props> = ({ className, buttonLabel, children }) => {\n  const node = React.useRef<HTMLDivElement>()\n  const [showDropdown, setShowDropdown] = React.useState(false)\n\n  const toggleDropdown = () => {\n    setShowDropdown(!showDropdown)\n  }\n\n  const handleClickOutside = (e: MouseEvent) => {\n    if (node?.current?.contains(e.target as Node)) {\n      return\n    }\n    setShowDropdown(false)\n  }\n\n  React.useEffect(() => {\n    document.addEventListener('mousedown', handleClickOutside)\n    return () => document.removeEventListener('mousedown', handleClickOutside)\n  }, [])\n\n  return (\n    <div ref={node} className={clsx('relative inline-block', className)}>\n      <button\n        className={clsx('p-2 rounded-full', {\n          'hover:bg-primary hover:bg-opacity-25': !showDropdown,\n          'bg-primary text-white': showDropdown,\n        })}\n        onClick={toggleDropdown}\n      >\n        {buttonLabel}\n      </button>\n      {showDropdown && (\n        <div className=\"absolute right-0 mt-1 bg-white dark:bg-gray-800 border dark:border-gray-700 rounded shadow-md p-2 space-y-2\">\n          {children}\n        </div>\n      )}\n    </div>\n  )\n}\n\nexport default Dropdown\n"]},"metadata":{},"sourceType":"module"}