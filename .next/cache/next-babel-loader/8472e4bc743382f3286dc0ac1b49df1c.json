{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  padding: 1rem;\\n\\n  table {\\n    /* border-spacing: 0; */\\n    /* border: 1px solid black; */\\n\\n    thead tr {\\n      border: none !important;\\n      background: none !important;\\n      border-radius: none !important;\\n    }\\n\\n    tbody {\\n      tr {\\n        border-radius: 1rem;\\n        padding: 1.5rem;\\n        margin: 0.5rem 0;\\n        box-shadow: 0 3px 6px rgba(0, 0, 0, 0.07), 0 2px 4px rgba(0, 0, 0, 0.05);\\n        transition: transform 0.5s -webkit-transform 0.5s;\\n        :last-child {\\n          border-radius: 1rem;\\n          td {\\n            /* border-bottom: 0; */\\n          }\\n        }\\n      }\\n    }\\n\\n    th,\\n    td {\\n      margin: 0;\\n      padding: 0.5rem;\\n      /* border-bottom: 1px solid black;\\n      border-right: 1px solid black; */\\n\\n      :last-child {\\n        border-right: 0;\\n      }\\n\\n      input {\\n        font-size: 1rem;\\n        padding: 0;\\n        margin: 0;\\n        border: 0;\\n      }\\n    }\\n\\n    .pagination {\\n      padding: 0.5rem;\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useEffect, useState } from 'react';\nimport { useTable, usePagination, useRowSelect, useSortBy, useFilters, useColumnOrder, useGlobalFilter, useAsyncDebounce } from 'react-table';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport styled from 'styled-components';\nvar Styles = styled.div(_templateObject());\n_c = Styles;\n\nfunction TableComponent(_ref) {\n  _s();\n\n  var columns = _ref.columns,\n      data = _ref.data,\n      setData = _ref.setData,\n      tableClassName = _ref.tableClassName,\n      rest = _objectWithoutProperties(_ref, [\"columns\", \"data\", \"setData\", \"tableClassName\"]);\n\n  var _useState = useState(false),\n      skipPageReset = _useState[0],\n      setSkipPageReset = _useState[1]; // We need to keep the table from resetting the pageIndex when we\n  // Update data. So we can keep track of that flag with a ref.\n  // When our cell renderer calls updateMyData, we'll use\n  // the rowIndex, columnId and new value to update the\n  // original data\n\n\n  var updateData = function updateData(rowIndex, columnId, value) {\n    // We also turn on the flag to not reset the page\n    setSkipPageReset(true);\n    setData(function (old) {\n      return old.map(function (row, index) {\n        if (index === rowIndex) {\n          return _objectSpread(_objectSpread({}, old[rowIndex]), {}, _defineProperty({}, columnId, value));\n        }\n\n        return row;\n      });\n    });\n  }; // After data chagnes, we turn the flag back off\n  // so that if data actually changes when we're not\n  // editing it, the page is reset\n\n\n  useEffect(function () {\n    setSkipPageReset(false);\n  }, [data]);\n  var tableOptions = {};\n  Array.from(['renderHeader', 'renderFilter', 'renderTableBody', 'renderTableRow', 'renderTableCell', 'defaultColumn', 'globalFilter', 'handleTableControls', 'customHook']).forEach(function (option) {\n    if (rest[option]) {\n      tableOptions[option] = rest[option];\n    }\n  });\n  return __jsx(Styles, null, __jsx(Table, {\n    tableClassName: tableClassName,\n    columns: columns,\n    data: data,\n    updateData: updateData,\n    skipPageReset: skipPageReset,\n    options: _objectSpread({}, tableOptions)\n  }));\n}\n\n_s(TableComponent, \"sA641OB1DfZVk+1S50kd2PP+SoU=\");\n\n_c2 = TableComponent;\nexport default TableComponent; // Be sure to pass our updateData and the skipPageReset option\n\nfunction Table(_ref2) {\n  _s2();\n\n  var columns = _ref2.columns,\n      data = _ref2.data,\n      updateData = _ref2.updateData,\n      skipPageReset = _ref2.skipPageReset,\n      options = _ref2.options,\n      tableClassName = _ref2.tableClassName;\n\n  var _ref3 = options || {},\n      filterTypes = _ref3.filterTypes,\n      defaultColumn = _ref3.defaultColumn,\n      globalFilter = _ref3.globalFilter,\n      renderHeader = _ref3.renderHeader,\n      renderFilter = _ref3.renderFilter,\n      renderTableRow = _ref3.renderTableRow,\n      renderTableCell = _ref3.renderTableCell,\n      handleTableControls = _ref3.handleTableControls,\n      customHook = _ref3.customHook;\n\n  var extraHook = function extraHook(hooks) {\n    hooks.visibleColumns.push(function (columns) {\n      return _toConsumableArray(columns);\n    });\n  };\n\n  if (customHook) extraHook = customHook;\n  var hookOptions = {};\n  if (filterTypes) hookOptions.filterTypes = filterTypes;\n  if (defaultColumn) hookOptions.defaultColumn = defaultColumn;else hookOptions.defaultColumn = {};\n\n  var _useTable = useTable(_objectSpread({\n    columns: columns,\n    data: data,\n    // use the skipPageReset option to disable page resetting temporarily\n    autoResetPage: !skipPageReset,\n    updateData: updateData\n  }, hookOptions), useColumnOrder, useFilters, useGlobalFilter, useSortBy, usePagination, useRowSelect, extraHook),\n      getTableProps = _useTable.getTableProps,\n      getTableBodyProps = _useTable.getTableBodyProps,\n      headerGroups = _useTable.headerGroups,\n      prepareRow = _useTable.prepareRow,\n      page = _useTable.page,\n      canPreviousPage = _useTable.canPreviousPage,\n      canNextPage = _useTable.canNextPage,\n      pageOptions = _useTable.pageOptions,\n      pageCount = _useTable.pageCount,\n      gotoPage = _useTable.gotoPage,\n      nextPage = _useTable.nextPage,\n      previousPage = _useTable.previousPage,\n      setGlobalFilter = _useTable.setGlobalFilter,\n      setPageSize = _useTable.setPageSize,\n      selectedFlatRows = _useTable.selectedFlatRows,\n      visibleColumns = _useTable.visibleColumns,\n      preGlobalFilteredRows = _useTable.preGlobalFilteredRows,\n      state = _useTable.state;\n\n  var pageIndex = state.pageIndex,\n      pageSize = state.pageSize,\n      selectedRowIds = state.selectedRowIds;\n  var spring = React.useMemo(function () {\n    return {\n      type: 'spring',\n      damping: 50,\n      stiffness: 100\n    };\n  }, []);\n  var controls = {\n    getTableProps: getTableProps,\n    getTableBodyProps: getTableBodyProps,\n    headerGroups: headerGroups,\n    prepareRow: prepareRow,\n    page: page,\n    canPreviousPage: canPreviousPage,\n    canNextPage: canNextPage,\n    pageOptions: pageOptions,\n    pageCount: pageCount,\n    gotoPage: gotoPage,\n    nextPage: nextPage,\n    previousPage: previousPage,\n    setGlobalFilter: setGlobalFilter,\n    // setGlobalFilteredRows,\n    setPageSize: setPageSize,\n    selectedFlatRows: selectedFlatRows,\n    visibleColumns: visibleColumns,\n    preGlobalFilteredRows: preGlobalFilteredRows,\n    // setColumnOrder,\n    state: state\n  };\n\n  if (handleTableControls && handleTableControls.beforeTableRender) {\n    return handleTableControls.beforeTableRender(controls);\n  } // Render the UI for your table\n\n\n  return __jsx(React.Fragment, null, handleTableControls && handleTableControls.jsx && handleTableControls.jsx(controls), __jsx(\"table\", _extends({}, getTableProps(), {\n    className: tableClassName || ''\n  }), __jsx(\"thead\", null, headerGroups.map(function (headerGroup) {\n    return __jsx(\"tr\", headerGroup.getHeaderGroupProps(), headerGroup.headers.map(function (column) {\n      return __jsx(motion.th, column.getHeaderProps({\n        layoutTransition: spring,\n        style: {}\n      }), __jsx(\"div\", column.getSortByToggleProps(), renderHeader ? renderHeader(column) : __jsx(React.Fragment, null, column.render('Header'), __jsx(\"span\", null, column.isSorted ? column.isSortedDesc ? ' ðŸ”½' : ' ðŸ”¼' : ''))), __jsx(\"div\", null, column.canFilter && filterTypes ? renderFilter ? renderFilter(column) : column.render('Filter') : null));\n    }));\n  }), (globalFilter === null || globalFilter === void 0 ? void 0 : globalFilter.use) && __jsx(\"tr\", null, __jsx(\"th\", {\n    colSpan: visibleColumns.length,\n    style: {\n      textAlign: 'left'\n    }\n  }, __jsx(globalFilter.Component, {\n    preGlobalFilteredRows: preGlobalFilteredRows,\n    globalFilter: state.globalFilter,\n    setGlobalFilter: setGlobalFilter\n  })))), __jsx(\"tbody\", getTableBodyProps(), __jsx(AnimatePresence, null, renderTableRow ? renderTableRow(page, prepareRow) : page.map(function (row, i) {\n    prepareRow(row);\n    return __jsx(motion.tr, row.getRowProps({\n      layoutTransition: spring,\n      exit: {\n        opacity: 0,\n        maxHeight: 0\n      }\n    }), row.cells.map(function (cell, i) {\n      return __jsx(motion.td, cell.getCellProps({\n        layoutTransition: spring\n      }), renderTableCell ? renderTableCell(cell) : cell.render('Cell'));\n    }));\n  })))), __jsx(\"div\", {\n    className: \"mt-2 pagination\"\n  }, __jsx(\"button\", {\n    onClick: function onClick() {\n      return gotoPage(0);\n    },\n    className: \"\".concat(!canPreviousPage ? 'opacity-25' : ''),\n    disabled: !canPreviousPage\n  }, '<<'), ' ', __jsx(\"button\", {\n    onClick: function onClick() {\n      return previousPage();\n    },\n    className: \"\".concat(!canPreviousPage ? 'opacity-25' : ''),\n    disabled: !canPreviousPage\n  }, '<'), ' ', __jsx(\"button\", {\n    onClick: function onClick() {\n      return nextPage();\n    },\n    disabled: !canNextPage,\n    className: \"\".concat(!canNextPage ? 'opacity-25' : '')\n  }, '>'), ' ', __jsx(\"button\", {\n    onClick: function onClick() {\n      return gotoPage(pageCount - 1);\n    },\n    disabled: !canNextPage,\n    className: \"\".concat(!canNextPage ? 'opacity-25' : '')\n  }, '>>'), ' ', (pageOptions === null || pageOptions === void 0 ? void 0 : pageOptions.length) > 1 && __jsx(React.Fragment, null, __jsx(\"span\", {\n    className: \"text-sm\"\n  }, \"Page\", ' ', __jsx(\"strong\", null, pageIndex + 1, \" of \", pageOptions.length), ' '), __jsx(\"span\", null, \"| Go to page:\", ' ', __jsx(\"input\", {\n    type: \"number\",\n    defaultValue: pageIndex + 1,\n    onChange: function onChange(e) {\n      var page = e.target.value ? Number(e.target.value) - 1 : 0;\n      gotoPage(page);\n    },\n    style: {\n      width: '100px'\n    }\n  }))), __jsx(\"select\", {\n    value: pageSize,\n    className: \"px-2 mx-4 text-sm\",\n    onChange: function onChange(e) {\n      setPageSize(Number(e.target.value));\n    }\n  }, [10, 20, 30, 40, 50].map(function (pageSize) {\n    return __jsx(\"option\", {\n      key: pageSize,\n      value: pageSize\n    }, \"Show \", pageSize);\n  }))));\n}\n\n_s2(Table, \"bRSySUf2yVXwcmDOCyxnbOEWCOc=\", false, function () {\n  return [useTable];\n});\n\n_c3 = Table;\nexport { useAsyncDebounce };\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Styles\");\n$RefreshReg$(_c2, \"TableComponent\");\n$RefreshReg$(_c3, \"Table\");","map":{"version":3,"sources":["/mnt/c/Users/arash/Documents/DevInDoc/Getaboard/demoEmail/reward-test/src/components/Table.tsx"],"names":["React","useEffect","useState","useTable","usePagination","useRowSelect","useSortBy","useFilters","useColumnOrder","useGlobalFilter","useAsyncDebounce","motion","AnimatePresence","styled","Styles","div","TableComponent","columns","data","setData","tableClassName","rest","skipPageReset","setSkipPageReset","updateData","rowIndex","columnId","value","old","map","row","index","tableOptions","Array","from","forEach","option","Table","options","filterTypes","defaultColumn","globalFilter","renderHeader","renderFilter","renderTableRow","renderTableCell","handleTableControls","customHook","extraHook","hooks","visibleColumns","push","hookOptions","autoResetPage","getTableProps","getTableBodyProps","headerGroups","prepareRow","page","canPreviousPage","canNextPage","pageOptions","pageCount","gotoPage","nextPage","previousPage","setGlobalFilter","setPageSize","selectedFlatRows","preGlobalFilteredRows","state","pageIndex","pageSize","selectedRowIds","spring","useMemo","type","damping","stiffness","controls","beforeTableRender","jsx","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","layoutTransition","style","getSortByToggleProps","render","isSorted","isSortedDesc","canFilter","use","length","textAlign","i","getRowProps","exit","opacity","maxHeight","cells","cell","getCellProps","e","target","Number","width"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport XLSX from 'xlsx'\n\nimport {\n  useTable,\n  usePagination,\n  useRowSelect,\n  useSortBy,\n  useFilters,\n  useColumnOrder,\n  useGlobalFilter,\n  useAsyncDebounce,\n} from 'react-table'\nimport { motion, AnimatePresence } from 'framer-motion'\nimport matchSorter from 'match-sorter'\n\nimport styled from 'styled-components'\nimport Input from './Input'\nimport Checkbox from './Checkbox'\n\nexport interface Props {\n  className?: string | Record<string, unknown>\n  ordered?: boolean\n  item?: boolean\n}\n\nexport interface gFilterProps {\n  preGlobalFilteredRows: unknown\n  globalFilter: unknown\n  setGlobalFilter: unknown\n}\n\nexport type gFilterState = unknown\n\nexport type filterColumnProps = unknown\n\nexport type FilterType = {\n  fuzzyText: unknown\n  text: (rows: unknown, id: unknown, filterValue: unknown) => unknown\n}\n\nexport type DefaultColumn = {\n  Filter?: ({\n    column: { filterValue, preFilteredRows, setFilter },\n  }: {\n    column: {\n      filterValue: unknown\n      preFilteredRows: unknown\n      setFilter: unknown\n    }\n  }) => JSX.Element\n  Cell?: ({\n    value: initialValue,\n    row: { index },\n    column,\n    updateData,\n  }: {\n    value: unknown\n    row: {\n      index: unknown\n    }\n    column: unknown\n    updateData: (index, id, value) => unknown\n  }) => unknown\n}\n\nexport type GlobalFilter = {\n  use: boolean\n  Component: ({\n    preGlobalFilteredRows,\n    globalFilter,\n    setGlobalFilter,\n  }) => JSX.Element\n}\n\nexport interface TableOptions {\n  tableClassName?: string\n  filterTypes?: FilterType\n  defaultColumn?: DefaultColumn\n  globalFilter?: GlobalFilter\n  renderHeader?: (header: unknown) => JSX.Element\n  renderFilter?: (column: unknown) => JSX.Element\n  renderTableBody?: (column: unknown) => JSX.Element\n  renderTableRow?: (row: unknown, prepareTableRow: unknown) => JSX.Element\n  renderTableCell?: (cell: unknown) => JSX.Element\n  handleTableControls?: {\n    beforeTableRender?: (controls: unknown) => JSX.Element\n    jsx?: (controls) => JSX.Element\n  }\n  customHook?: (hooks: unknown) => unknown\n}\n\nconst Styles = styled.div`\n  padding: 1rem;\n\n  table {\n    /* border-spacing: 0; */\n    /* border: 1px solid black; */\n\n    thead tr {\n      border: none !important;\n      background: none !important;\n      border-radius: none !important;\n    }\n\n    tbody {\n      tr {\n        border-radius: 1rem;\n        padding: 1.5rem;\n        margin: 0.5rem 0;\n        box-shadow: 0 3px 6px rgba(0, 0, 0, 0.07), 0 2px 4px rgba(0, 0, 0, 0.05);\n        transition: transform 0.5s -webkit-transform 0.5s;\n        :last-child {\n          border-radius: 1rem;\n          td {\n            /* border-bottom: 0; */\n          }\n        }\n      }\n    }\n\n    th,\n    td {\n      margin: 0;\n      padding: 0.5rem;\n      /* border-bottom: 1px solid black;\n      border-right: 1px solid black; */\n\n      :last-child {\n        border-right: 0;\n      }\n\n      input {\n        font-size: 1rem;\n        padding: 0;\n        margin: 0;\n        border: 0;\n      }\n    }\n\n    .pagination {\n      padding: 0.5rem;\n    }\n  }\n`\n\nfunction TableComponent({\n  columns,\n  data,\n  setData,\n  tableClassName,\n  ...rest\n}: {\n  columns: {\n    Header?: string\n    columns: {\n      Header: string\n      accessor: string\n      Cell?: unknown\n    }[]\n  }[]\n  data: Record<string, unknown>\n  setData: React.Dispatch<unknown>\n} & TableOptions) {\n  const [skipPageReset, setSkipPageReset] = useState(false)\n\n  // We need to keep the table from resetting the pageIndex when we\n  // Update data. So we can keep track of that flag with a ref.\n\n  // When our cell renderer calls updateMyData, we'll use\n  // the rowIndex, columnId and new value to update the\n  // original data\n  const updateData = (rowIndex, columnId, value) => {\n    // We also turn on the flag to not reset the page\n    setSkipPageReset(true)\n    setData((old) =>\n      old.map((row, index) => {\n        if (index === rowIndex) {\n          return {\n            ...old[rowIndex],\n            [columnId]: value,\n          }\n        }\n        return row\n      })\n    )\n  }\n\n  // After data chagnes, we turn the flag back off\n  // so that if data actually changes when we're not\n  // editing it, the page is reset\n  useEffect(() => {\n    setSkipPageReset(false)\n  }, [data])\n\n  const tableOptions: TableOptions = {}\n\n  Array.from([\n    'renderHeader',\n    'renderFilter',\n    'renderTableBody',\n    'renderTableRow',\n    'renderTableCell',\n    'defaultColumn',\n    'globalFilter',\n    'handleTableControls',\n    'customHook',\n  ]).forEach((option) => {\n    if (rest[option]) {\n      tableOptions[option] = rest[option]\n    }\n  })\n\n  return (\n    <Styles>\n      <Table\n        tableClassName={tableClassName}\n        columns={columns}\n        data={data}\n        updateData={updateData}\n        skipPageReset={skipPageReset}\n        options={{ ...tableOptions }}\n      />\n    </Styles>\n  )\n}\n\nexport default TableComponent\n\n// Be sure to pass our updateData and the skipPageReset option\nfunction Table({\n  columns,\n  data,\n  updateData,\n  skipPageReset,\n  options,\n  tableClassName,\n}) {\n  const {\n    filterTypes,\n    defaultColumn,\n    globalFilter,\n    renderHeader,\n    renderFilter,\n    // renderTableBody,\n    renderTableRow,\n    renderTableCell,\n    handleTableControls,\n    customHook,\n  }: TableOptions = options || {}\n\n  let extraHook = (hooks) => {\n    hooks.visibleColumns.push((columns) => [...columns])\n  }\n  if (customHook) extraHook = customHook\n\n  const hookOptions: {\n    filterTypes?: FilterType\n    defaultColumn?: DefaultColumn\n  } = {}\n\n  if (filterTypes) hookOptions.filterTypes = filterTypes\n  if (defaultColumn) hookOptions.defaultColumn = defaultColumn\n  else hookOptions.defaultColumn = {}\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    prepareRow,\n    page,\n    canPreviousPage,\n    canNextPage,\n    pageOptions,\n    pageCount,\n    gotoPage,\n    nextPage,\n    previousPage,\n    setGlobalFilter,\n    // setGlobalFilteredRows,\n    setPageSize,\n    selectedFlatRows,\n    visibleColumns,\n    preGlobalFilteredRows,\n    // setColumnOrder,\n    state,\n  } = useTable(\n    {\n      columns,\n      data,\n      // use the skipPageReset option to disable page resetting temporarily\n      autoResetPage: !skipPageReset,\n      updateData,\n      ...hookOptions,\n    },\n    useColumnOrder,\n    useFilters,\n    useGlobalFilter,\n    useSortBy,\n    usePagination,\n    useRowSelect,\n    extraHook\n  )\n\n  const { pageIndex, pageSize, selectedRowIds } = state\n\n  const spring = React.useMemo(\n    () => ({\n      type: 'spring',\n      damping: 50,\n      stiffness: 100,\n    }),\n    []\n  )\n\n  const controls = {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    prepareRow,\n    page,\n    canPreviousPage,\n    canNextPage,\n    pageOptions,\n    pageCount,\n    gotoPage,\n    nextPage,\n    previousPage,\n    setGlobalFilter,\n    // setGlobalFilteredRows,\n    setPageSize,\n    selectedFlatRows,\n    visibleColumns,\n    preGlobalFilteredRows,\n    // setColumnOrder,\n    state,\n  }\n\n  if (handleTableControls && handleTableControls.beforeTableRender) {\n    return handleTableControls.beforeTableRender(controls)\n  }\n\n  // Render the UI for your table\n  return (\n    <>\n      {handleTableControls &&\n        handleTableControls.jsx &&\n        handleTableControls.jsx(controls)}\n      <table {...getTableProps()} className={tableClassName || ''}>\n        <thead>\n          {headerGroups.map((headerGroup) => (\n            <tr {...headerGroup.getHeaderGroupProps()}>\n              {headerGroup.headers.map((column) => (\n                <motion.th\n                  {...column.getHeaderProps({\n                    layoutTransition: spring,\n                    style: {},\n                  })}\n                >\n                  <div {...column.getSortByToggleProps()}>\n                    {renderHeader ? (\n                      renderHeader(column)\n                    ) : (\n                      <>\n                        {column.render('Header')}\n                        <span>\n                          {column.isSorted\n                            ? column.isSortedDesc\n                              ? ' ðŸ”½'\n                              : ' ðŸ”¼'\n                            : ''}\n                        </span>\n                      </>\n                    )}\n                  </div>\n                  <div>\n                    {column.canFilter && filterTypes\n                      ? renderFilter\n                        ? renderFilter(column)\n                        : column.render('Filter')\n                      : null}\n                  </div>\n                </motion.th>\n              ))}\n            </tr>\n          ))}\n          {globalFilter?.use && (\n            <tr>\n              <th\n                colSpan={visibleColumns.length}\n                style={{\n                  textAlign: 'left',\n                }}\n              >\n                {/* @ts-ignore */}\n                <globalFilter.Component\n                  preGlobalFilteredRows={preGlobalFilteredRows}\n                  globalFilter={state.globalFilter}\n                  setGlobalFilter={setGlobalFilter}\n                />\n              </th>\n            </tr>\n          )}\n        </thead>\n        <tbody {...getTableBodyProps()}>\n          <AnimatePresence>\n            {renderTableRow\n              ? renderTableRow(page, prepareRow)\n              : page.map((row, i) => {\n                  prepareRow(row)\n                  return (\n                    <motion.tr\n                      {...row.getRowProps({\n                        layoutTransition: spring,\n                        exit: { opacity: 0, maxHeight: 0 },\n                      })}\n                    >\n                      {row.cells.map((cell, i) => {\n                        return (\n                          <motion.td\n                            {...cell.getCellProps({\n                              layoutTransition: spring,\n                            })}\n                          >\n                            {renderTableCell\n                              ? renderTableCell(cell)\n                              : cell.render('Cell')}\n                          </motion.td>\n                        )\n                      })}\n                    </motion.tr>\n                  )\n                })}\n          </AnimatePresence>\n        </tbody>\n      </table>\n      <div className=\"mt-2 pagination\">\n        <button\n          onClick={() => gotoPage(0)}\n          className={`${!canPreviousPage ? 'opacity-25' : ''}`}\n          disabled={!canPreviousPage}\n        >\n          {'<<'}\n        </button>{' '}\n        <button\n          onClick={() => previousPage()}\n          className={`${!canPreviousPage ? 'opacity-25' : ''}`}\n          disabled={!canPreviousPage}\n        >\n          {'<'}\n        </button>{' '}\n        <button\n          onClick={() => nextPage()}\n          disabled={!canNextPage}\n          className={`${!canNextPage ? 'opacity-25' : ''}`}\n        >\n          {'>'}\n        </button>{' '}\n        <button\n          onClick={() => gotoPage(pageCount - 1)}\n          disabled={!canNextPage}\n          className={`${!canNextPage ? 'opacity-25' : ''}`}\n        >\n          {'>>'}\n        </button>{' '}\n        {pageOptions?.length > 1 && (\n          <>\n            <span className=\"text-sm\">\n              Page{' '}\n              <strong>\n                {pageIndex + 1} of {pageOptions.length}\n              </strong>{' '}\n            </span>\n            <span>\n              | Go to page:{' '}\n              <input\n                type=\"number\"\n                defaultValue={pageIndex + 1}\n                onChange={(e) => {\n                  const page = e.target.value ? Number(e.target.value) - 1 : 0\n                  gotoPage(page)\n                }}\n                style={{\n                  width: '100px',\n                }}\n              />\n            </span>\n          </>\n        )}\n        <select\n          value={pageSize}\n          className=\"px-2 mx-4 text-sm\"\n          onChange={(e) => {\n            setPageSize(Number(e.target.value))\n          }}\n        >\n          {[10, 20, 30, 40, 50].map((pageSize) => (\n            <option key={pageSize} value={pageSize}>\n              Show {pageSize}\n            </option>\n          ))}\n        </select>\n      </div>\n    </>\n  )\n}\n\nexport { useAsyncDebounce }\n"]},"metadata":{},"sourceType":"module"}