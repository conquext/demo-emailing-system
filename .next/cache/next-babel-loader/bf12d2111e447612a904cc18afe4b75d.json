{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _jsxFileName = \"/mnt/c/Users/arash/Documents/DevInDoc/Getaboard/demoEmail/reward-test/src/components/Table.tsx\",\n    _s = $RefreshSig$(),\n    _this = this,\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  padding: 1rem;\\n\\n  table {\\n    border-spacing: 0;\\n    border: 1px solid black;\\n\\n    tr {\\n      :last-child {\\n        td {\\n          border-bottom: 0;\\n        }\\n      }\\n    }\\n\\n    th,\\n    td {\\n      margin: 0;\\n      padding: 0.5rem;\\n      border-bottom: 1px solid black;\\n      border-right: 1px solid black;\\n\\n      :last-child {\\n        border-right: 0;\\n      }\\n\\n      input {\\n        font-size: 1rem;\\n        padding: 0;\\n        margin: 0;\\n        border: 0;\\n      }\\n    }\\n\\n    .pagination {\\n      padding: 0.5rem;\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useEffect, useState } from 'react';\nimport { useTable, usePagination } from 'react-table';\nimport styled from 'styled-components';\nvar Styles = styled.div(_templateObject());\n_c = Styles;\n\nfunction TableComponent(_ref) {\n  _s();\n\n  var columns = _ref.columns,\n      data = _ref.data,\n      setData = _ref.setData,\n      editableFields = _ref.editableFields;\n\n  var _useState = useState(false),\n      skipPageReset = _useState[0],\n      setSkipPageReset = _useState[1]; // We need to keep the table from resetting the pageIndex when we\n  // Update data. So we can keep track of that flag with a ref.\n  // When our cell renderer calls updateMyData, we'll use\n  // the rowIndex, columnId and new value to update the\n  // original data\n\n\n  var updateData = function updateData(rowIndex, columnId, value) {\n    // We also turn on the flag to not reset the page\n    setSkipPageReset(true);\n    setData(function (old) {\n      return old.map(function (row, index) {\n        if (index === rowIndex) {\n          return _objectSpread(_objectSpread({}, old[rowIndex]), {}, _defineProperty({}, columnId, value));\n        }\n\n        return row;\n      });\n    });\n  }; // After data chagnes, we turn the flag back off\n  // so that if data actually changes when we're not\n  // editing it, the page is reset\n\n\n  useEffect(function () {\n    setSkipPageReset(false);\n  }, [data]);\n  return __jsx(Styles, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 5\n    }\n  }, __jsx(Table, {\n    columns: columns,\n    data: data,\n    updateData: updateData,\n    skipPageReset: skipPageReset,\n    editableFields: editableFields,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }\n  }));\n}\n\n_s(TableComponent, \"sA641OB1DfZVk+1S50kd2PP+SoU=\");\n\n_c2 = TableComponent;\nexport default TableComponent; // Create an editable cell renderer\n\nvar EditableCell = function EditableCell(_ref2) {\n  _s2();\n\n  var initialValue = _ref2.value,\n      index = _ref2.row.index,\n      id = _ref2.column.id,\n      updateData = _ref2.updateData,\n      rest = _objectWithoutProperties(_ref2, [\"value\", \"row\", \"column\", \"updateData\"]);\n\n  console.log(' them edit', initialValue, index, id, rest); // We need to keep and update the state of the cell normally\n\n  var _useState2 = useState(initialValue),\n      value = _useState2[0],\n      setValue = _useState2[1];\n\n  var onChange = function onChange(e) {\n    setValue(e.target.value);\n  }; // We'll only update the external data when the input is blurred\n\n\n  var onBlur = function onBlur() {\n    updateData(index, id, value);\n  }; // If the initialValue is changed external, sync it up with our state\n\n\n  useEffect(function () {\n    setValue(initialValue);\n  }, [initialValue]);\n  return __jsx(\"input\", {\n    value: value,\n    onChange: onChange,\n    onBlur: onBlur,\n    className: \"w-full bg-transparent\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 5\n    }\n  });\n}; // Set our editable cell renderer as the default Cell renderer\n\n\n_s2(EditableCell, \"tWiMN+R1KrlPc+I/v9D+hnPBFtc=\");\n\n_c3 = EditableCell;\nvar defaultColumn = {\n  Cell: EditableCell\n}; // Be sure to pass our updateData and the skipPageReset option\n\nfunction Table(_ref3) {\n  _s3();\n\n  var _this2 = this;\n\n  var columns = _ref3.columns,\n      data = _ref3.data,\n      updateData = _ref3.updateData,\n      skipPageReset = _ref3.skipPageReset,\n      editableFields = _ref3.editableFields;\n\n  var _useTable = useTable({\n    columns: columns,\n    data: data,\n    defaultColumn: defaultColumn,\n    // use the skipPageReset option to disable page resetting temporarily\n    autoResetPage: !skipPageReset,\n    updateData: updateData\n  }, usePagination),\n      getTableProps = _useTable.getTableProps,\n      getTableBodyProps = _useTable.getTableBodyProps,\n      headerGroups = _useTable.headerGroups,\n      prepareRow = _useTable.prepareRow,\n      page = _useTable.page,\n      canPreviousPage = _useTable.canPreviousPage,\n      canNextPage = _useTable.canNextPage,\n      pageOptions = _useTable.pageOptions,\n      pageCount = _useTable.pageCount,\n      gotoPage = _useTable.gotoPage,\n      nextPage = _useTable.nextPage,\n      previousPage = _useTable.previousPage,\n      setPageSize = _useTable.setPageSize,\n      _useTable$state = _useTable.state,\n      pageIndex = _useTable$state.pageIndex,\n      pageSize = _useTable$state.pageSize;\n\n  function callDebugger(data) {\n    debugger;\n  } // Render the UI for your table\n\n\n  return __jsx(React.Fragment, null, __jsx(\"table\", _extends({}, getTableProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 7\n    }\n  }), __jsx(\"thead\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 9\n    }\n  }, headerGroups.map(function (headerGroup) {\n    return __jsx(\"tr\", _extends({}, headerGroup.getHeaderGroupProps(), {\n      __self: _this2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 13\n      }\n    }), headerGroup.headers.map(function (column) {\n      return __jsx(\"th\", _extends({}, column.getHeaderProps(), {\n        __self: _this2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 17\n        }\n      }), column.render('Header'));\n    }));\n  })), __jsx(\"tbody\", _extends({}, getTableBodyProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 9\n    }\n  }), page.map(function (row, i) {\n    prepareRow(row);\n    return __jsx(\"tr\", _extends({}, row.getRowProps(), {\n      __self: _this2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 15\n      }\n    }), row.cells.map(function (cell) {\n      return __jsx(\"td\", _extends({}, cell.getCellProps(), {\n        __self: _this2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 26\n        }\n      }), cell.render('Cell'));\n    }));\n  }))), __jsx(\"div\", {\n    className: \"pagination\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 7\n    }\n  }, __jsx(\"button\", {\n    onClick: function onClick() {\n      return gotoPage(0);\n    },\n    disabled: !canPreviousPage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 9\n    }\n  }, '<<'), ' ', __jsx(\"button\", {\n    onClick: function onClick() {\n      return previousPage();\n    },\n    disabled: !canPreviousPage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 9\n    }\n  }, '<'), ' ', __jsx(\"button\", {\n    onClick: function onClick() {\n      return nextPage();\n    },\n    disabled: !canNextPage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 9\n    }\n  }, '>'), ' ', __jsx(\"button\", {\n    onClick: function onClick() {\n      return gotoPage(pageCount - 1);\n    },\n    disabled: !canNextPage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 9\n    }\n  }, '>>'), ' ', __jsx(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 9\n    }\n  }, \"Page\", ' ', __jsx(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 11\n    }\n  }, pageIndex + 1, \" of \", pageOptions.length), ' '), __jsx(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 9\n    }\n  }, \"| Go to page:\", ' ', __jsx(\"input\", {\n    type: \"number\",\n    defaultValue: pageIndex + 1,\n    onChange: function onChange(e) {\n      var page = e.target.value ? Number(e.target.value) - 1 : 0;\n      gotoPage(page);\n    },\n    style: {\n      width: '100px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 11\n    }\n  })), ' ', __jsx(\"select\", {\n    value: pageSize,\n    onChange: function onChange(e) {\n      setPageSize(Number(e.target.value));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 9\n    }\n  }, [10, 20, 30, 40, 50].map(function (pageSize) {\n    return __jsx(\"option\", {\n      key: pageSize,\n      value: pageSize,\n      __self: _this2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 13\n      }\n    }, \"Show \", pageSize);\n  }))));\n}\n\n_s3(Table, \"JI8Fu8DOlDYS7rqqAlOOkpg3H7Y=\", false, function () {\n  return [useTable];\n});\n\n_c4 = Table;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"Styles\");\n$RefreshReg$(_c2, \"TableComponent\");\n$RefreshReg$(_c3, \"EditableCell\");\n$RefreshReg$(_c4, \"Table\");","map":{"version":3,"sources":["/mnt/c/Users/arash/Documents/DevInDoc/Getaboard/demoEmail/reward-test/src/components/Table.tsx"],"names":["React","useEffect","useState","useTable","usePagination","styled","Styles","div","TableComponent","columns","data","setData","editableFields","skipPageReset","setSkipPageReset","updateData","rowIndex","columnId","value","old","map","row","index","EditableCell","initialValue","id","column","rest","console","log","setValue","onChange","e","target","onBlur","defaultColumn","Cell","Table","autoResetPage","getTableProps","getTableBodyProps","headerGroups","prepareRow","page","canPreviousPage","canNextPage","pageOptions","pageCount","gotoPage","nextPage","previousPage","setPageSize","state","pageIndex","pageSize","callDebugger","headerGroup","getHeaderGroupProps","headers","getHeaderProps","render","i","getRowProps","cells","cell","getCellProps","length","Number","width"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport clsx from 'clsx'\nimport { useTable, usePagination } from 'react-table'\nimport styled from 'styled-components'\nimport Input from './Input'\n\nexport interface Props {\n  className?: string | Record<string, unknown>\n  ordered?: boolean\n  item?: boolean\n}\n\nconst Styles = styled.div`\n  padding: 1rem;\n\n  table {\n    border-spacing: 0;\n    border: 1px solid black;\n\n    tr {\n      :last-child {\n        td {\n          border-bottom: 0;\n        }\n      }\n    }\n\n    th,\n    td {\n      margin: 0;\n      padding: 0.5rem;\n      border-bottom: 1px solid black;\n      border-right: 1px solid black;\n\n      :last-child {\n        border-right: 0;\n      }\n\n      input {\n        font-size: 1rem;\n        padding: 0;\n        margin: 0;\n        border: 0;\n      }\n    }\n\n    .pagination {\n      padding: 0.5rem;\n    }\n  }\n`\n\nfunction TableComponent({\n  columns,\n  data,\n  setData,\n  editableFields,\n}: {\n  editableFields?: Array<unknown>\n  columns: {\n    Header?: string\n    columns: {\n      Header: string\n      accessor: string\n      Cell?: unknown\n    }[]\n  }[]\n  data: Record<string, unknown>\n  setData: React.Dispatch<unknown>\n}) {\n  const [skipPageReset, setSkipPageReset] = useState(false)\n\n  // We need to keep the table from resetting the pageIndex when we\n  // Update data. So we can keep track of that flag with a ref.\n\n  // When our cell renderer calls updateMyData, we'll use\n  // the rowIndex, columnId and new value to update the\n  // original data\n  const updateData = (rowIndex, columnId, value) => {\n    // We also turn on the flag to not reset the page\n    setSkipPageReset(true)\n    setData((old) =>\n      old.map((row, index) => {\n        if (index === rowIndex) {\n          return {\n            ...old[rowIndex],\n            [columnId]: value,\n          }\n        }\n        return row\n      })\n    )\n  }\n\n  // After data chagnes, we turn the flag back off\n  // so that if data actually changes when we're not\n  // editing it, the page is reset\n  useEffect(() => {\n    setSkipPageReset(false)\n  }, [data])\n\n  return (\n    <Styles>\n      <Table\n        columns={columns}\n        data={data}\n        updateData={updateData}\n        skipPageReset={skipPageReset}\n        editableFields={editableFields}\n      />\n    </Styles>\n  )\n}\n\nexport default TableComponent\n\n// Create an editable cell renderer\nconst EditableCell = ({\n  value: initialValue,\n  row: { index },\n  column: { id },\n  updateData, // This is a custom function that we supplied to our table instance\n  ...rest\n}) => {\n  console.log(' them edit', initialValue, index, id, rest)\n  // We need to keep and update the state of the cell normally\n  const [value, setValue] = useState(initialValue)\n\n  const onChange = (e) => {\n    setValue(e.target.value)\n  }\n\n  // We'll only update the external data when the input is blurred\n  const onBlur = () => {\n    updateData(index, id, value)\n  }\n\n  // If the initialValue is changed external, sync it up with our state\n  useEffect(() => {\n    setValue(initialValue)\n  }, [initialValue])\n\n  return (\n    <input\n      value={value}\n      onChange={onChange}\n      onBlur={onBlur}\n      className=\"w-full bg-transparent\"\n    />\n  )\n}\n\n// Set our editable cell renderer as the default Cell renderer\nconst defaultColumn = {\n  Cell: EditableCell,\n}\n\n// Be sure to pass our updateData and the skipPageReset option\nfunction Table({ columns, data, updateData, skipPageReset, editableFields }) {\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    prepareRow,\n    page,\n    canPreviousPage,\n    canNextPage,\n    pageOptions,\n    pageCount,\n    gotoPage,\n    nextPage,\n    previousPage,\n    setPageSize,\n    state: { pageIndex, pageSize },\n  } = useTable(\n    {\n      columns,\n      data,\n      defaultColumn,\n      // use the skipPageReset option to disable page resetting temporarily\n      autoResetPage: !skipPageReset,\n      updateData,\n    },\n    usePagination\n  )\n  function callDebugger(data) {\n    debugger\n  }\n  // Render the UI for your table\n  return (\n    <>\n      <table {...getTableProps()}>\n        <thead>\n          {headerGroups.map((headerGroup) => (\n            <tr {...headerGroup.getHeaderGroupProps()}>\n              {headerGroup.headers.map((column) => (\n                <th {...column.getHeaderProps()}>{column.render('Header')}</th>\n              ))}\n            </tr>\n          ))}\n        </thead>\n        <tbody {...getTableBodyProps()}>\n          {page.map((row, i) => {\n            prepareRow(row)\n            return (\n              <tr {...row.getRowProps()}>\n                {row.cells.map((cell) => {\n                  return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\n                })}\n              </tr>\n            )\n          })}\n        </tbody>\n      </table>\n      <div className=\"pagination\">\n        <button onClick={() => gotoPage(0)} disabled={!canPreviousPage}>\n          {'<<'}\n        </button>{' '}\n        <button onClick={() => previousPage()} disabled={!canPreviousPage}>\n          {'<'}\n        </button>{' '}\n        <button onClick={() => nextPage()} disabled={!canNextPage}>\n          {'>'}\n        </button>{' '}\n        <button onClick={() => gotoPage(pageCount - 1)} disabled={!canNextPage}>\n          {'>>'}\n        </button>{' '}\n        <span>\n          Page{' '}\n          <strong>\n            {pageIndex + 1} of {pageOptions.length}\n          </strong>{' '}\n        </span>\n        <span>\n          | Go to page:{' '}\n          <input\n            type=\"number\"\n            defaultValue={pageIndex + 1}\n            onChange={(e) => {\n              const page = e.target.value ? Number(e.target.value) - 1 : 0\n              gotoPage(page)\n            }}\n            style={{ width: '100px' }}\n          />\n        </span>{' '}\n        <select\n          value={pageSize}\n          onChange={(e) => {\n            setPageSize(Number(e.target.value))\n          }}\n        >\n          {[10, 20, 30, 40, 50].map((pageSize) => (\n            <option key={pageSize} value={pageSize}>\n              Show {pageSize}\n            </option>\n          ))}\n        </select>\n      </div>\n    </>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}