{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { useEffect, useState } from 'react';\nimport { useTable, usePagination, useRowSelect, useSortBy, useFilters, useColumnOrder, useGlobalFilter, useAsyncDebounce } from 'react-table';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport matchSorter from 'match-sorter';\nimport styled from 'styled-components';\nimport { isEmpty } from '@utils/helpers';\nconst Styles = styled.div`\n  padding: 1rem;\n\n  table {\n    /* border-spacing: 0; */\n    /* border: 1px solid black; */\n    border-collapse: separate;\n    border-style: 1em;\n    border-spacing: 1em;\n    /* border-spacing: 0 1em; */\n\n    thead tr {\n      :first-child {\n        display: none;\n      }\n      /* border: none !important; */\n      /* border-bottom: 2px solid; */\n      background: none !important;\n      border-radius: none !important;\n    }\n\n    tbody {\n      tr {\n        border-radius: 1rem;\n        padding: 1.5rem;\n\n        margin: 0.5rem 0;\n        box-shadow: 0 3px 6px rgba(0, 0, 0, 0.57), 0 2px 4px rgba(0, 0, 0, 0.05);\n        transition: transform 0.5s -webkit-transform 0.5s;\n        :last-child {\n          border-radius: 1rem;\n          td {\n            /* border-bottom: 0; */\n          }\n        }\n      }\n    }\n\n    th,\n    td {\n      margin: 0;\n      padding: 0.5rem;\n      /* border-bottom: 1px solid black;\n      border-right: 1px solid black; */\n\n      :last-child {\n        border-right: 0;\n      }\n\n      /* input {\n        font-size: 1rem;\n        padding: 0;\n        margin: 0;\n        border: 0;\n      } */\n    }\n\n    .pagination {\n      padding: 0.5rem;\n    }\n  }\n`;\n\nfunction TableComponent(_ref) {\n  let {\n    columns,\n    data,\n    setData,\n    loading,\n    tableClassName,\n    tableWrapper\n  } = _ref,\n      rest = _objectWithoutProperties(_ref, [\"columns\", \"data\", \"setData\", \"loading\", \"tableClassName\", \"tableWrapper\"]);\n\n  const {\n    0: skipPageReset,\n    1: setSkipPageReset\n  } = useState(false); // We need to keep the table from resetting the pageIndex when we\n  // Update data. So we can keep track of that flag with a ref.\n  // When our cell renderer calls updateMyData, we'll use\n  // the rowIndex, columnId and new value to update the\n  // original data\n\n  const updateData = (rowIndex, columnId, value) => {\n    // We also turn on the flag to not reset the page\n    setSkipPageReset(true);\n    setData(old => old.map((row, index) => {\n      if (index === rowIndex) {\n        return _objectSpread(_objectSpread({}, old[rowIndex]), {}, {\n          [columnId]: value\n        });\n      }\n\n      return row;\n    }));\n  }; // After data chagnes, we turn the flag back off\n  // so that if data actually changes when we're not\n  // editing it, the page is reset\n\n\n  useEffect(() => {\n    setSkipPageReset(false);\n  }, [data]);\n  const tableOptions = {};\n  Array.from(['renderHeader', 'renderFilter', 'renderTableBody', 'renderTableRow', 'renderExtraTableTd', 'renderTableCell', 'defaultColumn', 'globalFilter', 'handleTableControls', 'customHook']).forEach(option => {\n    if (rest[option]) {\n      tableOptions[option] = rest[option];\n    }\n  });\n  let TableWrapper = Styles;\n\n  if (tableWrapper.use) {\n    TableWrapper = tableWrapper.wrapper;\n  }\n\n  return __jsx(TableWrapper, tableWrapper.use && _objectSpread({}, tableWrapper.props), __jsx(Table, {\n    tableClassName: tableClassName,\n    columns: columns,\n    loading: loading,\n    data: data,\n    updateData: updateData,\n    skipPageReset: skipPageReset,\n    options: _objectSpread({}, tableOptions)\n  }));\n}\n\nexport default TableComponent; // Be sure to pass our updateData and the skipPageReset option\n\nfunction Table({\n  columns,\n  data,\n  updateData,\n  skipPageReset,\n  loading,\n  options,\n  tableClassName\n}) {\n  const {\n    filterTypes,\n    defaultColumn,\n    globalFilter,\n    renderHeader,\n    renderFilter,\n    // renderTableBody,\n    renderTableRow,\n    renderExtraTableTd,\n    renderTableCell,\n    handleTableControls,\n    customHook\n  } = options || {};\n\n  let extraHook = hooks => {\n    hooks.visibleColumns.push(columns => [...columns]);\n  };\n\n  if (customHook) extraHook = customHook;\n  const hookOptions = {};\n  if (filterTypes) hookOptions.filterTypes = filterTypes;\n  if (defaultColumn) hookOptions.defaultColumn = defaultColumn;else hookOptions.defaultColumn = {};\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    prepareRow,\n    page,\n    canPreviousPage,\n    canNextPage,\n    pageOptions,\n    pageCount,\n    gotoPage,\n    nextPage,\n    previousPage,\n    setGlobalFilter,\n    // setGlobalFilteredRows,\n    setPageSize,\n    selectedFlatRows,\n    visibleColumns,\n    preGlobalFilteredRows,\n    // setColumnOrder,\n    state\n  } = useTable(_objectSpread({\n    columns,\n    data,\n    // use the skipPageReset option to disable page resetting temporarily\n    autoResetPage: !skipPageReset,\n    updateData\n  }, hookOptions), useColumnOrder, useFilters, useGlobalFilter, useSortBy, usePagination, useRowSelect, extraHook);\n  const {\n    pageIndex,\n    pageSize,\n    selectedRowIds\n  } = state;\n  const spring = React.useMemo(() => ({\n    type: 'spring',\n    damping: 50,\n    stiffness: 100\n  }), []);\n  const controls = {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    prepareRow,\n    page,\n    canPreviousPage,\n    canNextPage,\n    pageOptions,\n    pageCount,\n    gotoPage,\n    nextPage,\n    previousPage,\n    setGlobalFilter,\n    // setGlobalFilteredRows,\n    setPageSize,\n    selectedFlatRows,\n    visibleColumns,\n    preGlobalFilteredRows,\n    // setColumnOrder,\n    state\n  };\n\n  if (handleTableControls && handleTableControls.beforeTableRender) {\n    return handleTableControls.beforeTableRender(controls);\n  } // Render the UI for your table\n\n\n  return __jsx(React.Fragment, null, handleTableControls && handleTableControls.jsx && handleTableControls.jsx(controls), __jsx(\"table\", _extends({}, getTableProps(), {\n    className: tableClassName || ''\n  }), __jsx(\"thead\", null, headerGroups.map(headerGroup => __jsx(\"tr\", headerGroup.getHeaderGroupProps(), headerGroup.headers.map(column => __jsx(motion.th, column.getHeaderProps({\n    layoutTransition: spring,\n    style: {}\n  }), __jsx(\"div\", column.getSortByToggleProps(), renderHeader ? renderHeader(column) : __jsx(React.Fragment, null, column.render('Header'), __jsx(\"span\", null, column.isSorted ? column.isSortedDesc ? ' ðŸ”½' : ' ðŸ”¼' : ''))), __jsx(\"div\", null, column.canFilter && filterTypes ? renderFilter ? renderFilter(column) : column.render('Filter') : null))))), (globalFilter === null || globalFilter === void 0 ? void 0 : globalFilter.use) && pageOptions.length > 10 && __jsx(\"tr\", null, __jsx(\"th\", {\n    colSpan: visibleColumns.length,\n    style: {\n      textAlign: 'left'\n    }\n  }, __jsx(globalFilter.Component, {\n    preGlobalFilteredRows: preGlobalFilteredRows,\n    globalFilter: state.globalFilter,\n    setGlobalFilter: setGlobalFilter\n  }))), isEmpty(data) && __jsx(\"tr\", null, __jsx(\"th\", {\n    colSpan: visibleColumns.length,\n    className: \"w-full h-48 my-4 text-base text-center hover:border-red-600 nothing-to-show-th\",\n    style: {\n      fontWeight: 'normal',\n      textAlign: 'center',\n      border: '1px dashed darkgreen'\n    }\n  }, loading ? __jsx(\"div\", {\n    className: \"spinner\"\n  }) : __jsx(\"p\", {\n    className: \"text-xl text-red-800 font-base\"\n  }, \"Nothing to show\")))), __jsx(\"tbody\", getTableBodyProps(), __jsx(AnimatePresence, null, renderTableRow ? renderTableRow(page, prepareRow) : page.map((row, i) => {\n    prepareRow(row);\n    return __jsx(motion.tr, row.getRowProps({\n      layoutTransition: spring,\n      exit: {\n        opacity: 0,\n        maxHeight: 0\n      }\n    }), row.cells.map((cell, i) => {\n      return __jsx(motion.td, cell.getCellProps({\n        layoutTransition: spring\n      }), renderTableCell ? renderTableCell(cell) : cell.render('Cell'));\n    }));\n  })), renderExtraTableTd && renderExtraTableTd(controls))), __jsx(\"div\", {\n    className: \"mt-2 pagination\"\n  }, pageOptions.length > 10 && __jsx(React.Fragment, null, __jsx(\"button\", {\n    onClick: () => gotoPage(0),\n    className: `${!canPreviousPage ? 'opacity-25' : ''}`,\n    disabled: !canPreviousPage\n  }, '<<'), ' ', __jsx(\"button\", {\n    onClick: () => previousPage(),\n    className: `${!canPreviousPage ? 'opacity-25' : ''}`,\n    disabled: !canPreviousPage\n  }, '<'), ' ', __jsx(\"button\", {\n    onClick: () => nextPage(),\n    disabled: !canNextPage,\n    className: `${!canNextPage ? 'opacity-25' : ''}`\n  }, '>'), ' ', __jsx(\"button\", {\n    onClick: () => gotoPage(pageCount - 1),\n    disabled: !canNextPage,\n    className: `${!canNextPage ? 'opacity-25' : ''}`\n  }, '>>')), (pageOptions === null || pageOptions === void 0 ? void 0 : pageOptions.length) > 10 && __jsx(React.Fragment, null, __jsx(\"span\", {\n    className: \"text-sm\"\n  }, \"Page\", ' ', __jsx(\"strong\", null, pageIndex + 1, \" of \", pageOptions.length), ' '), __jsx(\"span\", null, \"| Go to page:\", ' ', __jsx(\"input\", {\n    type: \"number\",\n    defaultValue: pageIndex + 1,\n    onChange: e => {\n      const page = e.target.value ? Number(e.target.value) - 1 : 0;\n      gotoPage(page);\n    },\n    style: {\n      width: '100px'\n    }\n  })), __jsx(\"select\", {\n    value: pageSize,\n    className: \"px-2 mx-4 text-sm\",\n    onChange: e => {\n      setPageSize(Number(e.target.value));\n    }\n  }, [10, 20, 30, 40, 50].map(pageSize => __jsx(\"option\", {\n    key: pageSize,\n    value: pageSize\n  }, \"Show \", pageSize))))));\n}\n\nexport { useAsyncDebounce, matchSorter };","map":{"version":3,"sources":["/mnt/c/Users/arash/Documents/DevInDoc/Getaboard/demoEmail/reward-test/src/components/Table.tsx"],"names":["React","useEffect","useState","useTable","usePagination","useRowSelect","useSortBy","useFilters","useColumnOrder","useGlobalFilter","useAsyncDebounce","motion","AnimatePresence","matchSorter","styled","isEmpty","Styles","div","TableComponent","columns","data","setData","loading","tableClassName","tableWrapper","rest","skipPageReset","setSkipPageReset","updateData","rowIndex","columnId","value","old","map","row","index","tableOptions","Array","from","forEach","option","TableWrapper","use","wrapper","props","Table","options","filterTypes","defaultColumn","globalFilter","renderHeader","renderFilter","renderTableRow","renderExtraTableTd","renderTableCell","handleTableControls","customHook","extraHook","hooks","visibleColumns","push","hookOptions","getTableProps","getTableBodyProps","headerGroups","prepareRow","page","canPreviousPage","canNextPage","pageOptions","pageCount","gotoPage","nextPage","previousPage","setGlobalFilter","setPageSize","selectedFlatRows","preGlobalFilteredRows","state","autoResetPage","pageIndex","pageSize","selectedRowIds","spring","useMemo","type","damping","stiffness","controls","beforeTableRender","jsx","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","layoutTransition","style","getSortByToggleProps","render","isSorted","isSortedDesc","canFilter","length","textAlign","fontWeight","border","i","getRowProps","exit","opacity","maxHeight","cells","cell","getCellProps","e","target","Number","width"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport {\n  useTable,\n  usePagination,\n  useRowSelect,\n  useSortBy,\n  useFilters,\n  useColumnOrder,\n  useGlobalFilter,\n  useAsyncDebounce,\n} from 'react-table'\nimport { motion, AnimatePresence } from 'framer-motion'\nimport matchSorter from 'match-sorter'\nimport styled from 'styled-components'\nimport { isEmpty } from '@utils/helpers'\n\nexport interface Props {\n  className?: string | Record<string, unknown>\n  ordered?: boolean\n  item?: boolean\n}\n\nexport interface gFilterProps {\n  preGlobalFilteredRows: unknown\n  globalFilter: unknown\n  setGlobalFilter: unknown\n}\n\nexport type gFilterState = unknown\n\nexport type filterColumnProps = unknown\n\nexport type FilterType = {\n  fuzzyText: unknown\n  text: (rows: unknown, id: unknown, filterValue: unknown) => unknown\n}\n\nexport type DefaultColumn = {\n  Filter?: ({\n    column: { filterValue, preFilteredRows, setFilter },\n  }: {\n    column: {\n      filterValue: unknown\n      preFilteredRows: unknown\n      setFilter: unknown\n    }\n  }) => JSX.Element\n  Cell?: ({\n    value: initialValue,\n    row: { index },\n    column,\n    updateData,\n  }: {\n    value: unknown\n    row: {\n      index: unknown\n    }\n    column: unknown\n    updateData: (index, id, value) => unknown\n  }) => unknown\n}\n\nexport type GlobalFilter = {\n  use: boolean\n  Component: ({\n    preGlobalFilteredRows,\n    globalFilter,\n    setGlobalFilter,\n  }) => JSX.Element\n}\n\nexport interface TableOptions {\n  tableClassName?: string\n  filterTypes?: FilterType\n  defaultColumn?: DefaultColumn\n  globalFilter?: GlobalFilter\n  renderHeader?: (header: unknown) => JSX.Element\n  renderFilter?: (column: unknown) => JSX.Element\n  renderTableBody?: (column: unknown) => JSX.Element\n  renderTableRow?: (row: unknown, prepareTableRow: unknown) => JSX.Element\n  renderExtraTableTd?: (controls: unknown) => JSX.Element\n  renderTableCell?: (cell: unknown) => JSX.Element\n  handleTableControls?: {\n    beforeTableRender?: (controls: unknown) => JSX.Element\n    jsx?: (controls) => JSX.Element\n  }\n  customHook?: (hooks: unknown) => unknown\n}\n\nconst Styles = styled.div`\n  padding: 1rem;\n\n  table {\n    /* border-spacing: 0; */\n    /* border: 1px solid black; */\n    border-collapse: separate;\n    border-style: 1em;\n    border-spacing: 1em;\n    /* border-spacing: 0 1em; */\n\n    thead tr {\n      :first-child {\n        display: none;\n      }\n      /* border: none !important; */\n      /* border-bottom: 2px solid; */\n      background: none !important;\n      border-radius: none !important;\n    }\n\n    tbody {\n      tr {\n        border-radius: 1rem;\n        padding: 1.5rem;\n\n        margin: 0.5rem 0;\n        box-shadow: 0 3px 6px rgba(0, 0, 0, 0.57), 0 2px 4px rgba(0, 0, 0, 0.05);\n        transition: transform 0.5s -webkit-transform 0.5s;\n        :last-child {\n          border-radius: 1rem;\n          td {\n            /* border-bottom: 0; */\n          }\n        }\n      }\n    }\n\n    th,\n    td {\n      margin: 0;\n      padding: 0.5rem;\n      /* border-bottom: 1px solid black;\n      border-right: 1px solid black; */\n\n      :last-child {\n        border-right: 0;\n      }\n\n      /* input {\n        font-size: 1rem;\n        padding: 0;\n        margin: 0;\n        border: 0;\n      } */\n    }\n\n    .pagination {\n      padding: 0.5rem;\n    }\n  }\n`\n\nfunction TableComponent({\n  columns,\n  data,\n  setData,\n  loading,\n  tableClassName,\n  tableWrapper,\n  ...rest\n}: {\n  columns: {\n    Header?: string\n    columns: {\n      Header: string\n      accessor: string\n      Cell?: unknown\n    }[]\n  }[]\n  data: Record<string, unknown> | unknown[]\n  loading?: boolean\n  tableWrapper?: { use: boolean; wrapper: unknown; props?: unknown }\n  setData: React.Dispatch<unknown>\n} & TableOptions) {\n  const [skipPageReset, setSkipPageReset] = useState(false)\n\n  // We need to keep the table from resetting the pageIndex when we\n  // Update data. So we can keep track of that flag with a ref.\n\n  // When our cell renderer calls updateMyData, we'll use\n  // the rowIndex, columnId and new value to update the\n  // original data\n  const updateData = (rowIndex, columnId, value) => {\n    // We also turn on the flag to not reset the page\n    setSkipPageReset(true)\n    setData((old) =>\n      old.map((row, index) => {\n        if (index === rowIndex) {\n          return {\n            ...old[rowIndex],\n            [columnId]: value,\n          }\n        }\n        return row\n      })\n    )\n  }\n\n  // After data chagnes, we turn the flag back off\n  // so that if data actually changes when we're not\n  // editing it, the page is reset\n  useEffect(() => {\n    setSkipPageReset(false)\n  }, [data])\n\n  const tableOptions: TableOptions = {}\n\n  Array.from([\n    'renderHeader',\n    'renderFilter',\n    'renderTableBody',\n    'renderTableRow',\n    'renderExtraTableTd',\n    'renderTableCell',\n    'defaultColumn',\n    'globalFilter',\n    'handleTableControls',\n    'customHook',\n  ]).forEach((option) => {\n    if (rest[option]) {\n      tableOptions[option] = rest[option]\n    }\n  })\n\n  let TableWrapper = Styles\n  if (tableWrapper.use) {\n    TableWrapper = tableWrapper.wrapper\n  }\n\n  return (\n    <TableWrapper {...(tableWrapper.use && { ...tableWrapper.props })}>\n      <Table\n        tableClassName={tableClassName}\n        columns={columns}\n        loading={loading}\n        data={data}\n        updateData={updateData}\n        skipPageReset={skipPageReset}\n        options={{ ...tableOptions }}\n      />\n    </TableWrapper>\n  )\n}\n\nexport default TableComponent\n\n// Be sure to pass our updateData and the skipPageReset option\nfunction Table({\n  columns,\n  data,\n  updateData,\n  skipPageReset,\n  loading,\n  options,\n  tableClassName,\n}) {\n  const {\n    filterTypes,\n    defaultColumn,\n    globalFilter,\n    renderHeader,\n    renderFilter,\n    // renderTableBody,\n    renderTableRow,\n    renderExtraTableTd,\n    renderTableCell,\n    handleTableControls,\n    customHook,\n  }: TableOptions = options || {}\n\n  let extraHook = (hooks) => {\n    hooks.visibleColumns.push((columns) => [...columns])\n  }\n  if (customHook) extraHook = customHook\n\n  const hookOptions: {\n    filterTypes?: FilterType\n    defaultColumn?: DefaultColumn\n  } = {}\n\n  if (filterTypes) hookOptions.filterTypes = filterTypes\n  if (defaultColumn) hookOptions.defaultColumn = defaultColumn\n  else hookOptions.defaultColumn = {}\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    prepareRow,\n    page,\n    canPreviousPage,\n    canNextPage,\n    pageOptions,\n    pageCount,\n    gotoPage,\n    nextPage,\n    previousPage,\n    setGlobalFilter,\n    // setGlobalFilteredRows,\n    setPageSize,\n    selectedFlatRows,\n    visibleColumns,\n    preGlobalFilteredRows,\n    // setColumnOrder,\n    state,\n  } = useTable(\n    {\n      columns,\n      data,\n      // use the skipPageReset option to disable page resetting temporarily\n      autoResetPage: !skipPageReset,\n      updateData,\n      ...hookOptions,\n    },\n    useColumnOrder,\n    useFilters,\n    useGlobalFilter,\n    useSortBy,\n    usePagination,\n    useRowSelect,\n    extraHook\n  )\n\n  const { pageIndex, pageSize, selectedRowIds } = state\n\n  const spring = React.useMemo(\n    () => ({\n      type: 'spring',\n      damping: 50,\n      stiffness: 100,\n    }),\n    []\n  )\n\n  const controls = {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    prepareRow,\n    page,\n    canPreviousPage,\n    canNextPage,\n    pageOptions,\n    pageCount,\n    gotoPage,\n    nextPage,\n    previousPage,\n    setGlobalFilter,\n    // setGlobalFilteredRows,\n    setPageSize,\n    selectedFlatRows,\n    visibleColumns,\n    preGlobalFilteredRows,\n    // setColumnOrder,\n    state,\n  }\n\n  if (handleTableControls && handleTableControls.beforeTableRender) {\n    return handleTableControls.beforeTableRender(controls)\n  }\n\n  // Render the UI for your table\n  return (\n    <>\n      {handleTableControls &&\n        handleTableControls.jsx &&\n        handleTableControls.jsx(controls)}\n      <table {...getTableProps()} className={tableClassName || ''}>\n        <thead>\n          {headerGroups.map((headerGroup) => (\n            <tr {...headerGroup.getHeaderGroupProps()}>\n              {headerGroup.headers.map((column) => (\n                <motion.th\n                  {...column.getHeaderProps({\n                    layoutTransition: spring,\n                    style: {},\n                  })}\n                >\n                  <div {...column.getSortByToggleProps()}>\n                    {renderHeader ? (\n                      renderHeader(column)\n                    ) : (\n                      <>\n                        {column.render('Header')}\n                        <span>\n                          {column.isSorted\n                            ? column.isSortedDesc\n                              ? ' ðŸ”½'\n                              : ' ðŸ”¼'\n                            : ''}\n                        </span>\n                      </>\n                    )}\n                  </div>\n                  <div>\n                    {column.canFilter && filterTypes\n                      ? renderFilter\n                        ? renderFilter(column)\n                        : column.render('Filter')\n                      : null}\n                  </div>\n                </motion.th>\n              ))}\n            </tr>\n          ))}\n          {globalFilter?.use && pageOptions.length > 10 && (\n            <tr>\n              <th\n                colSpan={visibleColumns.length}\n                style={{\n                  textAlign: 'left',\n                }}\n              >\n                {/* @ts-ignore */}\n                <globalFilter.Component\n                  preGlobalFilteredRows={preGlobalFilteredRows}\n                  globalFilter={state.globalFilter}\n                  setGlobalFilter={setGlobalFilter}\n                />\n              </th>\n            </tr>\n          )}\n          {isEmpty(data) && (\n            <tr>\n              <th\n                colSpan={visibleColumns.length}\n                className=\"w-full h-48 my-4 text-base text-center hover:border-red-600 nothing-to-show-th\"\n                style={{\n                  fontWeight: 'normal',\n                  textAlign: 'center',\n                  border: '1px dashed darkgreen',\n                }}\n              >\n                {loading ? (\n                  <div className=\"spinner\"></div>\n                ) : (\n                  <p className=\"text-xl text-red-800 font-base\">\n                    Nothing to show\n                  </p>\n                )}\n              </th>\n            </tr>\n          )}\n        </thead>\n        <tbody {...getTableBodyProps()}>\n          <AnimatePresence>\n            {renderTableRow\n              ? renderTableRow(page, prepareRow)\n              : page.map((row, i) => {\n                  prepareRow(row)\n                  return (\n                    <motion.tr\n                      {...row.getRowProps({\n                        layoutTransition: spring,\n                        exit: { opacity: 0, maxHeight: 0 },\n                      })}\n                    >\n                      {row.cells.map((cell, i) => {\n                        return (\n                          <motion.td\n                            {...cell.getCellProps({\n                              layoutTransition: spring,\n                            })}\n                          >\n                            {renderTableCell\n                              ? renderTableCell(cell)\n                              : cell.render('Cell')}\n                          </motion.td>\n                        )\n                      })}\n                    </motion.tr>\n                  )\n                })}\n          </AnimatePresence>\n          {renderExtraTableTd && renderExtraTableTd(controls)}\n        </tbody>\n      </table>\n      <div className=\"mt-2 pagination\">\n        {pageOptions.length > 10 && (\n          <>\n            <button\n              onClick={() => gotoPage(0)}\n              className={`${!canPreviousPage ? 'opacity-25' : ''}`}\n              disabled={!canPreviousPage}\n            >\n              {'<<'}\n            </button>{' '}\n            <button\n              onClick={() => previousPage()}\n              className={`${!canPreviousPage ? 'opacity-25' : ''}`}\n              disabled={!canPreviousPage}\n            >\n              {'<'}\n            </button>{' '}\n            <button\n              onClick={() => nextPage()}\n              disabled={!canNextPage}\n              className={`${!canNextPage ? 'opacity-25' : ''}`}\n            >\n              {'>'}\n            </button>{' '}\n            <button\n              onClick={() => gotoPage(pageCount - 1)}\n              disabled={!canNextPage}\n              className={`${!canNextPage ? 'opacity-25' : ''}`}\n            >\n              {'>>'}\n            </button>\n          </>\n        )}\n        {pageOptions?.length > 10 && (\n          <>\n            <span className=\"text-sm\">\n              Page{' '}\n              <strong>\n                {pageIndex + 1} of {pageOptions.length}\n              </strong>{' '}\n            </span>\n            <span>\n              | Go to page:{' '}\n              <input\n                type=\"number\"\n                defaultValue={pageIndex + 1}\n                onChange={(e) => {\n                  const page = e.target.value ? Number(e.target.value) - 1 : 0\n                  gotoPage(page)\n                }}\n                style={{\n                  width: '100px',\n                }}\n              />\n            </span>\n\n            <select\n              value={pageSize}\n              className=\"px-2 mx-4 text-sm\"\n              onChange={(e) => {\n                setPageSize(Number(e.target.value))\n              }}\n            >\n              {[10, 20, 30, 40, 50].map((pageSize) => (\n                <option key={pageSize} value={pageSize}>\n                  Show {pageSize}\n                </option>\n              ))}\n            </select>\n          </>\n        )}\n      </div>\n    </>\n  )\n}\n\nexport { useAsyncDebounce, matchSorter }\n"]},"metadata":{},"sourceType":"module"}