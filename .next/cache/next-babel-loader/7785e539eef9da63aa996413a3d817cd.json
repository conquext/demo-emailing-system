{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _jsxFileName = \"/mnt/c/Users/arash/Documents/DevInDoc/Getaboard/demoEmail/reward-test/src/components/Table.tsx\",\n    _s = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  padding: 1rem;\\n\\n  table {\\n    border-spacing: 0;\\n    border: 1px solid black;\\n\\n    tr {\\n      :last-child {\\n        td {\\n          border-bottom: 0;\\n        }\\n      }\\n    }\\n\\n    th,\\n    td {\\n      margin: 0;\\n      padding: 0.5rem;\\n      border-bottom: 1px solid black;\\n      border-right: 1px solid black;\\n\\n      :last-child {\\n        border-right: 0;\\n      }\\n\\n      input {\\n        font-size: 1rem;\\n        padding: 0;\\n        margin: 0;\\n        border: 0;\\n      }\\n    }\\n\\n    .pagination {\\n      padding: 0.5rem;\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useEffect, useState } from 'react';\nimport { useTable, usePagination } from 'react-table';\nimport styled from 'styled-components';\nvar Styles = styled.div(_templateObject());\n_c = Styles;\n\nfunction TableComponent(_ref) {\n  _s();\n\n  var columns = _ref.columns,\n      data = _ref.data,\n      setData = _ref.setData,\n      editableFields = _ref.editableFields;\n\n  var _useState = useState(false),\n      skipPageReset = _useState[0],\n      setSkipPageReset = _useState[1]; // We need to keep the table from resetting the pageIndex when we\n  // Update data. So we can keep track of that flag with a ref.\n  // When our cell renderer calls updateMyData, we'll use\n  // the rowIndex, columnId and new value to update the\n  // original data\n\n\n  var updateData = function updateData(rowIndex, columnId, value) {\n    // We also turn on the flag to not reset the page\n    setSkipPageReset(true);\n    setData(function (old) {\n      return old.map(function (row, index) {\n        if (index === rowIndex) {\n          return _objectSpread(_objectSpread({}, old[rowIndex]), {}, _defineProperty({}, columnId, value));\n        }\n\n        return row;\n      });\n    });\n  }; // After data chagnes, we turn the flag back off\n  // so that if data actually changes when we're not\n  // editing it, the page is reset\n\n\n  useEffect(function () {\n    setSkipPageReset(false);\n  }, [data]);\n  return __jsx(Styles, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 5\n    }\n  }, __jsx(Table, {\n    columns: columns,\n    data: data,\n    updateData: updateData,\n    skipPageReset: skipPageReset,\n    editableFields: editableFields,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }\n  }));\n}\n\n_s(TableComponent, \"sA641OB1DfZVk+1S50kd2PP+SoU=\");\n\n_c2 = TableComponent;\nexport default TableComponent; // Be sure to pass our updateData and the skipPageReset option\n\nfunction Table(_ref2) {\n  _s3();\n\n  var _s2 = $RefreshSig$(),\n      _this = this;\n\n  var columns = _ref2.columns,\n      data = _ref2.data,\n      updateData = _ref2.updateData,\n      skipPageReset = _ref2.skipPageReset,\n      editableFields = _ref2.editableFields;\n\n  // Create an editable cell renderer\n  var EditableCell = function EditableCell(_ref3) {\n    _s2();\n\n    var initialValue = _ref3.value,\n        index = _ref3.row.index,\n        id = _ref3.column.id,\n        updateData = _ref3.updateData,\n        rest = _objectWithoutProperties(_ref3, [\"value\", \"row\", \"column\", \"updateData\"]);\n\n    console.log(' them edit', initialValue, index, id, rest); // We need to keep and update the state of the cell normally\n\n    var _useState2 = useState(initialValue),\n        value = _useState2[0],\n        setValue = _useState2[1];\n\n    var onChange = function onChange(e) {\n      setValue(e.target.value);\n    }; // We'll only update the external data when the input is blurred\n\n\n    var onBlur = function onBlur() {\n      updateData(index, id, value);\n    }; // If the initialValue is changed external, sync it up with our state\n\n\n    useEffect(function () {\n      setValue(initialValue);\n    }, [initialValue]);\n    return (// <input\n      //   value={value}\n      //   onChange={onChange}\n      //   onBlur={onBlur}\n      //   className=\"w-full bg-transparent\"\n      // />\n      null\n    );\n  }; // Set our editable cell renderer as the default Cell renderer\n\n\n  _s2(EditableCell, \"t3gDVKkI0uGYXmaVHtRbYQM5Fl4=\");\n\n  var defaultColumn = {\n    Cell: EditableCell\n  };\n\n  var _useTable = useTable({\n    columns: columns,\n    data: data,\n    defaultColumn: defaultColumn,\n    // use the skipPageReset option to disable page resetting temporarily\n    autoResetPage: !skipPageReset,\n    updateData: updateData\n  }, usePagination),\n      getTableProps = _useTable.getTableProps,\n      getTableBodyProps = _useTable.getTableBodyProps,\n      headerGroups = _useTable.headerGroups,\n      prepareRow = _useTable.prepareRow,\n      page = _useTable.page,\n      canPreviousPage = _useTable.canPreviousPage,\n      canNextPage = _useTable.canNextPage,\n      pageOptions = _useTable.pageOptions,\n      pageCount = _useTable.pageCount,\n      gotoPage = _useTable.gotoPage,\n      nextPage = _useTable.nextPage,\n      previousPage = _useTable.previousPage,\n      setPageSize = _useTable.setPageSize,\n      _useTable$state = _useTable.state,\n      pageIndex = _useTable$state.pageIndex,\n      pageSize = _useTable$state.pageSize;\n\n  function callDebugger(data) {\n    debugger;\n  } // Render the UI for your table\n\n\n  return __jsx(React.Fragment, null, __jsx(\"table\", _extends({}, getTableProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 84\n    }\n  }), __jsx(\"thead\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 86\n    }\n  }, headerGroups.map(function (headerGroup) {\n    return __jsx(\"tr\", _extends({}, headerGroup.getHeaderGroupProps(), {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 92\n      }\n    }), headerGroup.headers.map(function (column) {\n      return __jsx(\"th\", _extends({}, column.getHeaderProps(), {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 98\n        }\n      }), column.render('Header'));\n    }));\n  })), __jsx(\"tbody\", _extends({}, getTableBodyProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 86\n    }\n  }), page.map(function (row, i) {\n    prepareRow(row);\n    return __jsx(\"tr\", _extends({}, row.getRowProps(), {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 94\n      }\n    }), row.cells.map(function (cell) {\n      return __jsx(\"td\", _extends({}, cell.getCellProps(), {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 275,\n          columnNumber: 102\n        }\n      }), cell.render('Cell'));\n    }));\n  }))), __jsx(\"div\", {\n    className: \"pagination\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 291,\n      columnNumber: 84\n    }\n  }, __jsx(\"button\", {\n    onClick: function onClick() {\n      return gotoPage(0);\n    },\n    disabled: !canPreviousPage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 292,\n      columnNumber: 86\n    }\n  }, '<<'), ' ', __jsx(\"button\", {\n    onClick: function onClick() {\n      return previousPage();\n    },\n    disabled: !canPreviousPage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 306,\n      columnNumber: 86\n    }\n  }, '<'), ' ', __jsx(\"button\", {\n    onClick: function onClick() {\n      return nextPage();\n    },\n    disabled: !canNextPage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 318,\n      columnNumber: 86\n    }\n  }, '>'), ' ', __jsx(\"button\", {\n    onClick: function onClick() {\n      return gotoPage(pageCount - 1);\n    },\n    disabled: !canNextPage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 330,\n      columnNumber: 86\n    }\n  }, '>>'), ' ', __jsx(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 345,\n      columnNumber: 86\n    }\n  }, \"Page\", ' ', __jsx(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 347,\n      columnNumber: 88\n    }\n  }, pageIndex + 1, ' ', \"of\", ' ', pageOptions.length), ' '), __jsx(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 356,\n      columnNumber: 86\n    }\n  }, \"| Go to page:\", ' ', __jsx(\"input\", {\n    type: \"number\",\n    defaultValue: pageIndex + 1,\n    onChange: function onChange(e) {\n      var page = e.target.value ? Number(e.target.value) - 1 : 0;\n      gotoPage(page);\n    },\n    style: {\n      width: '100px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 361,\n      columnNumber: 88\n    }\n  })), ' ', __jsx(\"select\", {\n    value: pageSize,\n    onChange: function onChange(e) {\n      setPageSize(Number(e.target.value));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 390,\n      columnNumber: 86\n    }\n  }, [10, 20, 30, 40, 50].map(function (pageSize) {\n    return __jsx(\"option\", {\n      key: pageSize,\n      value: pageSize,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 416,\n        columnNumber: 92\n      }\n    }, \"Show\", ' ', pageSize);\n  }))));\n}\n\n_s3(Table, \"ntjS9ALAyT38OfzXa0xy1OPm/3A=\", false, function () {\n  return [useTable];\n});\n\n_c3 = Table;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Styles\");\n$RefreshReg$(_c2, \"TableComponent\");\n$RefreshReg$(_c3, \"Table\");","map":{"version":3,"sources":["/mnt/c/Users/arash/Documents/DevInDoc/Getaboard/demoEmail/reward-test/src/components/Table.tsx"],"names":["React","useEffect","useState","useTable","usePagination","styled","Styles","div","TableComponent","columns","data","setData","editableFields","skipPageReset","setSkipPageReset","updateData","rowIndex","columnId","value","old","map","row","index","Table","EditableCell","initialValue","id","column","rest","console","log","setValue","onChange","e","target","onBlur","defaultColumn","Cell","autoResetPage","getTableProps","getTableBodyProps","headerGroups","prepareRow","page","canPreviousPage","canNextPage","pageOptions","pageCount","gotoPage","nextPage","previousPage","setPageSize","state","pageIndex","pageSize","callDebugger","headerGroup","getHeaderGroupProps","headers","getHeaderProps","render","i","getRowProps","cells","cell","getCellProps","length","Number","width"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport clsx from 'clsx'\nimport { useTable, usePagination } from 'react-table'\nimport styled from 'styled-components'\nimport Input from './Input'\n\nexport interface Props {\n  className?: string | Record<string, unknown>\n  ordered?: boolean\n  item?: boolean\n}\n\nconst Styles = styled.div`\n  padding: 1rem;\n\n  table {\n    border-spacing: 0;\n    border: 1px solid black;\n\n    tr {\n      :last-child {\n        td {\n          border-bottom: 0;\n        }\n      }\n    }\n\n    th,\n    td {\n      margin: 0;\n      padding: 0.5rem;\n      border-bottom: 1px solid black;\n      border-right: 1px solid black;\n\n      :last-child {\n        border-right: 0;\n      }\n\n      input {\n        font-size: 1rem;\n        padding: 0;\n        margin: 0;\n        border: 0;\n      }\n    }\n\n    .pagination {\n      padding: 0.5rem;\n    }\n  }\n`\n\nfunction TableComponent({\n  columns,\n  data,\n  setData,\n  editableFields,\n}: {\n  editableFields?: Array<unknown>\n  columns: {\n    Header?: string\n    columns: {\n      Header: string\n      accessor: string\n      Cell?: unknown\n    }[]\n  }[]\n  data: Record<string, unknown>\n  setData: React.Dispatch<unknown>\n}) {\n  const [skipPageReset, setSkipPageReset] = useState(false)\n\n  // We need to keep the table from resetting the pageIndex when we\n  // Update data. So we can keep track of that flag with a ref.\n\n  // When our cell renderer calls updateMyData, we'll use\n  // the rowIndex, columnId and new value to update the\n  // original data\n  const updateData = (rowIndex, columnId, value) => {\n    // We also turn on the flag to not reset the page\n    setSkipPageReset(true)\n    setData((old) =>\n      old.map((row, index) => {\n        if (index === rowIndex) {\n          return {\n            ...old[rowIndex],\n            [columnId]: value,\n          }\n        }\n        return row\n      })\n    )\n  }\n\n  // After data chagnes, we turn the flag back off\n  // so that if data actually changes when we're not\n  // editing it, the page is reset\n  useEffect(() => {\n    setSkipPageReset(false)\n  }, [data])\n\n  return (\n    <Styles>\n      <Table\n        columns={columns}\n        data={data}\n        updateData={updateData}\n        skipPageReset={skipPageReset}\n        editableFields={editableFields}\n      />\n    </Styles>\n  )\n}\n\nexport default TableComponent\n\n// Be sure to pass our updateData and the skipPageReset option\nfunction Table({ columns, data, updateData, skipPageReset, editableFields }) {\n                                                                               // Create an editable cell renderer\n                                                                               const EditableCell = ({\n                                                                                 value: initialValue,\n                                                                                 row: {\n                                                                                   index,\n                                                                                 },\n                                                                                 column: {\n                                                                                   id,\n                                                                                 },\n                                                                                 updateData, // This is a custom function that we supplied to our table instance\n                                                                                 ...rest\n                                                                               }) => {\n                                                                                 console.log(\n                                                                                   ' them edit',\n                                                                                   initialValue,\n                                                                                   index,\n                                                                                   id,\n                                                                                   rest\n                                                                                 )\n                                                                                 // We need to keep and update the state of the cell normally\n                                                                                 const [\n                                                                                   value,\n                                                                                   setValue,\n                                                                                 ] = useState(\n                                                                                   initialValue\n                                                                                 )\n\n                                                                                 const onChange = (\n                                                                                   e\n                                                                                 ) => {\n                                                                                   setValue(\n                                                                                     e\n                                                                                       .target\n                                                                                       .value\n                                                                                   )\n                                                                                 }\n\n                                                                                 // We'll only update the external data when the input is blurred\n                                                                                 const onBlur = () => {\n                                                                                   updateData(\n                                                                                     index,\n                                                                                     id,\n                                                                                     value\n                                                                                   )\n                                                                                 }\n\n                                                                                 // If the initialValue is changed external, sync it up with our state\n                                                                                 useEffect(() => {\n                                                                                   setValue(\n                                                                                     initialValue\n                                                                                   )\n                                                                                 }, [\n                                                                                   initialValue,\n                                                                                 ])\n\n                                                                                 return (\n                                                                                   // <input\n                                                                                   //   value={value}\n                                                                                   //   onChange={onChange}\n                                                                                   //   onBlur={onBlur}\n                                                                                   //   className=\"w-full bg-transparent\"\n                                                                                   // />\n                                                                                   null\n                                                                                 )\n                                                                               }\n\n                                                                               // Set our editable cell renderer as the default Cell renderer\n                                                                               const defaultColumn = {\n                                                                                 Cell: EditableCell,\n                                                                               }\n\n                                                                               const {\n                                                                                 getTableProps,\n                                                                                 getTableBodyProps,\n                                                                                 headerGroups,\n                                                                                 prepareRow,\n                                                                                 page,\n                                                                                 canPreviousPage,\n                                                                                 canNextPage,\n                                                                                 pageOptions,\n                                                                                 pageCount,\n                                                                                 gotoPage,\n                                                                                 nextPage,\n                                                                                 previousPage,\n                                                                                 setPageSize,\n                                                                                 state: {\n                                                                                   pageIndex,\n                                                                                   pageSize,\n                                                                                 },\n                                                                               } = useTable(\n                                                                                 {\n                                                                                   columns,\n                                                                                   data,\n                                                                                   defaultColumn,\n                                                                                   // use the skipPageReset option to disable page resetting temporarily\n                                                                                   autoResetPage: !skipPageReset,\n                                                                                   updateData,\n                                                                                 },\n                                                                                 usePagination\n                                                                               )\n                                                                               function callDebugger(\n                                                                                 data\n                                                                               ) {\n                                                                                 debugger\n                                                                               }\n                                                                               // Render the UI for your table\n                                                                               return (\n                                                                                 <>\n                                                                                   <table\n                                                                                     {...getTableProps()}\n                                                                                   >\n                                                                                     <thead>\n                                                                                       {headerGroups.map(\n                                                                                         (\n                                                                                           headerGroup\n                                                                                         ) => (\n                                                                                           <tr\n                                                                                             {...headerGroup.getHeaderGroupProps()}\n                                                                                           >\n                                                                                             {headerGroup.headers.map(\n                                                                                               (\n                                                                                                 column\n                                                                                               ) => (\n                                                                                                 <th\n                                                                                                   {...column.getHeaderProps()}\n                                                                                                 >\n                                                                                                   {column.render(\n                                                                                                     'Header'\n                                                                                                   )}\n                                                                                                 </th>\n                                                                                               )\n                                                                                             )}\n                                                                                           </tr>\n                                                                                         )\n                                                                                       )}\n                                                                                     </thead>\n                                                                                     <tbody\n                                                                                       {...getTableBodyProps()}\n                                                                                     >\n                                                                                       {page.map(\n                                                                                         (\n                                                                                           row,\n                                                                                           i\n                                                                                         ) => {\n                                                                                           prepareRow(\n                                                                                             row\n                                                                                           )\n                                                                                           return (\n                                                                                             <tr\n                                                                                               {...row.getRowProps()}\n                                                                                             >\n                                                                                               {row.cells.map(\n                                                                                                 (\n                                                                                                   cell\n                                                                                                 ) => {\n                                                                                                   return (\n                                                                                                     <td\n                                                                                                       {...cell.getCellProps()}\n                                                                                                     >\n                                                                                                       {cell.render(\n                                                                                                         'Cell'\n                                                                                                       )}\n                                                                                                     </td>\n                                                                                                   )\n                                                                                                 }\n                                                                                               )}\n                                                                                             </tr>\n                                                                                           )\n                                                                                         }\n                                                                                       )}\n                                                                                     </tbody>\n                                                                                   </table>\n                                                                                   <div className=\"pagination\">\n                                                                                     <button\n                                                                                       onClick={() =>\n                                                                                         gotoPage(\n                                                                                           0\n                                                                                         )\n                                                                                       }\n                                                                                       disabled={\n                                                                                         !canPreviousPage\n                                                                                       }\n                                                                                     >\n                                                                                       {\n                                                                                         '<<'\n                                                                                       }\n                                                                                     </button>{' '}\n                                                                                     <button\n                                                                                       onClick={() =>\n                                                                                         previousPage()\n                                                                                       }\n                                                                                       disabled={\n                                                                                         !canPreviousPage\n                                                                                       }\n                                                                                     >\n                                                                                       {\n                                                                                         '<'\n                                                                                       }\n                                                                                     </button>{' '}\n                                                                                     <button\n                                                                                       onClick={() =>\n                                                                                         nextPage()\n                                                                                       }\n                                                                                       disabled={\n                                                                                         !canNextPage\n                                                                                       }\n                                                                                     >\n                                                                                       {\n                                                                                         '>'\n                                                                                       }\n                                                                                     </button>{' '}\n                                                                                     <button\n                                                                                       onClick={() =>\n                                                                                         gotoPage(\n                                                                                           pageCount -\n                                                                                             1\n                                                                                         )\n                                                                                       }\n                                                                                       disabled={\n                                                                                         !canNextPage\n                                                                                       }\n                                                                                     >\n                                                                                       {\n                                                                                         '>>'\n                                                                                       }\n                                                                                     </button>{' '}\n                                                                                     <span>\n                                                                                       Page{' '}\n                                                                                       <strong>\n                                                                                         {pageIndex +\n                                                                                           1}{' '}\n                                                                                         of{' '}\n                                                                                         {\n                                                                                           pageOptions.length\n                                                                                         }\n                                                                                       </strong>{' '}\n                                                                                     </span>\n                                                                                     <span>\n                                                                                       |\n                                                                                       Go\n                                                                                       to\n                                                                                       page:{' '}\n                                                                                       <input\n                                                                                         type=\"number\"\n                                                                                         defaultValue={\n                                                                                           pageIndex +\n                                                                                           1\n                                                                                         }\n                                                                                         onChange={(\n                                                                                           e\n                                                                                         ) => {\n                                                                                           const page = e\n                                                                                             .target\n                                                                                             .value\n                                                                                             ? Number(\n                                                                                                 e\n                                                                                                   .target\n                                                                                                   .value\n                                                                                               ) -\n                                                                                               1\n                                                                                             : 0\n                                                                                           gotoPage(\n                                                                                             page\n                                                                                           )\n                                                                                         }}\n                                                                                         style={{\n                                                                                           width:\n                                                                                             '100px',\n                                                                                         }}\n                                                                                       />\n                                                                                     </span>{' '}\n                                                                                     <select\n                                                                                       value={\n                                                                                         pageSize\n                                                                                       }\n                                                                                       onChange={(\n                                                                                         e\n                                                                                       ) => {\n                                                                                         setPageSize(\n                                                                                           Number(\n                                                                                             e\n                                                                                               .target\n                                                                                               .value\n                                                                                           )\n                                                                                         )\n                                                                                       }}\n                                                                                     >\n                                                                                       {[\n                                                                                         10,\n                                                                                         20,\n                                                                                         30,\n                                                                                         40,\n                                                                                         50,\n                                                                                       ].map(\n                                                                                         (\n                                                                                           pageSize\n                                                                                         ) => (\n                                                                                           <option\n                                                                                             key={\n                                                                                               pageSize\n                                                                                             }\n                                                                                             value={\n                                                                                               pageSize\n                                                                                             }\n                                                                                           >\n                                                                                             Show{' '}\n                                                                                             {\n                                                                                               pageSize\n                                                                                             }\n                                                                                           </option>\n                                                                                         )\n                                                                                       )}\n                                                                                     </select>\n                                                                                   </div>\n                                                                                 </>\n                                                                               )\n                                                                             }\n"]},"metadata":{},"sourceType":"module"}