{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _jsxFileName = \"/mnt/c/Users/arash/Documents/DevInDoc/Getaboard/demoEmail/reward-test/src/components/Table.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s4 = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  padding: 1rem;\\n\\n  table {\\n    border-spacing: 0;\\n    border: 1px solid black;\\n\\n    tr {\\n      :last-child {\\n        td {\\n          border-bottom: 0;\\n        }\\n      }\\n    }\\n\\n    th,\\n    td {\\n      margin: 0;\\n      padding: 0.5rem;\\n      border-bottom: 1px solid black;\\n      border-right: 1px solid black;\\n\\n      :last-child {\\n        border-right: 0;\\n      }\\n\\n      input {\\n        font-size: 1rem;\\n        padding: 0;\\n        margin: 0;\\n        border: 0;\\n      }\\n    }\\n\\n    .pagination {\\n      padding: 0.5rem;\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useEffect, useState } from 'react';\nimport { useTable, usePagination, useRowSelect, useSortBy, useFilters, useColumnOrder } from 'react-table';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport styled from 'styled-components';\nimport Checkbox from './Checkbox';\nvar Styles = styled.div(_templateObject()); // Define a default UI for filtering\n\n_c = Styles;\n\nfunction DefaultColumnFilter(_ref) {\n  var _ref$column = _ref.column,\n      filterValue = _ref$column.filterValue,\n      preFilteredRows = _ref$column.preFilteredRows,\n      setFilter = _ref$column.setFilter;\n  var count = preFilteredRows.length;\n  return __jsx(\"input\", {\n    value: filterValue || '',\n    onChange: function onChange(e) {\n      setFilter(e.target.value || undefined); // Set undefined to remove the filter entirely\n    },\n    placeholder: \"Search \".concat(count, \" records...\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 5\n    }\n  });\n} // This is a custom filter UI for selecting\n// a unique option from a list\n\n\n_c2 = DefaultColumnFilter;\n\nfunction SelectColumnFilter(_ref2) {\n  _s();\n\n  var _this = this;\n\n  var _ref2$column = _ref2.column,\n      filterValue = _ref2$column.filterValue,\n      setFilter = _ref2$column.setFilter,\n      preFilteredRows = _ref2$column.preFilteredRows,\n      id = _ref2$column.id;\n  // Calculate the options for filtering\n  // using the preFilteredRows\n  var options = React.useMemo(function () {\n    var options = new Set();\n    preFilteredRows.forEach(function (row) {\n      options.add(row.values[id]);\n    });\n    return _toConsumableArray(options.values());\n  }, [id, preFilteredRows]); // Render a multi-select box\n\n  return __jsx(\"select\", {\n    value: filterValue,\n    onChange: function onChange(e) {\n      setFilter(e.target.value || undefined);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 5\n    }\n  }, __jsx(\"option\", {\n    value: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }\n  }, \"All\"), options.map(function (option, i) {\n    return __jsx(\"option\", {\n      key: i,\n      value: option,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }\n    }, option);\n  }));\n}\n\n_s(SelectColumnFilter, \"UfleS4trXWGxzhzYTKqqYygmjCE=\");\n\n_c3 = SelectColumnFilter;\n\nfunction TableComponent(_ref3) {\n  _s2();\n\n  var columns = _ref3.columns,\n      data = _ref3.data,\n      setData = _ref3.setData,\n      editableFields = _ref3.editableFields;\n\n  var _useState = useState(false),\n      skipPageReset = _useState[0],\n      setSkipPageReset = _useState[1]; // We need to keep the table from resetting the pageIndex when we\n  // Update data. So we can keep track of that flag with a ref.\n  // When our cell renderer calls updateMyData, we'll use\n  // the rowIndex, columnId and new value to update the\n  // original data\n\n\n  var updateData = function updateData(rowIndex, columnId, value) {\n    // We also turn on the flag to not reset the page\n    setSkipPageReset(true);\n    setData(function (old) {\n      return old.map(function (row, index) {\n        if (index === rowIndex) {\n          return _objectSpread(_objectSpread({}, old[rowIndex]), {}, _defineProperty({}, columnId, value));\n        }\n\n        return row;\n      });\n    });\n  }; // After data chagnes, we turn the flag back off\n  // so that if data actually changes when we're not\n  // editing it, the page is reset\n\n\n  useEffect(function () {\n    setSkipPageReset(false);\n  }, [data]);\n  return __jsx(Styles, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 5\n    }\n  }, __jsx(Table, {\n    columns: columns,\n    data: data,\n    updateData: updateData,\n    skipPageReset: skipPageReset,\n    editableFields: editableFields,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 7\n    }\n  }));\n}\n\n_s2(TableComponent, \"sA641OB1DfZVk+1S50kd2PP+SoU=\");\n\n_c4 = TableComponent;\nexport default TableComponent; // Be sure to pass our updateData and the skipPageReset option\n\nfunction Table(_ref4) {\n  _s4();\n\n  var _this2 = this,\n      _s3 = $RefreshSig$();\n\n  var columns = _ref4.columns,\n      data = _ref4.data,\n      updateData = _ref4.updateData,\n      skipPageReset = _ref4.skipPageReset,\n      editableFields = _ref4.editableFields;\n\n  // Create an editable cell renderer\n  var EditableCell = function EditableCell(_ref5) {\n    _s3();\n\n    var initialValue = _ref5.value,\n        index = _ref5.row.index,\n        id = _ref5.column.id,\n        updateData = _ref5.updateData,\n        rest = _objectWithoutProperties(_ref5, [\"value\", \"row\", \"column\", \"updateData\"]);\n\n    // We need to keep and update the state of the cell normally\n    var _useState2 = useState(initialValue),\n        value = _useState2[0],\n        setValue = _useState2[1];\n\n    var onChange = function onChange(e) {\n      setValue(e.target.value);\n    }; // We'll only update the external data when the input is blurred\n\n\n    var onBlur = function onBlur() {\n      updateData(index, id, value);\n    }; // If the initialValue is changed external, sync it up with our state\n\n\n    useEffect(function () {\n      setValue(initialValue);\n    }, [initialValue]);\n    return editableFields.includes(id) ? __jsx(\"input\", {\n      value: value,\n      onChange: onChange,\n      onBlur: onBlur,\n      className: \"w-full bg-transparent\",\n      __self: _this2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 7\n      }\n    }) : __jsx(\"p\", {\n      __self: _this2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 7\n      }\n    }, value);\n  };\n\n  _s3(EditableCell, \"tWiMN+R1KrlPc+I/v9D+hnPBFtc=\");\n\n  var defaultColumn = React.useMemo(function () {\n    return {\n      // Let's set up our default Filter UI\n      Filter: DefaultColumnFilter,\n      Cell: EditableCell\n    };\n  }, []);\n\n  var _useTable = useTable({\n    columns: columns,\n    data: data,\n    defaultColumn: defaultColumn,\n    // use the skipPageReset option to disable page resetting temporarily\n    autoResetPage: !skipPageReset,\n    updateData: updateData\n  }, useColumnOrder, useFilters, useSortBy, usePagination, useRowSelect, function (hooks) {\n    hooks.visibleColumns.push(function (columns) {\n      return [// Let's make a column for selection\n      {\n        id: 'selection',\n        // The header can use the table's getToggleAllRowsSelectedProps method\n        // to render a checkbox\n        Header: function Header(_ref6) {\n          var getToggleAllPageRowsSelectedProps = _ref6.getToggleAllPageRowsSelectedProps;\n          return __jsx(\"div\", {\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 267,\n              columnNumber: 13\n            }\n          }, __jsx(Checkbox, _extends({}, getToggleAllPageRowsSelectedProps(), {\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 268,\n              columnNumber: 15\n            }\n          })));\n        },\n        // The cell can use the individual row's getToggleRowSelectedProps method\n        // to the render a checkbox\n        Cell: function Cell(_ref7) {\n          var row = _ref7.row;\n          return __jsx(\"div\", {\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 274,\n              columnNumber: 13\n            }\n          }, __jsx(Checkbox, _extends({}, row.getToggleRowSelectedProps(), {\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 275,\n              columnNumber: 15\n            }\n          })));\n        }\n      }].concat(_toConsumableArray(columns));\n    });\n  }),\n      getTableProps = _useTable.getTableProps,\n      getTableBodyProps = _useTable.getTableBodyProps,\n      headerGroups = _useTable.headerGroups,\n      prepareRow = _useTable.prepareRow,\n      page = _useTable.page,\n      canPreviousPage = _useTable.canPreviousPage,\n      canNextPage = _useTable.canNextPage,\n      pageOptions = _useTable.pageOptions,\n      pageCount = _useTable.pageCount,\n      gotoPage = _useTable.gotoPage,\n      nextPage = _useTable.nextPage,\n      previousPage = _useTable.previousPage,\n      setPageSize = _useTable.setPageSize,\n      selectedFlatRows = _useTable.selectedFlatRows,\n      state = _useTable.state;\n\n  var pageIndex = state.pageIndex,\n      pageSize = state.pageSize,\n      selectedRowIds = state.selectedRowIds;\n  var spring = React.useMemo(function () {\n    return {\n      type: 'spring',\n      damping: 50,\n      stiffness: 100\n    };\n  }, []); // Render the UI for your table\n\n  return __jsx(React.Fragment, null, __jsx(\"table\", _extends({}, getTableProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 298,\n      columnNumber: 7\n    }\n  }), __jsx(\"thead\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 299,\n      columnNumber: 9\n    }\n  }, headerGroups.map(function (headerGroup) {\n    return __jsx(\"tr\", _extends({}, headerGroup.getHeaderGroupProps(), {\n      __self: _this2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 13\n      }\n    }), headerGroup.headers.map(function (column) {\n      return __jsx(motion.th, _extends({}, column.getHeaderProps({\n        layoutTransition: spring,\n        style: {}\n      }), {\n        __self: _this2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 303,\n          columnNumber: 17\n        }\n      }), __jsx(\"div\", _extends({}, column.getSortByToggleProps(), {\n        __self: _this2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 309,\n          columnNumber: 19\n        }\n      }), column.render('Header'), __jsx(\"span\", {\n        __self: _this2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 311,\n          columnNumber: 21\n        }\n      }, column.isSorted ? column.isSortedDesc ? ' 🔽' : ' 🔼' : '')), __jsx(\"div\", {\n        __self: _this2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 319,\n          columnNumber: 19\n        }\n      }, column.canFilter ? column.render('Filter') : null));\n    }));\n  })), __jsx(\"tbody\", _extends({}, getTableBodyProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 325,\n      columnNumber: 9\n    }\n  }), __jsx(AnimatePresence, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 326,\n      columnNumber: 11\n    }\n  }, page.map(function (row, i) {\n    prepareRow(row);\n    return __jsx(motion.tr, _extends({}, row.getRowProps({\n      layoutTransition: spring,\n      exit: {\n        opacity: 0,\n        maxHeight: 0\n      }\n    }), {\n      __self: _this2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 330,\n        columnNumber: 17\n      }\n    }), row.cells.map(function (cell, i) {\n      return __jsx(motion.td, _extends({}, cell.getCellProps({\n        layoutTransition: spring\n      }), {\n        __self: _this2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 338,\n          columnNumber: 23\n        }\n      }), cell.render('Cell'));\n    }));\n  })))), __jsx(\"div\", {\n    className: \"pagination\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 353,\n      columnNumber: 7\n    }\n  }, __jsx(\"button\", {\n    onClick: function onClick() {\n      return gotoPage(0);\n    },\n    disabled: !canPreviousPage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 354,\n      columnNumber: 9\n    }\n  }, '<<'), ' ', __jsx(\"button\", {\n    onClick: function onClick() {\n      return previousPage();\n    },\n    disabled: !canPreviousPage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 357,\n      columnNumber: 9\n    }\n  }, '<'), ' ', __jsx(\"button\", {\n    onClick: function onClick() {\n      return nextPage();\n    },\n    disabled: !canNextPage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 360,\n      columnNumber: 9\n    }\n  }, '>'), ' ', __jsx(\"button\", {\n    onClick: function onClick() {\n      return gotoPage(pageCount - 1);\n    },\n    disabled: !canNextPage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 363,\n      columnNumber: 9\n    }\n  }, '>>'), ' ', __jsx(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 366,\n      columnNumber: 9\n    }\n  }, \"Page\", ' ', __jsx(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 368,\n      columnNumber: 11\n    }\n  }, pageIndex + 1, \" of \", pageOptions.length), ' '), __jsx(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 372,\n      columnNumber: 9\n    }\n  }, \"| Go to page:\", ' ', __jsx(\"input\", {\n    type: \"number\",\n    defaultValue: pageIndex + 1,\n    onChange: function onChange(e) {\n      var page = e.target.value ? Number(e.target.value) - 1 : 0;\n      gotoPage(page);\n    },\n    style: {\n      width: '100px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 374,\n      columnNumber: 11\n    }\n  })), ' ', __jsx(\"select\", {\n    value: pageSize,\n    onChange: function onChange(e) {\n      setPageSize(Number(e.target.value));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 386,\n      columnNumber: 9\n    }\n  }, [10, 20, 30, 40, 50].map(function (pageSize) {\n    return __jsx(\"option\", {\n      key: pageSize,\n      value: pageSize,\n      __self: _this2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 393,\n        columnNumber: 13\n      }\n    }, \"Show \", pageSize);\n  }))), __jsx(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 399,\n      columnNumber: 7\n    }\n  }, __jsx(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 400,\n      columnNumber: 9\n    }\n  }, JSON.stringify({\n    state: state,\n    selectedRowIds: selectedRowIds,\n    'selectedFlatRows[].original': selectedFlatRows.map(function (d) {\n      return d.original;\n    })\n  }, null, 2))));\n}\n\n_s4(Table, \"x2f5dnUIXY3UUH2UfHhPb9TNTJI=\", false, function () {\n  return [useTable];\n});\n\n_c5 = Table;\n\nvar _c, _c2, _c3, _c4, _c5;\n\n$RefreshReg$(_c, \"Styles\");\n$RefreshReg$(_c2, \"DefaultColumnFilter\");\n$RefreshReg$(_c3, \"SelectColumnFilter\");\n$RefreshReg$(_c4, \"TableComponent\");\n$RefreshReg$(_c5, \"Table\");","map":{"version":3,"sources":["/mnt/c/Users/arash/Documents/DevInDoc/Getaboard/demoEmail/reward-test/src/components/Table.tsx"],"names":["React","useEffect","useState","useTable","usePagination","useRowSelect","useSortBy","useFilters","useColumnOrder","motion","AnimatePresence","styled","Checkbox","Styles","div","DefaultColumnFilter","column","filterValue","preFilteredRows","setFilter","count","length","e","target","value","undefined","SelectColumnFilter","id","options","useMemo","Set","forEach","row","add","values","map","option","i","TableComponent","columns","data","setData","editableFields","skipPageReset","setSkipPageReset","updateData","rowIndex","columnId","old","index","Table","EditableCell","initialValue","rest","setValue","onChange","onBlur","includes","defaultColumn","Filter","Cell","autoResetPage","hooks","visibleColumns","push","Header","getToggleAllPageRowsSelectedProps","getToggleRowSelectedProps","getTableProps","getTableBodyProps","headerGroups","prepareRow","page","canPreviousPage","canNextPage","pageOptions","pageCount","gotoPage","nextPage","previousPage","setPageSize","selectedFlatRows","state","pageIndex","pageSize","selectedRowIds","spring","type","damping","stiffness","headerGroup","getHeaderGroupProps","headers","getHeaderProps","layoutTransition","style","getSortByToggleProps","render","isSorted","isSortedDesc","canFilter","getRowProps","exit","opacity","maxHeight","cells","cell","getCellProps","Number","width","JSON","stringify","d","original"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport clsx from 'clsx'\nimport {\n  useTable,\n  usePagination,\n  useRowSelect,\n  useSortBy,\n  useFilters,\n  useColumnOrder,\n} from 'react-table'\nimport { motion, AnimatePresence } from 'framer-motion'\nimport matchSorter from 'match-sorter'\n\nimport styled from 'styled-components'\nimport Input from './Input'\nimport Checkbox from './Checkbox'\n\nexport interface Props {\n  className?: string | Record<string, unknown>\n  ordered?: boolean\n  item?: boolean\n}\n\nconst Styles = styled.div`\n  padding: 1rem;\n\n  table {\n    border-spacing: 0;\n    border: 1px solid black;\n\n    tr {\n      :last-child {\n        td {\n          border-bottom: 0;\n        }\n      }\n    }\n\n    th,\n    td {\n      margin: 0;\n      padding: 0.5rem;\n      border-bottom: 1px solid black;\n      border-right: 1px solid black;\n\n      :last-child {\n        border-right: 0;\n      }\n\n      input {\n        font-size: 1rem;\n        padding: 0;\n        margin: 0;\n        border: 0;\n      }\n    }\n\n    .pagination {\n      padding: 0.5rem;\n    }\n  }\n`\n\n// Define a default UI for filtering\nfunction DefaultColumnFilter({\n  column: { filterValue, preFilteredRows, setFilter },\n}) {\n  const count = preFilteredRows.length\n\n  return (\n    <input\n      value={filterValue || ''}\n      onChange={(e) => {\n        setFilter(e.target.value || undefined) // Set undefined to remove the filter entirely\n      }}\n      placeholder={`Search ${count} records...`}\n    />\n  )\n}\n\n// This is a custom filter UI for selecting\n// a unique option from a list\nfunction SelectColumnFilter({\n  column: { filterValue, setFilter, preFilteredRows, id },\n}) {\n  // Calculate the options for filtering\n  // using the preFilteredRows\n  const options = React.useMemo(() => {\n    const options = new Set()\n    preFilteredRows.forEach((row) => {\n      options.add(row.values[id])\n    })\n    return [...options.values()]\n  }, [id, preFilteredRows])\n\n  // Render a multi-select box\n  return (\n    <select\n      value={filterValue}\n      onChange={(e) => {\n        setFilter(e.target.value || undefined)\n      }}\n    >\n      <option value=\"\">All</option>\n      {options.map((option, i) => (\n        <option key={i} value={option}>\n          {option}\n        </option>\n      ))}\n    </select>\n  )\n}\n\nfunction TableComponent({\n  columns,\n  data,\n  setData,\n  editableFields,\n}: {\n  editableFields?: Array<unknown>\n  columns: {\n    Header?: string\n    columns: {\n      Header: string\n      accessor: string\n      Cell?: unknown\n    }[]\n  }[]\n  data: Record<string, unknown>\n  setData: React.Dispatch<unknown>\n}) {\n  const [skipPageReset, setSkipPageReset] = useState(false)\n\n  // We need to keep the table from resetting the pageIndex when we\n  // Update data. So we can keep track of that flag with a ref.\n\n  // When our cell renderer calls updateMyData, we'll use\n  // the rowIndex, columnId and new value to update the\n  // original data\n  const updateData = (rowIndex, columnId, value) => {\n    // We also turn on the flag to not reset the page\n    setSkipPageReset(true)\n    setData((old) =>\n      old.map((row, index) => {\n        if (index === rowIndex) {\n          return {\n            ...old[rowIndex],\n            [columnId]: value,\n          }\n        }\n        return row\n      })\n    )\n  }\n\n  // After data chagnes, we turn the flag back off\n  // so that if data actually changes when we're not\n  // editing it, the page is reset\n  useEffect(() => {\n    setSkipPageReset(false)\n  }, [data])\n\n  return (\n    <Styles>\n      <Table\n        columns={columns}\n        data={data}\n        updateData={updateData}\n        skipPageReset={skipPageReset}\n        editableFields={editableFields}\n      />\n    </Styles>\n  )\n}\n\nexport default TableComponent\n\n// Be sure to pass our updateData and the skipPageReset option\nfunction Table({ columns, data, updateData, skipPageReset, editableFields }) {\n  // Create an editable cell renderer\n  const EditableCell = ({\n    value: initialValue,\n    row: { index },\n    column: { id },\n    updateData, // This is a custom function that we supplied to our table instance\n    ...rest\n  }) => {\n    // We need to keep and update the state of the cell normally\n    const [value, setValue] = useState(initialValue)\n\n    const onChange = (e) => {\n      setValue(e.target.value)\n    }\n\n    // We'll only update the external data when the input is blurred\n    const onBlur = () => {\n      updateData(index, id, value)\n    }\n\n    // If the initialValue is changed external, sync it up with our state\n    useEffect(() => {\n      setValue(initialValue)\n    }, [initialValue])\n\n    return editableFields.includes(id) ? (\n      <input\n        value={value}\n        onChange={onChange}\n        onBlur={onBlur}\n        className=\"w-full bg-transparent\"\n      />\n    ) : (\n      <p>{value}</p>\n    )\n  }\n\n  const defaultColumn = React.useMemo(\n    () => ({\n      // Let's set up our default Filter UI\n      Filter: DefaultColumnFilter,\n      Cell: EditableCell,\n    }),\n    []\n  )\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    prepareRow,\n    page,\n    canPreviousPage,\n    canNextPage,\n    pageOptions,\n    pageCount,\n    gotoPage,\n    nextPage,\n    previousPage,\n    setPageSize,\n    selectedFlatRows,\n    // visibleColumns,\n    // setColumnOrder,\n    state,\n  } = useTable(\n    {\n      columns,\n      data,\n      defaultColumn,\n\n      // use the skipPageReset option to disable page resetting temporarily\n      autoResetPage: !skipPageReset,\n      updateData,\n    },\n    useColumnOrder,\n    useFilters,\n    useSortBy,\n    usePagination,\n    useRowSelect,\n    (hooks) => {\n      hooks.visibleColumns.push((columns) => [\n        // Let's make a column for selection\n        {\n          id: 'selection',\n          // The header can use the table's getToggleAllRowsSelectedProps method\n          // to render a checkbox\n          Header: ({ getToggleAllPageRowsSelectedProps }) => (\n            <div>\n              <Checkbox {...getToggleAllPageRowsSelectedProps()} />\n            </div>\n          ),\n          // The cell can use the individual row's getToggleRowSelectedProps method\n          // to the render a checkbox\n          Cell: ({ row }) => (\n            <div>\n              <Checkbox {...row.getToggleRowSelectedProps()} />\n            </div>\n          ),\n        },\n        ...columns,\n      ])\n    }\n  )\n\n  const { pageIndex, pageSize, selectedRowIds } = state\n\n  const spring = React.useMemo(\n    () => ({\n      type: 'spring',\n      damping: 50,\n      stiffness: 100,\n    }),\n    []\n  )\n\n  // Render the UI for your table\n  return (\n    <>\n      <table {...getTableProps()}>\n        <thead>\n          {headerGroups.map((headerGroup) => (\n            <tr {...headerGroup.getHeaderGroupProps()}>\n              {headerGroup.headers.map((column) => (\n                <motion.th\n                  {...column.getHeaderProps({\n                    layoutTransition: spring,\n                    style: {},\n                  })}\n                >\n                  <div {...column.getSortByToggleProps()}>\n                    {column.render('Header')}\n                    <span>\n                      {column.isSorted\n                        ? column.isSortedDesc\n                          ? ' 🔽'\n                          : ' 🔼'\n                        : ''}\n                    </span>\n                  </div>\n                  <div>{column.canFilter ? column.render('Filter') : null}</div>\n                </motion.th>\n              ))}\n            </tr>\n          ))}\n        </thead>\n        <tbody {...getTableBodyProps()}>\n          <AnimatePresence>\n            {page.map((row, i) => {\n              prepareRow(row)\n              return (\n                <motion.tr\n                  {...row.getRowProps({\n                    layoutTransition: spring,\n                    exit: { opacity: 0, maxHeight: 0 },\n                  })}\n                >\n                  {row.cells.map((cell, i) => {\n                    return (\n                      <motion.td\n                        {...cell.getCellProps({\n                          layoutTransition: spring,\n                        })}\n                      >\n                        {cell.render('Cell')}\n                      </motion.td>\n                    )\n                  })}\n                </motion.tr>\n              )\n            })}\n          </AnimatePresence>\n        </tbody>\n      </table>\n      <div className=\"pagination\">\n        <button onClick={() => gotoPage(0)} disabled={!canPreviousPage}>\n          {'<<'}\n        </button>{' '}\n        <button onClick={() => previousPage()} disabled={!canPreviousPage}>\n          {'<'}\n        </button>{' '}\n        <button onClick={() => nextPage()} disabled={!canNextPage}>\n          {'>'}\n        </button>{' '}\n        <button onClick={() => gotoPage(pageCount - 1)} disabled={!canNextPage}>\n          {'>>'}\n        </button>{' '}\n        <span>\n          Page{' '}\n          <strong>\n            {pageIndex + 1} of {pageOptions.length}\n          </strong>{' '}\n        </span>\n        <span>\n          | Go to page:{' '}\n          <input\n            type=\"number\"\n            defaultValue={pageIndex + 1}\n            onChange={(e) => {\n              const page = e.target.value ? Number(e.target.value) - 1 : 0\n              gotoPage(page)\n            }}\n            style={{\n              width: '100px',\n            }}\n          />\n        </span>{' '}\n        <select\n          value={pageSize}\n          onChange={(e) => {\n            setPageSize(Number(e.target.value))\n          }}\n        >\n          {[10, 20, 30, 40, 50].map((pageSize) => (\n            <option key={pageSize} value={pageSize}>\n              Show {pageSize}\n            </option>\n          ))}\n        </select>\n      </div>\n      <pre>\n        <code>\n          {JSON.stringify(\n            {\n              state,\n              selectedRowIds: selectedRowIds,\n              'selectedFlatRows[].original': selectedFlatRows.map(\n                (d) => d.original\n              ),\n            },\n            null,\n            2\n          )}\n        </code>\n      </pre>\n    </>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}