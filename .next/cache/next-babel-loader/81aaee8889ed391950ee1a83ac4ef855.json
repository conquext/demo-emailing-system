{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _jsxFileName = \"/mnt/c/Users/arash/Documents/DevInDoc/Getaboard/demoEmail/reward-test/src/components/Table.tsx\",\n    _s = $RefreshSig$(),\n    _this = this,\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  padding: 1rem;\\n\\n  table {\\n    border-spacing: 0;\\n    border: 1px solid black;\\n\\n    tr {\\n      :last-child {\\n        td {\\n          border-bottom: 0;\\n        }\\n      }\\n    }\\n\\n    th,\\n    td {\\n      margin: 0;\\n      padding: 0.5rem;\\n      border-bottom: 1px solid black;\\n      border-right: 1px solid black;\\n\\n      :last-child {\\n        border-right: 0;\\n      }\\n\\n      input {\\n        font-size: 1rem;\\n        padding: 0;\\n        margin: 0;\\n        border: 0;\\n      }\\n    }\\n\\n    .pagination {\\n      padding: 0.5rem;\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useEffect, useState } from 'react';\nimport { useTable, usePagination } from 'react-table';\nimport styled from 'styled-components';\nvar Styles = styled.div(_templateObject());\n_c = Styles;\n\nfunction TableComponent(_ref) {\n  _s();\n\n  var columns = _ref.columns,\n      data = _ref.data,\n      setData = _ref.setData;\n\n  var _useState = useState(false),\n      skipPageReset = _useState[0],\n      setSkipPageReset = _useState[1]; // We need to keep the table from resetting the pageIndex when we\n  // Update data. So we can keep track of that flag with a ref.\n  // When our cell renderer calls updateMyData, we'll use\n  // the rowIndex, columnId and new value to update the\n  // original data\n\n\n  var updateData = function updateData(rowIndex, columnId, value) {\n    // We also turn on the flag to not reset the page\n    setSkipPageReset(true);\n    setData(function (old) {\n      return old.map(function (row, index) {\n        if (index === rowIndex) {\n          return _objectSpread(_objectSpread({}, old[rowIndex]), {}, _defineProperty({}, columnId, value));\n        }\n\n        return row;\n      });\n    });\n  }; // After data chagnes, we turn the flag back off\n  // so that if data actually changes when we're not\n  // editing it, the page is reset\n\n\n  useEffect(function () {\n    setSkipPageReset(false);\n  }, [data]);\n  return __jsx(Styles, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 5\n    }\n  }, __jsx(Table, {\n    columns: columns,\n    data: data,\n    updateData: true,\n    skipPageReset: skipPageReset,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }\n  }));\n}\n\n_s(TableComponent, \"sA641OB1DfZVk+1S50kd2PP+SoU=\");\n\n_c2 = TableComponent;\nexport default TableComponent; // Create an editable cell renderer\n\nvar EditableCell = function EditableCell(_ref2) {\n  _s2();\n\n  var initialValue = _ref2.value,\n      index = _ref2.row.index,\n      id = _ref2.column.id,\n      updateData = _ref2.updateData;\n\n  // We need to keep and update the state of the cell normally\n  var _useState2 = useState(initialValue),\n      value = _useState2[0],\n      setValue = _useState2[1];\n\n  var onChange = function onChange(e) {\n    setValue(e.target.value);\n  }; // We'll only update the external data when the input is blurred\n\n\n  var onBlur = function onBlur() {\n    updateData(index, id, value);\n  }; // If the initialValue is changed external, sync it up with our state\n\n\n  useEffect(function () {\n    setValue(initialValue);\n  }, [initialValue]);\n  return __jsx(\"input\", {\n    value: value,\n    onChange: onChange,\n    onBlur: onBlur,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 10\n    }\n  });\n}; // Set our editable cell renderer as the default Cell renderer\n\n\n_s2(EditableCell, \"tWiMN+R1KrlPc+I/v9D+hnPBFtc=\");\n\n_c3 = EditableCell;\nvar defaultColumn = {\n  Cell: EditableCell\n}; // Be sure to pass our updateData and the skipPageReset option\n\nfunction Table(_ref3) {\n  _s3();\n\n  var _this2 = this;\n\n  var columns = _ref3.columns,\n      data = _ref3.data,\n      updateData = _ref3.updateData,\n      skipPageReset = _ref3.skipPageReset;\n\n  var _useTable = useTable({\n    columns: columns,\n    data: data,\n    defaultColumn: defaultColumn,\n    // use the skipPageReset option to disable page resetting temporarily\n    autoResetPage: !skipPageReset,\n    updateData: updateData\n  }, usePagination),\n      getTableProps = _useTable.getTableProps,\n      getTableBodyProps = _useTable.getTableBodyProps,\n      headerGroups = _useTable.headerGroups,\n      prepareRow = _useTable.prepareRow,\n      page = _useTable.page,\n      canPreviousPage = _useTable.canPreviousPage,\n      canNextPage = _useTable.canNextPage,\n      pageOptions = _useTable.pageOptions,\n      pageCount = _useTable.pageCount,\n      gotoPage = _useTable.gotoPage,\n      nextPage = _useTable.nextPage,\n      previousPage = _useTable.previousPage,\n      setPageSize = _useTable.setPageSize,\n      _useTable$state = _useTable.state,\n      pageIndex = _useTable$state.pageIndex,\n      pageSize = _useTable$state.pageSize; // Render the UI for your table\n\n\n  return __jsx(React.Fragment, null, __jsx(\"table\", _extends({}, getTableProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 7\n    }\n  }), __jsx(\"thead\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 9\n    }\n  }, headerGroups.map(function (headerGroup) {\n    return __jsx(\"tr\", _extends({}, headerGroup.getHeaderGroupProps(), {\n      __self: _this2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 13\n      }\n    }), headerGroup.headers.map(function (column) {\n      return __jsx(\"th\", _extends({}, column.getHeaderProps(), {\n        __self: _this2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 17\n        }\n      }), column.render('Header'));\n    }));\n  })), __jsx(\"tbody\", _extends({}, getTableBodyProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 9\n    }\n  }), page.map(function (row, i) {\n    prepareRow(row);\n    return __jsx(\"tr\", _extends({}, row.getRowProps(), {\n      __self: _this2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 15\n      }\n    }), row.cells.map(function (cell) {\n      return __jsx(\"td\", _extends({}, cell.getCellProps(), {\n        __self: _this2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 26\n        }\n      }), cell.render('Cell'));\n    }));\n  }))), __jsx(\"div\", {\n    className: \"pagination\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 7\n    }\n  }, __jsx(\"button\", {\n    onClick: function onClick() {\n      return gotoPage(0);\n    },\n    disabled: !canPreviousPage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 9\n    }\n  }, '<<'), ' ', __jsx(\"button\", {\n    onClick: function onClick() {\n      return previousPage();\n    },\n    disabled: !canPreviousPage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 9\n    }\n  }, '<'), ' ', __jsx(\"button\", {\n    onClick: function onClick() {\n      return nextPage();\n    },\n    disabled: !canNextPage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 9\n    }\n  }, '>'), ' ', __jsx(\"button\", {\n    onClick: function onClick() {\n      return gotoPage(pageCount - 1);\n    },\n    disabled: !canNextPage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 9\n    }\n  }, '>>'), ' ', __jsx(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 9\n    }\n  }, \"Page\", ' ', __jsx(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 11\n    }\n  }, pageIndex + 1, \" of \", pageOptions.length), ' '), __jsx(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 9\n    }\n  }, \"| Go to page:\", ' ', __jsx(\"input\", {\n    type: \"number\",\n    defaultValue: pageIndex + 1,\n    onChange: function onChange(e) {\n      var page = e.target.value ? Number(e.target.value) - 1 : 0;\n      gotoPage(page);\n    },\n    style: {\n      width: '100px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 11\n    }\n  })), ' ', __jsx(\"select\", {\n    value: pageSize,\n    onChange: function onChange(e) {\n      setPageSize(Number(e.target.value));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 9\n    }\n  }, [10, 20, 30, 40, 50].map(function (pageSize) {\n    return __jsx(\"option\", {\n      key: pageSize,\n      value: pageSize,\n      __self: _this2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 13\n      }\n    }, \"Show \", pageSize);\n  }))));\n}\n\n_s3(Table, \"JI8Fu8DOlDYS7rqqAlOOkpg3H7Y=\", false, function () {\n  return [useTable];\n});\n\n_c4 = Table;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"Styles\");\n$RefreshReg$(_c2, \"TableComponent\");\n$RefreshReg$(_c3, \"EditableCell\");\n$RefreshReg$(_c4, \"Table\");","map":{"version":3,"sources":["/mnt/c/Users/arash/Documents/DevInDoc/Getaboard/demoEmail/reward-test/src/components/Table.tsx"],"names":["React","useEffect","useState","useTable","usePagination","styled","Styles","div","TableComponent","columns","data","setData","skipPageReset","setSkipPageReset","updateData","rowIndex","columnId","value","old","map","row","index","EditableCell","initialValue","id","column","setValue","onChange","e","target","onBlur","defaultColumn","Cell","Table","autoResetPage","getTableProps","getTableBodyProps","headerGroups","prepareRow","page","canPreviousPage","canNextPage","pageOptions","pageCount","gotoPage","nextPage","previousPage","setPageSize","state","pageIndex","pageSize","headerGroup","getHeaderGroupProps","headers","getHeaderProps","render","i","getRowProps","cells","cell","getCellProps","length","Number","width"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport clsx from 'clsx'\nimport { useTable, usePagination } from 'react-table'\nimport styled from 'styled-components'\n\nexport interface Props {\n  className?: string | Record<string, unknown>\n  ordered?: boolean\n  item?: boolean\n}\n\nconst Styles = styled.div`\n  padding: 1rem;\n\n  table {\n    border-spacing: 0;\n    border: 1px solid black;\n\n    tr {\n      :last-child {\n        td {\n          border-bottom: 0;\n        }\n      }\n    }\n\n    th,\n    td {\n      margin: 0;\n      padding: 0.5rem;\n      border-bottom: 1px solid black;\n      border-right: 1px solid black;\n\n      :last-child {\n        border-right: 0;\n      }\n\n      input {\n        font-size: 1rem;\n        padding: 0;\n        margin: 0;\n        border: 0;\n      }\n    }\n\n    .pagination {\n      padding: 0.5rem;\n    }\n  }\n`\n\nfunction TableComponent({\n  columns,\n  data,\n  setData,\n}: {\n  columns: {\n    Header?: string\n    columns: {\n      Header: string\n      accessor: string\n    }[]\n  }[]\n  data: Record<string, unknown>\n  setData: React.Dispatch<unknown>\n}) {\n  const [skipPageReset, setSkipPageReset] = useState(false)\n\n  // We need to keep the table from resetting the pageIndex when we\n  // Update data. So we can keep track of that flag with a ref.\n\n  // When our cell renderer calls updateMyData, we'll use\n  // the rowIndex, columnId and new value to update the\n  // original data\n  const updateData = (rowIndex, columnId, value) => {\n    // We also turn on the flag to not reset the page\n    setSkipPageReset(true)\n    setData((old) =>\n      old.map((row, index) => {\n        if (index === rowIndex) {\n          return {\n            ...old[rowIndex],\n            [columnId]: value,\n          }\n        }\n        return row\n      })\n    )\n  }\n\n  // After data chagnes, we turn the flag back off\n  // so that if data actually changes when we're not\n  // editing it, the page is reset\n  useEffect(() => {\n    setSkipPageReset(false)\n  }, [data])\n\n  return (\n    <Styles>\n      <Table\n        columns={columns}\n        data={data}\n        updateData\n        skipPageReset={skipPageReset}\n      />\n    </Styles>\n  )\n}\n\nexport default TableComponent\n\n// Create an editable cell renderer\nconst EditableCell = ({\n  value: initialValue,\n  row: { index },\n  column: { id },\n  updateData, // This is a custom function that we supplied to our table instance\n}) => {\n  // We need to keep and update the state of the cell normally\n  const [value, setValue] = useState(initialValue)\n\n  const onChange = (e) => {\n    setValue(e.target.value)\n  }\n\n  // We'll only update the external data when the input is blurred\n  const onBlur = () => {\n    updateData(index, id, value)\n  }\n\n  // If the initialValue is changed external, sync it up with our state\n  useEffect(() => {\n    setValue(initialValue)\n  }, [initialValue])\n\n  return <input value={value} onChange={onChange} onBlur={onBlur} />\n}\n\n// Set our editable cell renderer as the default Cell renderer\nconst defaultColumn = {\n  Cell: EditableCell,\n}\n\n// Be sure to pass our updateData and the skipPageReset option\nfunction Table({ columns, data, updateData, skipPageReset }) {\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    prepareRow,\n    page,\n    canPreviousPage,\n    canNextPage,\n    pageOptions,\n    pageCount,\n    gotoPage,\n    nextPage,\n    previousPage,\n    setPageSize,\n    state: { pageIndex, pageSize },\n  } = useTable(\n    {\n      columns,\n      data,\n      defaultColumn,\n      // use the skipPageReset option to disable page resetting temporarily\n      autoResetPage: !skipPageReset,\n      updateData: updateData,\n    },\n    usePagination\n  )\n\n  // Render the UI for your table\n  return (\n    <>\n      <table {...getTableProps()}>\n        <thead>\n          {headerGroups.map((headerGroup) => (\n            <tr {...headerGroup.getHeaderGroupProps()}>\n              {headerGroup.headers.map((column) => (\n                <th {...column.getHeaderProps()}>{column.render('Header')}</th>\n              ))}\n            </tr>\n          ))}\n        </thead>\n        <tbody {...getTableBodyProps()}>\n          {page.map((row, i) => {\n            prepareRow(row)\n            return (\n              <tr {...row.getRowProps()}>\n                {row.cells.map((cell) => {\n                  return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\n                })}\n              </tr>\n            )\n          })}\n        </tbody>\n      </table>\n      <div className=\"pagination\">\n        <button onClick={() => gotoPage(0)} disabled={!canPreviousPage}>\n          {'<<'}\n        </button>{' '}\n        <button onClick={() => previousPage()} disabled={!canPreviousPage}>\n          {'<'}\n        </button>{' '}\n        <button onClick={() => nextPage()} disabled={!canNextPage}>\n          {'>'}\n        </button>{' '}\n        <button onClick={() => gotoPage(pageCount - 1)} disabled={!canNextPage}>\n          {'>>'}\n        </button>{' '}\n        <span>\n          Page{' '}\n          <strong>\n            {pageIndex + 1} of {pageOptions.length}\n          </strong>{' '}\n        </span>\n        <span>\n          | Go to page:{' '}\n          <input\n            type=\"number\"\n            defaultValue={pageIndex + 1}\n            onChange={(e) => {\n              const page = e.target.value ? Number(e.target.value) - 1 : 0\n              gotoPage(page)\n            }}\n            style={{ width: '100px' }}\n          />\n        </span>{' '}\n        <select\n          value={pageSize}\n          onChange={(e) => {\n            setPageSize(Number(e.target.value))\n          }}\n        >\n          {[10, 20, 30, 40, 50].map((pageSize) => (\n            <option key={pageSize} value={pageSize}>\n              Show {pageSize}\n            </option>\n          ))}\n        </select>\n      </div>\n    </>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}