{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s4 = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  padding: 1rem;\\n\\n  table {\\n    border-spacing: 0;\\n    border: 1px solid black;\\n\\n    tr {\\n      :last-child {\\n        td {\\n          border-bottom: 0;\\n        }\\n      }\\n    }\\n\\n    th,\\n    td {\\n      margin: 0;\\n      padding: 0.5rem;\\n      border-bottom: 1px solid black;\\n      border-right: 1px solid black;\\n\\n      :last-child {\\n        border-right: 0;\\n      }\\n\\n      input {\\n        font-size: 1rem;\\n        padding: 0;\\n        margin: 0;\\n        border: 0;\\n      }\\n    }\\n\\n    .pagination {\\n      padding: 0.5rem;\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useEffect, useState } from 'react';\nimport { useTable, usePagination, useRowSelect, useSortBy, useFilters, useColumnOrder, useGlobalFilter } from 'react-table';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport matchSorter from 'match-sorter';\nimport styled from 'styled-components';\nimport Checkbox from './Checkbox';\nvar Styles = styled.div(_templateObject()); // Define a default UI for filtering\n\n_c = Styles;\n\nfunction DefaultColumnFilter(_ref) {\n  var _ref$column = _ref.column,\n      filterValue = _ref$column.filterValue,\n      preFilteredRows = _ref$column.preFilteredRows,\n      setFilter = _ref$column.setFilter;\n  var count = preFilteredRows.length;\n  return __jsx(\"input\", {\n    value: filterValue || '',\n    onChange: function onChange(e) {\n      setFilter(e.target.value || undefined); // Set undefined to remove the filter entirely\n    },\n    placeholder: \"Search \".concat(count, \" records...\")\n  });\n} // This is a custom filter UI for selecting\n// a unique option from a list\n\n\n_c2 = DefaultColumnFilter;\n\nfunction SelectColumnFilter(_ref2) {\n  _s();\n\n  var _ref2$column = _ref2.column,\n      filterValue = _ref2$column.filterValue,\n      setFilter = _ref2$column.setFilter,\n      preFilteredRows = _ref2$column.preFilteredRows,\n      id = _ref2$column.id;\n  // Calculate the options for filtering\n  // using the preFilteredRows\n  var options = React.useMemo(function () {\n    var options = new Set();\n    preFilteredRows.forEach(function (row) {\n      options.add(row.values[id]);\n    }); // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    //@ts-ignore\n\n    return _toConsumableArray(options.values());\n  }, [id, preFilteredRows]); // Render a multi-select box\n\n  return __jsx(\"select\", {\n    value: filterValue,\n    onChange: function onChange(e) {\n      setFilter(e.target.value || undefined);\n    }\n  }, __jsx(\"option\", {\n    value: \"\"\n  }, \"All\"), options.map(function (option, i) {\n    return __jsx(\"option\", {\n      key: i,\n      value: option\n    }, option);\n  }));\n}\n\n_s(SelectColumnFilter, \"UfleS4trXWGxzhzYTKqqYygmjCE=\");\n\n_c3 = SelectColumnFilter;\n\nfunction fuzzyTextFilterFn(rows, id, filterValue) {\n  return matchSorter(rows, filterValue, {\n    keys: [function (row) {\n      return row.values[id];\n    }]\n  });\n} // Let the table remove the filter if the string is empty\n\n\nfuzzyTextFilterFn.autoRemove = function (val) {\n  return !val;\n};\n\nfunction TableComponent(_ref3) {\n  _s2();\n\n  var columns = _ref3.columns,\n      data = _ref3.data,\n      setData = _ref3.setData,\n      editableFields = _ref3.editableFields,\n      options = _ref3.options;\n\n  var _useState = useState(false),\n      skipPageReset = _useState[0],\n      setSkipPageReset = _useState[1]; // We need to keep the table from resetting the pageIndex when we\n  // Update data. So we can keep track of that flag with a ref.\n  // When our cell renderer calls updateMyData, we'll use\n  // the rowIndex, columnId and new value to update the\n  // original data\n\n\n  var updateData = function updateData(rowIndex, columnId, value) {\n    // We also turn on the flag to not reset the page\n    setSkipPageReset(true);\n    setData(function (old) {\n      return old.map(function (row, index) {\n        if (index === rowIndex) {\n          return _objectSpread(_objectSpread({}, old[rowIndex]), {}, _defineProperty({}, columnId, value));\n        }\n\n        return row;\n      });\n    });\n  }; // After data chagnes, we turn the flag back off\n  // so that if data actually changes when we're not\n  // editing it, the page is reset\n\n\n  useEffect(function () {\n    setSkipPageReset(false);\n  }, [data]);\n  return __jsx(Styles, null, __jsx(Table, {\n    columns: columns,\n    data: data,\n    updateData: updateData,\n    skipPageReset: skipPageReset,\n    editableFields: editableFields,\n    options: options\n  }));\n}\n\n_s2(TableComponent, \"sA641OB1DfZVk+1S50kd2PP+SoU=\");\n\n_c4 = TableComponent;\nexport default TableComponent; // Be sure to pass our updateData and the skipPageReset option\n\nfunction Table(_ref4) {\n  _s4();\n\n  var _s3 = $RefreshSig$(),\n      _globalFilter;\n\n  var columns = _ref4.columns,\n      data = _ref4.data,\n      updateData = _ref4.updateData,\n      skipPageReset = _ref4.skipPageReset,\n      editableFields = _ref4.editableFields,\n      options = _ref4.options;\n\n  // Create an editable cell renderer\n  var EditableCell = function EditableCell(_ref5) {\n    _s3();\n\n    var initialValue = _ref5.value,\n        index = _ref5.row.index,\n        id = _ref5.column.id,\n        updateData = _ref5.updateData;\n    var globalFilter = options.globalFilter; // We need to keep and update the state of the cell normally\n\n    var _useState2 = useState(initialValue),\n        value = _useState2[0],\n        setValue = _useState2[1];\n\n    var onChange = function onChange(e) {\n      setValue(e.target.value);\n    }; // We'll only update the external data when the input is blurred\n\n\n    var onBlur = function onBlur() {\n      updateData(index, id, value);\n    }; // If the initialValue is changed external, sync it up with our state\n\n\n    useEffect(function () {\n      setValue(initialValue);\n    }, [initialValue]);\n    return editableFields.includes(id) ? __jsx(\"input\", {\n      value: value,\n      onChange: onChange,\n      onBlur: onBlur,\n      className: \"w-full bg-transparent\"\n    }) : __jsx(\"p\", null, value);\n  };\n\n  _s3(EditableCell, \"tWiMN+R1KrlPc+I/v9D+hnPBFtc=\");\n\n  var defaultColumn = React.useMemo(function () {\n    return {\n      // Let's set up our default Filter UI\n      Filter: DefaultColumnFilter,\n      Cell: EditableCell\n    };\n  }, []);\n\n  var _useTable = useTable({\n    columns: columns,\n    data: data,\n    defaultColumn: defaultColumn,\n    // use the skipPageReset option to disable page resetting temporarily\n    autoResetPage: !skipPageReset,\n    updateData: updateData\n  }, useColumnOrder, useFilters, useGlobalFilter, useSortBy, usePagination, useRowSelect, function (hooks) {\n    hooks.visibleColumns.push(function (columns) {\n      return [// Let's make a column for selection\n      {\n        id: 'selection',\n        // The header can use the table's getToggleAllRowsSelectedProps method\n        // to render a checkbox\n        Header: function Header(_ref6) {\n          var getToggleAllPageRowsSelectedProps = _ref6.getToggleAllPageRowsSelectedProps;\n          return __jsx(\"div\", null, __jsx(Checkbox, getToggleAllPageRowsSelectedProps()));\n        },\n        // The cell can use the individual row's getToggleRowSelectedProps method\n        // to the render a checkbox\n        Cell: function Cell(_ref7) {\n          var row = _ref7.row;\n          return __jsx(\"div\", null, __jsx(Checkbox, row.getToggleRowSelectedProps()));\n        }\n      }].concat(_toConsumableArray(columns));\n    });\n  }),\n      getTableProps = _useTable.getTableProps,\n      getTableBodyProps = _useTable.getTableBodyProps,\n      headerGroups = _useTable.headerGroups,\n      prepareRow = _useTable.prepareRow,\n      page = _useTable.page,\n      canPreviousPage = _useTable.canPreviousPage,\n      canNextPage = _useTable.canNextPage,\n      pageOptions = _useTable.pageOptions,\n      pageCount = _useTable.pageCount,\n      gotoPage = _useTable.gotoPage,\n      nextPage = _useTable.nextPage,\n      previousPage = _useTable.previousPage,\n      setGlobalFilter = _useTable.setGlobalFilter,\n      setGlobalFilteredRows = _useTable.setGlobalFilteredRows,\n      setPageSize = _useTable.setPageSize,\n      selectedFlatRows = _useTable.selectedFlatRows,\n      visibleColumns = _useTable.visibleColumns,\n      preGlobalFilteredRows = _useTable.preGlobalFilteredRows,\n      state = _useTable.state;\n\n  var pageIndex = state.pageIndex,\n      pageSize = state.pageSize,\n      selectedRowIds = state.selectedRowIds;\n  var spring = React.useMemo(function () {\n    return {\n      type: 'spring',\n      damping: 50,\n      stiffness: 100\n    };\n  }, []); // Render the UI for your table\n\n  return __jsx(React.Fragment, null, __jsx(\"table\", getTableProps(), __jsx(\"thead\", null, headerGroups.map(function (headerGroup) {\n    return __jsx(\"tr\", headerGroup.getHeaderGroupProps(), headerGroup.headers.map(function (column) {\n      return __jsx(motion.th, column.getHeaderProps({\n        layoutTransition: spring,\n        style: {}\n      }), __jsx(\"div\", column.getSortByToggleProps(), column.render('Header'), __jsx(\"span\", null, column.isSorted ? column.isSortedDesc ? ' 🔽' : ' 🔼' : '')), __jsx(\"div\", null, column.canFilter ? column.render('Filter') : null));\n    }));\n  }), ((_globalFilter = globalFilter) === null || _globalFilter === void 0 ? void 0 : _globalFilter.use) && __jsx(\"tr\", null, __jsx(\"th\", {\n    colSpan: visibleColumns.length,\n    style: {\n      textAlign: 'left'\n    }\n  }, __jsx(GlobalFilter, {\n    preGlobalFilteredRows: preGlobalFilteredRows,\n    globalFilter: state.globalFilter,\n    setGlobalFilter: setGlobalFilter\n  })))), __jsx(\"tbody\", getTableBodyProps(), __jsx(AnimatePresence, null, page.map(function (row, i) {\n    prepareRow(row);\n    return __jsx(motion.tr, row.getRowProps({\n      layoutTransition: spring,\n      exit: {\n        opacity: 0,\n        maxHeight: 0\n      }\n    }), row.cells.map(function (cell, i) {\n      return __jsx(motion.td, cell.getCellProps({\n        layoutTransition: spring\n      }), cell.render('Cell'));\n    }));\n  })))), __jsx(\"div\", {\n    className: \"pagination\"\n  }, __jsx(\"button\", {\n    onClick: function onClick() {\n      return gotoPage(0);\n    },\n    disabled: !canPreviousPage\n  }, '<<'), ' ', __jsx(\"button\", {\n    onClick: function onClick() {\n      return previousPage();\n    },\n    disabled: !canPreviousPage\n  }, '<'), ' ', __jsx(\"button\", {\n    onClick: function onClick() {\n      return nextPage();\n    },\n    disabled: !canNextPage\n  }, '>'), ' ', __jsx(\"button\", {\n    onClick: function onClick() {\n      return gotoPage(pageCount - 1);\n    },\n    disabled: !canNextPage\n  }, '>>'), ' ', __jsx(\"span\", null, \"Page\", ' ', __jsx(\"strong\", null, pageIndex + 1, \" of \", pageOptions.length), ' '), __jsx(\"span\", null, \"| Go to page:\", ' ', __jsx(\"input\", {\n    type: \"number\",\n    defaultValue: pageIndex + 1,\n    onChange: function onChange(e) {\n      var page = e.target.value ? Number(e.target.value) - 1 : 0;\n      gotoPage(page);\n    },\n    style: {\n      width: '100px'\n    }\n  })), ' ', __jsx(\"select\", {\n    value: pageSize,\n    onChange: function onChange(e) {\n      setPageSize(Number(e.target.value));\n    }\n  }, [10, 20, 30, 40, 50].map(function (pageSize) {\n    return __jsx(\"option\", {\n      key: pageSize,\n      value: pageSize\n    }, \"Show \", pageSize);\n  }))), __jsx(\"pre\", null, __jsx(\"code\", null, JSON.stringify({\n    state: state,\n    selectedRowIds: selectedRowIds,\n    'selectedFlatRows[].original': selectedFlatRows.map(function (d) {\n      return d.original;\n    })\n  }, null, 2))));\n}\n\n_s4(Table, \"l2btzl8fpZBaVjRXEVU/S5rN/QA=\", false, function () {\n  return [useTable];\n});\n\n_c5 = Table;\n\nvar _c, _c2, _c3, _c4, _c5;\n\n$RefreshReg$(_c, \"Styles\");\n$RefreshReg$(_c2, \"DefaultColumnFilter\");\n$RefreshReg$(_c3, \"SelectColumnFilter\");\n$RefreshReg$(_c4, \"TableComponent\");\n$RefreshReg$(_c5, \"Table\");","map":{"version":3,"sources":["/mnt/c/Users/arash/Documents/DevInDoc/Getaboard/demoEmail/reward-test/src/components/Table.tsx"],"names":["React","useEffect","useState","useTable","usePagination","useRowSelect","useSortBy","useFilters","useColumnOrder","useGlobalFilter","motion","AnimatePresence","matchSorter","styled","Checkbox","Styles","div","DefaultColumnFilter","column","filterValue","preFilteredRows","setFilter","count","length","e","target","value","undefined","SelectColumnFilter","id","options","useMemo","Set","forEach","row","add","values","map","option","i","fuzzyTextFilterFn","rows","keys","autoRemove","val","TableComponent","columns","data","setData","editableFields","skipPageReset","setSkipPageReset","updateData","rowIndex","columnId","old","index","Table","EditableCell","initialValue","globalFilter","setValue","onChange","onBlur","includes","defaultColumn","Filter","Cell","autoResetPage","hooks","visibleColumns","push","Header","getToggleAllPageRowsSelectedProps","getToggleRowSelectedProps","getTableProps","getTableBodyProps","headerGroups","prepareRow","page","canPreviousPage","canNextPage","pageOptions","pageCount","gotoPage","nextPage","previousPage","setGlobalFilter","setGlobalFilteredRows","setPageSize","selectedFlatRows","preGlobalFilteredRows","state","pageIndex","pageSize","selectedRowIds","spring","type","damping","stiffness","headerGroup","getHeaderGroupProps","headers","getHeaderProps","layoutTransition","style","getSortByToggleProps","render","isSorted","isSortedDesc","canFilter","use","textAlign","getRowProps","exit","opacity","maxHeight","cells","cell","getCellProps","Number","width","JSON","stringify","d","original"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport clsx from 'clsx'\nimport {\n  useTable,\n  usePagination,\n  useRowSelect,\n  useSortBy,\n  useFilters,\n  useColumnOrder,\n  useGlobalFilter,\n  useAsyncDebounce,\n} from 'react-table'\nimport { motion, AnimatePresence } from 'framer-motion'\nimport matchSorter from 'match-sorter'\n\nimport styled from 'styled-components'\nimport Input from './Input'\nimport Checkbox from './Checkbox'\n\nexport interface Props {\n  className?: string | Record<string, unknown>\n  ordered?: boolean\n  item?: boolean\n}\n\nconst Styles = styled.div`\n  padding: 1rem;\n\n  table {\n    border-spacing: 0;\n    border: 1px solid black;\n\n    tr {\n      :last-child {\n        td {\n          border-bottom: 0;\n        }\n      }\n    }\n\n    th,\n    td {\n      margin: 0;\n      padding: 0.5rem;\n      border-bottom: 1px solid black;\n      border-right: 1px solid black;\n\n      :last-child {\n        border-right: 0;\n      }\n\n      input {\n        font-size: 1rem;\n        padding: 0;\n        margin: 0;\n        border: 0;\n      }\n    }\n\n    .pagination {\n      padding: 0.5rem;\n    }\n  }\n`\n\n// Define a default UI for filtering\nfunction DefaultColumnFilter({\n  column: { filterValue, preFilteredRows, setFilter },\n}) {\n  const count = preFilteredRows.length\n\n  return (\n    <input\n      value={filterValue || ''}\n      onChange={(e) => {\n        setFilter(e.target.value || undefined) // Set undefined to remove the filter entirely\n      }}\n      placeholder={`Search ${count} records...`}\n    />\n  )\n}\n\n// This is a custom filter UI for selecting\n// a unique option from a list\nfunction SelectColumnFilter({\n  column: { filterValue, setFilter, preFilteredRows, id },\n}) {\n  // Calculate the options for filtering\n  // using the preFilteredRows\n  const options = React.useMemo(() => {\n    const options = new Set()\n    preFilteredRows.forEach((row) => {\n      options.add(row.values[id])\n    })\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    //@ts-ignore\n    return [...options.values()]\n  }, [id, preFilteredRows])\n\n  // Render a multi-select box\n  return (\n    <select\n      value={filterValue}\n      onChange={(e) => {\n        setFilter(e.target.value || undefined)\n      }}\n    >\n      <option value=\"\">All</option>\n      {options.map((option, i) => (\n        <option key={i} value={option}>\n          {option}\n        </option>\n      ))}\n    </select>\n  )\n}\n\nfunction fuzzyTextFilterFn(rows, id, filterValue) {\n  return matchSorter(rows, filterValue, { keys: [(row) => row.values[id]] })\n}\n\n// Let the table remove the filter if the string is empty\nfuzzyTextFilterFn.autoRemove = (val) => !val\n\nfunction TableComponent({\n  columns,\n  data,\n  setData,\n  editableFields,\n  options,\n}: {\n  options?: {\n    globalFilter?: { use: boolean; fn: unknown }\n  }\n  editableFields?: Array<unknown>\n  columns: {\n    Header?: string\n    columns: {\n      Header: string\n      accessor: string\n      Cell?: unknown\n    }[]\n  }[]\n  data: Record<string, unknown>\n  setData: React.Dispatch<unknown>\n}) {\n  const [skipPageReset, setSkipPageReset] = useState(false)\n\n  // We need to keep the table from resetting the pageIndex when we\n  // Update data. So we can keep track of that flag with a ref.\n\n  // When our cell renderer calls updateMyData, we'll use\n  // the rowIndex, columnId and new value to update the\n  // original data\n  const updateData = (rowIndex, columnId, value) => {\n    // We also turn on the flag to not reset the page\n    setSkipPageReset(true)\n    setData((old) =>\n      old.map((row, index) => {\n        if (index === rowIndex) {\n          return {\n            ...old[rowIndex],\n            [columnId]: value,\n          }\n        }\n        return row\n      })\n    )\n  }\n\n  // After data chagnes, we turn the flag back off\n  // so that if data actually changes when we're not\n  // editing it, the page is reset\n  useEffect(() => {\n    setSkipPageReset(false)\n  }, [data])\n\n  return (\n    <Styles>\n      <Table\n        columns={columns}\n        data={data}\n        updateData={updateData}\n        skipPageReset={skipPageReset}\n        editableFields={editableFields}\n        options={options}\n      />\n    </Styles>\n  )\n}\n\nexport default TableComponent\n\n// Be sure to pass our updateData and the skipPageReset option\nfunction Table({\n  columns,\n  data,\n  updateData,\n  skipPageReset,\n  editableFields,\n  options,\n}) {\n  // Create an editable cell renderer\n  const EditableCell = ({\n    value: initialValue,\n    row: { index },\n    column: { id },\n    updateData, // This is a custom function that we supplied to our table instance\n  }) => {\n    const { globalFilter } = options\n    // We need to keep and update the state of the cell normally\n    const [value, setValue] = useState(initialValue)\n\n    const onChange = (e) => {\n      setValue(e.target.value)\n    }\n\n    // We'll only update the external data when the input is blurred\n    const onBlur = () => {\n      updateData(index, id, value)\n    }\n\n    // If the initialValue is changed external, sync it up with our state\n    useEffect(() => {\n      setValue(initialValue)\n    }, [initialValue])\n\n    return editableFields.includes(id) ? (\n      <input\n        value={value}\n        onChange={onChange}\n        onBlur={onBlur}\n        className=\"w-full bg-transparent\"\n      />\n    ) : (\n      <p>{value}</p>\n    )\n  }\n\n  const defaultColumn = React.useMemo(\n    () => ({\n      // Let's set up our default Filter UI\n      Filter: DefaultColumnFilter,\n      Cell: EditableCell,\n    }),\n    []\n  )\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    prepareRow,\n    page,\n    canPreviousPage,\n    canNextPage,\n    pageOptions,\n    pageCount,\n    gotoPage,\n    nextPage,\n    previousPage,\n    setGlobalFilter,\n    setGlobalFilteredRows,\n    setPageSize,\n    selectedFlatRows,\n    visibleColumns,\n    preGlobalFilteredRows,\n    // setColumnOrder,\n    state,\n  } = useTable(\n    {\n      columns,\n      data,\n      defaultColumn,\n      // use the skipPageReset option to disable page resetting temporarily\n      autoResetPage: !skipPageReset,\n      updateData,\n    },\n    useColumnOrder,\n    useFilters,\n    useGlobalFilter,\n    useSortBy,\n    usePagination,\n    useRowSelect,\n    (hooks) => {\n      hooks.visibleColumns.push((columns) => [\n        // Let's make a column for selection\n        {\n          id: 'selection',\n          // The header can use the table's getToggleAllRowsSelectedProps method\n          // to render a checkbox\n          Header: ({ getToggleAllPageRowsSelectedProps }) => (\n            <div>\n              <Checkbox {...getToggleAllPageRowsSelectedProps()} />\n            </div>\n          ),\n          // The cell can use the individual row's getToggleRowSelectedProps method\n          // to the render a checkbox\n          Cell: ({ row }) => (\n            <div>\n              <Checkbox {...row.getToggleRowSelectedProps()} />\n            </div>\n          ),\n        },\n        ...columns,\n      ])\n    }\n  )\n\n  const { pageIndex, pageSize, selectedRowIds } = state\n\n  const spring = React.useMemo(\n    () => ({\n      type: 'spring',\n      damping: 50,\n      stiffness: 100,\n    }),\n    []\n  )\n\n  // Render the UI for your table\n  return (\n    <>\n      <table {...getTableProps()}>\n        <thead>\n          {headerGroups.map((headerGroup) => (\n            <tr {...headerGroup.getHeaderGroupProps()}>\n              {headerGroup.headers.map((column) => (\n                <motion.th\n                  {...column.getHeaderProps({\n                    layoutTransition: spring,\n                    style: {},\n                  })}\n                >\n                  <div {...column.getSortByToggleProps()}>\n                    {column.render('Header')}\n                    <span>\n                      {column.isSorted\n                        ? column.isSortedDesc\n                          ? ' 🔽'\n                          : ' 🔼'\n                        : ''}\n                    </span>\n                  </div>\n                  <div>{column.canFilter ? column.render('Filter') : null}</div>\n                </motion.th>\n              ))}\n            </tr>\n          ))}\n          {globalFilter?.use && (\n            <tr>\n              <th\n                colSpan={visibleColumns.length}\n                style={{\n                  textAlign: 'left',\n                }}\n              >\n                <GlobalFilter\n                  preGlobalFilteredRows={preGlobalFilteredRows}\n                  globalFilter={state.globalFilter}\n                  setGlobalFilter={setGlobalFilter}\n                />\n              </th>\n            </tr>\n          )}\n        </thead>\n        <tbody {...getTableBodyProps()}>\n          <AnimatePresence>\n            {page.map((row, i) => {\n              prepareRow(row)\n              return (\n                <motion.tr\n                  {...row.getRowProps({\n                    layoutTransition: spring,\n                    exit: { opacity: 0, maxHeight: 0 },\n                  })}\n                >\n                  {row.cells.map((cell, i) => {\n                    return (\n                      <motion.td\n                        {...cell.getCellProps({\n                          layoutTransition: spring,\n                        })}\n                      >\n                        {cell.render('Cell')}\n                      </motion.td>\n                    )\n                  })}\n                </motion.tr>\n              )\n            })}\n          </AnimatePresence>\n        </tbody>\n      </table>\n      <div className=\"pagination\">\n        <button onClick={() => gotoPage(0)} disabled={!canPreviousPage}>\n          {'<<'}\n        </button>{' '}\n        <button onClick={() => previousPage()} disabled={!canPreviousPage}>\n          {'<'}\n        </button>{' '}\n        <button onClick={() => nextPage()} disabled={!canNextPage}>\n          {'>'}\n        </button>{' '}\n        <button onClick={() => gotoPage(pageCount - 1)} disabled={!canNextPage}>\n          {'>>'}\n        </button>{' '}\n        <span>\n          Page{' '}\n          <strong>\n            {pageIndex + 1} of {pageOptions.length}\n          </strong>{' '}\n        </span>\n        <span>\n          | Go to page:{' '}\n          <input\n            type=\"number\"\n            defaultValue={pageIndex + 1}\n            onChange={(e) => {\n              const page = e.target.value ? Number(e.target.value) - 1 : 0\n              gotoPage(page)\n            }}\n            style={{\n              width: '100px',\n            }}\n          />\n        </span>{' '}\n        <select\n          value={pageSize}\n          onChange={(e) => {\n            setPageSize(Number(e.target.value))\n          }}\n        >\n          {[10, 20, 30, 40, 50].map((pageSize) => (\n            <option key={pageSize} value={pageSize}>\n              Show {pageSize}\n            </option>\n          ))}\n        </select>\n      </div>\n      <pre>\n        <code>\n          {JSON.stringify(\n            {\n              state,\n              selectedRowIds: selectedRowIds,\n              'selectedFlatRows[].original': selectedFlatRows.map(\n                (d) => d.original\n              ),\n            },\n            null,\n            2\n          )}\n        </code>\n      </pre>\n    </>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}