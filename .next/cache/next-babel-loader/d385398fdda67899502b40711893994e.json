{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useState } from 'react';\nimport { useTable, usePagination, useRowSelect, useSortBy, useFilters, useColumnOrder, useGlobalFilter } from 'react-table';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport matchSorter from 'match-sorter';\nimport styled from 'styled-components';\nimport Checkbox from './Checkbox';\nconst Styles = styled.div`\n  padding: 1rem;\n\n  table {\n    border-spacing: 0;\n    border: 1px solid black;\n\n    tr {\n      :last-child {\n        td {\n          border-bottom: 0;\n        }\n      }\n    }\n\n    th,\n    td {\n      margin: 0;\n      padding: 0.5rem;\n      border-bottom: 1px solid black;\n      border-right: 1px solid black;\n\n      :last-child {\n        border-right: 0;\n      }\n\n      input {\n        font-size: 1rem;\n        padding: 0;\n        margin: 0;\n        border: 0;\n      }\n    }\n\n    .pagination {\n      padding: 0.5rem;\n    }\n  }\n`; // Define a default UI for filtering\n\nfunction DefaultColumnFilter({\n  column: {\n    filterValue,\n    preFilteredRows,\n    setFilter\n  }\n}) {\n  const count = preFilteredRows.length;\n  return __jsx(\"input\", {\n    value: filterValue || '',\n    onChange: e => {\n      setFilter(e.target.value || undefined); // Set undefined to remove the filter entirely\n    },\n    placeholder: `Search ${count} records...`\n  });\n}\n\nfunction fuzzyTextFilterFn(rows, id, filterValue) {\n  return matchSorter(rows, filterValue, {\n    keys: [row => row.values[id]]\n  });\n} // Let the table remove the filter if the string is empty\n\n\nfuzzyTextFilterFn.autoRemove = val => !val;\n\nfunction TableComponent({\n  columns,\n  data,\n  setData,\n  editableFields,\n  options\n}) {\n  const {\n    0: skipPageReset,\n    1: setSkipPageReset\n  } = useState(false); // We need to keep the table from resetting the pageIndex when we\n  // Update data. So we can keep track of that flag with a ref.\n  // When our cell renderer calls updateMyData, we'll use\n  // the rowIndex, columnId and new value to update the\n  // original data\n\n  const updateData = (rowIndex, columnId, value) => {\n    // We also turn on the flag to not reset the page\n    setSkipPageReset(true);\n    setData(old => old.map((row, index) => {\n      if (index === rowIndex) {\n        return _objectSpread(_objectSpread({}, old[rowIndex]), {}, {\n          [columnId]: value\n        });\n      }\n\n      return row;\n    }));\n  }; // After data chagnes, we turn the flag back off\n  // so that if data actually changes when we're not\n  // editing it, the page is reset\n\n\n  useEffect(() => {\n    setSkipPageReset(false);\n  }, [data]);\n  return __jsx(Styles, null, __jsx(Table, {\n    columns: columns,\n    data: data,\n    updateData: updateData,\n    skipPageReset: skipPageReset,\n    editableFields: editableFields,\n    options: options\n  }));\n}\n\nexport default TableComponent; // Be sure to pass our updateData and the skipPageReset option\n\nfunction Table({\n  columns,\n  data,\n  updateData,\n  skipPageReset,\n  editableFields,\n  options\n}) {\n  const {\n    globalFilter\n  } = options || {}; // Create an editable cell renderer\n\n  const EditableCell = ({\n    value: initialValue,\n    row: {\n      index\n    },\n    column: {\n      id\n    },\n    updateData // This is a custom function that we supplied to our table instance\n\n  }) => {\n    // We need to keep and update the state of the cell normally\n    const {\n      0: value,\n      1: setValue\n    } = useState(initialValue);\n\n    const onChange = e => {\n      setValue(e.target.value);\n    }; // We'll only update the external data when the input is blurred\n\n\n    const onBlur = () => {\n      updateData(index, id, value);\n    }; // If the initialValue is changed external, sync it up with our state\n\n\n    useEffect(() => {\n      setValue(initialValue);\n    }, [initialValue]);\n    return editableFields.includes(id) ? __jsx(\"input\", {\n      value: value,\n      onChange: onChange,\n      onBlur: onBlur,\n      className: \"w-full bg-transparent\"\n    }) : __jsx(\"p\", null, value);\n  };\n\n  const defaultColumn = React.useMemo(() => ({\n    // Let's set up our default Filter UI\n    Filter: DefaultColumnFilter,\n    Cell: EditableCell\n  }), []);\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    prepareRow,\n    page,\n    canPreviousPage,\n    canNextPage,\n    pageOptions,\n    pageCount,\n    gotoPage,\n    nextPage,\n    previousPage,\n    setGlobalFilter,\n    setGlobalFilteredRows,\n    setPageSize,\n    selectedFlatRows,\n    visibleColumns,\n    preGlobalFilteredRows,\n    // setColumnOrder,\n    state\n  } = useTable({\n    columns,\n    data,\n    defaultColumn,\n    // use the skipPageReset option to disable page resetting temporarily\n    autoResetPage: !skipPageReset,\n    updateData\n  }, useColumnOrder, useFilters, useGlobalFilter, useSortBy, usePagination, useRowSelect, hooks => {\n    hooks.visibleColumns.push(columns => [// Let's make a column for selection\n    {\n      id: 'selection',\n      // The header can use the table's getToggleAllRowsSelectedProps method\n      // to render a checkbox\n      Header: ({\n        getToggleAllPageRowsSelectedProps\n      }) => __jsx(\"div\", null, __jsx(Checkbox, getToggleAllPageRowsSelectedProps())),\n      // The cell can use the individual row's getToggleRowSelectedProps method\n      // to the render a checkbox\n      Cell: ({\n        row\n      }) => __jsx(\"div\", null, __jsx(Checkbox, row.getToggleRowSelectedProps()))\n    }, ...columns]);\n  });\n  const {\n    pageIndex,\n    pageSize,\n    selectedRowIds\n  } = state;\n  const spring = React.useMemo(() => ({\n    type: 'spring',\n    damping: 50,\n    stiffness: 100\n  }), []);\n  return __jsx(React.Fragment, null, __jsx(\"table\", getTableProps(), __jsx(\"thead\", null, headerGroups.map(headerGroup => __jsx(\"tr\", headerGroup.getHeaderGroupProps(), headerGroup.headers.map(column => __jsx(motion.th, column.getHeaderProps({\n    layoutTransition: spring,\n    style: {}\n  }), __jsx(\"div\", column.getSortByToggleProps(), column.render('Header'), __jsx(\"span\", null, column.isSorted ? column.isSortedDesc ? ' ðŸ”½' : ' ðŸ”¼' : '')), __jsx(\"div\", null, column.canFilter ? column.render('Filter') : null))))), (globalFilter === null || globalFilter === void 0 ? void 0 : globalFilter.use) && __jsx(\"tr\", null, __jsx(\"th\", {\n    colSpan: visibleColumns.length,\n    style: {\n      textAlign: 'left'\n    }\n  }, __jsx(globalFilter.component, {\n    preGlobalFilteredRows: preGlobalFilteredRows,\n    globalFilter: state.globalFilter,\n    setGlobalFilter: setGlobalFilter\n  })))), __jsx(\"tbody\", getTableBodyProps(), __jsx(AnimatePresence, null, page.map((row, i) => {\n    prepareRow(row);\n    return __jsx(motion.tr, row.getRowProps({\n      layoutTransition: spring,\n      exit: {\n        opacity: 0,\n        maxHeight: 0\n      }\n    }), row.cells.map((cell, i) => {\n      return __jsx(motion.td, cell.getCellProps({\n        layoutTransition: spring\n      }), cell.render('Cell'));\n    }));\n  })))), __jsx(\"div\", {\n    className: \"pagination\"\n  }, __jsx(\"button\", {\n    onClick: () => gotoPage(0),\n    disabled: !canPreviousPage\n  }, '<<'), ' ', __jsx(\"button\", {\n    onClick: () => previousPage(),\n    disabled: !canPreviousPage\n  }, '<'), ' ', __jsx(\"button\", {\n    onClick: () => nextPage(),\n    disabled: !canNextPage\n  }, '>'), ' ', __jsx(\"button\", {\n    onClick: () => gotoPage(pageCount - 1),\n    disabled: !canNextPage\n  }, '>>'), ' ', __jsx(\"span\", null, \"Page\", ' ', __jsx(\"strong\", null, pageIndex + 1, \" of \", pageOptions.length), ' '), __jsx(\"span\", null, \"| Go to page:\", ' ', __jsx(\"input\", {\n    type: \"number\",\n    defaultValue: pageIndex + 1,\n    onChange: e => {\n      const page = e.target.value ? Number(e.target.value) - 1 : 0;\n      gotoPage(page);\n    },\n    style: {\n      width: '100px'\n    }\n  })), ' ', __jsx(\"select\", {\n    value: pageSize,\n    onChange: e => {\n      setPageSize(Number(e.target.value));\n    }\n  }, [10, 20, 30, 40, 50].map(pageSize => __jsx(\"option\", {\n    key: pageSize,\n    value: pageSize\n  }, \"Show \", pageSize)))), __jsx(\"pre\", null, __jsx(\"code\", null, JSON.stringify({\n    state,\n    selectedRowIds: selectedRowIds,\n    'selectedFlatRows[].original': selectedFlatRows.map(d => d.original)\n  }, null, 2))));\n}","map":{"version":3,"sources":["/mnt/c/Users/arash/Documents/DevInDoc/Getaboard/demoEmail/reward-test/src/components/Table.tsx"],"names":["React","useEffect","useState","useTable","usePagination","useRowSelect","useSortBy","useFilters","useColumnOrder","useGlobalFilter","motion","AnimatePresence","matchSorter","styled","Checkbox","Styles","div","DefaultColumnFilter","column","filterValue","preFilteredRows","setFilter","count","length","e","target","value","undefined","fuzzyTextFilterFn","rows","id","keys","row","values","autoRemove","val","TableComponent","columns","data","setData","editableFields","options","skipPageReset","setSkipPageReset","updateData","rowIndex","columnId","old","map","index","Table","globalFilter","EditableCell","initialValue","setValue","onChange","onBlur","includes","defaultColumn","useMemo","Filter","Cell","getTableProps","getTableBodyProps","headerGroups","prepareRow","page","canPreviousPage","canNextPage","pageOptions","pageCount","gotoPage","nextPage","previousPage","setGlobalFilter","setGlobalFilteredRows","setPageSize","selectedFlatRows","visibleColumns","preGlobalFilteredRows","state","autoResetPage","hooks","push","Header","getToggleAllPageRowsSelectedProps","getToggleRowSelectedProps","pageIndex","pageSize","selectedRowIds","spring","type","damping","stiffness","headerGroup","getHeaderGroupProps","headers","getHeaderProps","layoutTransition","style","getSortByToggleProps","render","isSorted","isSortedDesc","canFilter","use","textAlign","i","getRowProps","exit","opacity","maxHeight","cells","cell","getCellProps","Number","width","JSON","stringify","d","original"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport clsx from 'clsx'\nimport {\n  useTable,\n  usePagination,\n  useRowSelect,\n  useSortBy,\n  useFilters,\n  useColumnOrder,\n  useGlobalFilter,\n  useAsyncDebounce,\n} from 'react-table'\nimport { motion, AnimatePresence } from 'framer-motion'\nimport matchSorter from 'match-sorter'\n\nimport styled from 'styled-components'\nimport Input from './Input'\nimport Checkbox from './Checkbox'\n\nexport interface Props {\n  className?: string | Record<string, unknown>\n  ordered?: boolean\n  item?: boolean\n}\n\nexport interface gFilterProps {\n  preGlobalFilteredRows: unknown\n  globalFilter: unknown\n  setGlobalFilter: unknown\n}\n\nexport type gFilterState = unknown\n\nconst Styles = styled.div`\n  padding: 1rem;\n\n  table {\n    border-spacing: 0;\n    border: 1px solid black;\n\n    tr {\n      :last-child {\n        td {\n          border-bottom: 0;\n        }\n      }\n    }\n\n    th,\n    td {\n      margin: 0;\n      padding: 0.5rem;\n      border-bottom: 1px solid black;\n      border-right: 1px solid black;\n\n      :last-child {\n        border-right: 0;\n      }\n\n      input {\n        font-size: 1rem;\n        padding: 0;\n        margin: 0;\n        border: 0;\n      }\n    }\n\n    .pagination {\n      padding: 0.5rem;\n    }\n  }\n`\n\n// Define a default UI for filtering\nfunction DefaultColumnFilter({\n  column: { filterValue, preFilteredRows, setFilter },\n}) {\n  const count = preFilteredRows.length\n\n  return (\n    <input\n      value={filterValue || ''}\n      onChange={(e) => {\n        setFilter(e.target.value || undefined) // Set undefined to remove the filter entirely\n      }}\n      placeholder={`Search ${count} records...`}\n    />\n  )\n}\n\nfunction fuzzyTextFilterFn(rows, id, filterValue) {\n  return matchSorter(rows, filterValue, { keys: [(row) => row.values[id]] })\n}\n\n// Let the table remove the filter if the string is empty\nfuzzyTextFilterFn.autoRemove = (val) => !val\n\nfunction TableComponent({\n  columns,\n  data,\n  setData,\n  editableFields,\n  options,\n}: {\n  options?: {\n    globalFilter?: {\n      use: boolean\n      component: React.Component<gFilterProps, gFilterState>\n    }\n  }\n  editableFields?: Array<unknown>\n  columns: {\n    Header?: string\n    columns: {\n      Header: string\n      accessor: string\n      Cell?: unknown\n    }[]\n  }[]\n  data: Record<string, unknown>\n  setData: React.Dispatch<unknown>\n}) {\n  const [skipPageReset, setSkipPageReset] = useState(false)\n\n  // We need to keep the table from resetting the pageIndex when we\n  // Update data. So we can keep track of that flag with a ref.\n\n  // When our cell renderer calls updateMyData, we'll use\n  // the rowIndex, columnId and new value to update the\n  // original data\n  const updateData = (rowIndex, columnId, value) => {\n    // We also turn on the flag to not reset the page\n    setSkipPageReset(true)\n    setData((old) =>\n      old.map((row, index) => {\n        if (index === rowIndex) {\n          return {\n            ...old[rowIndex],\n            [columnId]: value,\n          }\n        }\n        return row\n      })\n    )\n  }\n\n  // After data chagnes, we turn the flag back off\n  // so that if data actually changes when we're not\n  // editing it, the page is reset\n  useEffect(() => {\n    setSkipPageReset(false)\n  }, [data])\n\n  return (\n    <Styles>\n      <Table\n        columns={columns}\n        data={data}\n        updateData={updateData}\n        skipPageReset={skipPageReset}\n        editableFields={editableFields}\n        options={options}\n      />\n    </Styles>\n  )\n}\n\nexport default TableComponent\n\n// Be sure to pass our updateData and the skipPageReset option\nfunction Table({\n  columns,\n  data,\n  updateData,\n  skipPageReset,\n  editableFields,\n  options,\n}) {\n  const { globalFilter } = options || {}\n  // Create an editable cell renderer\n  const EditableCell = ({\n    value: initialValue,\n    row: { index },\n    column: { id },\n    updateData, // This is a custom function that we supplied to our table instance\n  }) => {\n    // We need to keep and update the state of the cell normally\n    const [value, setValue] = useState(initialValue)\n\n    const onChange = (e) => {\n      setValue(e.target.value)\n    }\n\n    // We'll only update the external data when the input is blurred\n    const onBlur = () => {\n      updateData(index, id, value)\n    }\n\n    // If the initialValue is changed external, sync it up with our state\n    useEffect(() => {\n      setValue(initialValue)\n    }, [initialValue])\n\n    return editableFields.includes(id) ? (\n      <input\n        value={value}\n        onChange={onChange}\n        onBlur={onBlur}\n        className=\"w-full bg-transparent\"\n      />\n    ) : (\n      <p>{value}</p>\n    )\n  }\n\n  const defaultColumn = React.useMemo(\n    () => ({\n      // Let's set up our default Filter UI\n      Filter: DefaultColumnFilter,\n      Cell: EditableCell,\n    }),\n    []\n  )\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    prepareRow,\n    page,\n    canPreviousPage,\n    canNextPage,\n    pageOptions,\n    pageCount,\n    gotoPage,\n    nextPage,\n    previousPage,\n    setGlobalFilter,\n    setGlobalFilteredRows,\n    setPageSize,\n    selectedFlatRows,\n    visibleColumns,\n    preGlobalFilteredRows,\n    // setColumnOrder,\n    state,\n  } = useTable(\n    {\n      columns,\n      data,\n      defaultColumn,\n      // use the skipPageReset option to disable page resetting temporarily\n      autoResetPage: !skipPageReset,\n      updateData,\n    },\n    useColumnOrder,\n    useFilters,\n    useGlobalFilter,\n    useSortBy,\n    usePagination,\n    useRowSelect,\n    (hooks) => {\n      hooks.visibleColumns.push((columns) => [\n        // Let's make a column for selection\n        {\n          id: 'selection',\n          // The header can use the table's getToggleAllRowsSelectedProps method\n          // to render a checkbox\n          Header: ({ getToggleAllPageRowsSelectedProps }) => (\n            <div>\n              <Checkbox {...getToggleAllPageRowsSelectedProps()} />\n            </div>\n          ),\n          // The cell can use the individual row's getToggleRowSelectedProps method\n          // to the render a checkbox\n          Cell: ({ row }) => (\n            <div>\n              <Checkbox {...row.getToggleRowSelectedProps()} />\n            </div>\n          ),\n        },\n        ...columns,\n      ])\n    }\n  )\n\n  const { pageIndex, pageSize, selectedRowIds } = state\n\n  const spring = React.useMemo(\n    () => ({\n      type: 'spring',\n      damping: 50,\n      stiffness: 100,\n    }),\n    []\n  )\n\n  return (\n    <>\n      <table {...getTableProps()}>\n        <thead>\n          {headerGroups.map((headerGroup) => (\n            <tr {...headerGroup.getHeaderGroupProps()}>\n              {headerGroup.headers.map((column) => (\n                <motion.th\n                  {...column.getHeaderProps({\n                    layoutTransition: spring,\n                    style: {},\n                  })}\n                >\n                  <div {...column.getSortByToggleProps()}>\n                    {column.render('Header')}\n                    <span>\n                      {column.isSorted\n                        ? column.isSortedDesc\n                          ? ' ðŸ”½'\n                          : ' ðŸ”¼'\n                        : ''}\n                    </span>\n                  </div>\n                  <div>{column.canFilter ? column.render('Filter') : null}</div>\n                </motion.th>\n              ))}\n            </tr>\n          ))}\n          {globalFilter?.use && (\n            <tr>\n              <th\n                colSpan={visibleColumns.length}\n                style={{\n                  textAlign: 'left',\n                }}\n              >\n                <globalFilter.component\n                  preGlobalFilteredRows={preGlobalFilteredRows}\n                  globalFilter={state.globalFilter}\n                  setGlobalFilter={setGlobalFilter}\n                />\n              </th>\n            </tr>\n          )}\n        </thead>\n        <tbody {...getTableBodyProps()}>\n          <AnimatePresence>\n            {page.map((row, i) => {\n              prepareRow(row)\n              return (\n                <motion.tr\n                  {...row.getRowProps({\n                    layoutTransition: spring,\n                    exit: { opacity: 0, maxHeight: 0 },\n                  })}\n                >\n                  {row.cells.map((cell, i) => {\n                    return (\n                      <motion.td\n                        {...cell.getCellProps({\n                          layoutTransition: spring,\n                        })}\n                      >\n                        {cell.render('Cell')}\n                      </motion.td>\n                    )\n                  })}\n                </motion.tr>\n              )\n            })}\n          </AnimatePresence>\n        </tbody>\n      </table>\n      <div className=\"pagination\">\n        <button onClick={() => gotoPage(0)} disabled={!canPreviousPage}>\n          {'<<'}\n        </button>{' '}\n        <button onClick={() => previousPage()} disabled={!canPreviousPage}>\n          {'<'}\n        </button>{' '}\n        <button onClick={() => nextPage()} disabled={!canNextPage}>\n          {'>'}\n        </button>{' '}\n        <button onClick={() => gotoPage(pageCount - 1)} disabled={!canNextPage}>\n          {'>>'}\n        </button>{' '}\n        <span>\n          Page{' '}\n          <strong>\n            {pageIndex + 1} of {pageOptions.length}\n          </strong>{' '}\n        </span>\n        <span>\n          | Go to page:{' '}\n          <input\n            type=\"number\"\n            defaultValue={pageIndex + 1}\n            onChange={(e) => {\n              const page = e.target.value ? Number(e.target.value) - 1 : 0\n              gotoPage(page)\n            }}\n            style={{\n              width: '100px',\n            }}\n          />\n        </span>{' '}\n        <select\n          value={pageSize}\n          onChange={(e) => {\n            setPageSize(Number(e.target.value))\n          }}\n        >\n          {[10, 20, 30, 40, 50].map((pageSize) => (\n            <option key={pageSize} value={pageSize}>\n              Show {pageSize}\n            </option>\n          ))}\n        </select>\n      </div>\n      <pre>\n        <code>\n          {JSON.stringify(\n            {\n              state,\n              selectedRowIds: selectedRowIds,\n              'selectedFlatRows[].original': selectedFlatRows.map(\n                (d) => d.original\n              ),\n            },\n            null,\n            2\n          )}\n        </code>\n      </pre>\n    </>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}