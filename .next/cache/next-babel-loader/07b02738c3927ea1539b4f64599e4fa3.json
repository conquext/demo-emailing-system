{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  padding: 1rem;\\n\\n  table {\\n    border-spacing: 0;\\n    border: 1px solid black;\\n\\n    tr {\\n      :last-child {\\n        td {\\n          border-bottom: 0;\\n        }\\n      }\\n    }\\n\\n    th,\\n    td {\\n      margin: 0;\\n      padding: 0.5rem;\\n      border-bottom: 1px solid black;\\n      border-right: 1px solid black;\\n\\n      :last-child {\\n        border-right: 0;\\n      }\\n\\n      input {\\n        font-size: 1rem;\\n        padding: 0;\\n        margin: 0;\\n        border: 0;\\n      }\\n    }\\n\\n    .pagination {\\n      padding: 0.5rem;\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useEffect, useState } from 'react';\nimport { useTable, usePagination, useRowSelect, useSortBy, useFilters, useColumnOrder, useGlobalFilter } from 'react-table';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport matchSorter from 'match-sorter';\nimport styled from 'styled-components';\nimport Checkbox from './Checkbox';\nvar Styles = styled.div(_templateObject());\n_c = Styles;\n\nfunction fuzzyTextFilterFn(rows, id, filterValue) {\n  return matchSorter(rows, filterValue, {\n    keys: [function (row) {\n      return row.values[id];\n    }]\n  });\n} // Let the table remove the filter if the string is empty\n\n\nfuzzyTextFilterFn.autoRemove = function (val) {\n  return !val;\n};\n\nfunction TableComponent(_ref) {\n  _s();\n\n  var columns = _ref.columns,\n      data = _ref.data,\n      setData = _ref.setData,\n      defaultColumn = _ref.defaultColumn,\n      options = _ref.options;\n\n  var _useState = useState(false),\n      skipPageReset = _useState[0],\n      setSkipPageReset = _useState[1]; // We need to keep the table from resetting the pageIndex when we\n  // Update data. So we can keep track of that flag with a ref.\n  // When our cell renderer calls updateMyData, we'll use\n  // the rowIndex, columnId and new value to update the\n  // original data\n\n\n  var updateData = function updateData(rowIndex, columnId, value) {\n    // We also turn on the flag to not reset the page\n    setSkipPageReset(true);\n    setData(function (old) {\n      return old.map(function (row, index) {\n        if (index === rowIndex) {\n          return _objectSpread(_objectSpread({}, old[rowIndex]), {}, _defineProperty({}, columnId, value));\n        }\n\n        return row;\n      });\n    });\n  }; // After data chagnes, we turn the flag back off\n  // so that if data actually changes when we're not\n  // editing it, the page is reset\n\n\n  useEffect(function () {\n    setSkipPageReset(false);\n  }, [data]);\n  return __jsx(Styles, null, __jsx(Table, {\n    columns: columns,\n    data: data,\n    updateData: updateData,\n    skipPageReset: skipPageReset,\n    defaultColumn: defaultColumn,\n    options: options\n  }));\n}\n\n_s(TableComponent, \"sA641OB1DfZVk+1S50kd2PP+SoU=\");\n\n_c2 = TableComponent;\nexport default TableComponent; // Be sure to pass our updateData and the skipPageReset option\n\nfunction Table(_ref2) {\n  _s2();\n\n  var columns = _ref2.columns,\n      data = _ref2.data,\n      updateData = _ref2.updateData,\n      skipPageReset = _ref2.skipPageReset,\n      defaultColumn = _ref2.defaultColumn,\n      options = _ref2.options;\n\n  var _ref3 = options || {},\n      globalFilter = _ref3.globalFilter;\n\n  var _useTable = useTable({\n    columns: columns,\n    data: data,\n    defaultColumn: defaultColumn || {},\n    // use the skipPageReset option to disable page resetting temporarily\n    autoResetPage: !skipPageReset,\n    updateData: updateData\n  }, useColumnOrder, useFilters, useGlobalFilter, useSortBy, usePagination, useRowSelect, function (hooks) {\n    hooks.visibleColumns.push(function (columns) {\n      return [// Let's make a column for selection\n      {\n        id: 'selection',\n        // The header can use the table's getToggleAllRowsSelectedProps method\n        // to render a checkbox\n        Header: function Header(_ref4) {\n          var getToggleAllPageRowsSelectedProps = _ref4.getToggleAllPageRowsSelectedProps;\n          return __jsx(\"div\", null, __jsx(Checkbox, getToggleAllPageRowsSelectedProps()));\n        },\n        // The cell can use the individual row's getToggleRowSelectedProps method\n        // to the render a checkbox\n        Cell: function Cell(_ref5) {\n          var row = _ref5.row;\n          return __jsx(\"div\", null, __jsx(Checkbox, row.getToggleRowSelectedProps()));\n        }\n      }].concat(_toConsumableArray(columns));\n    });\n  }),\n      getTableProps = _useTable.getTableProps,\n      getTableBodyProps = _useTable.getTableBodyProps,\n      headerGroups = _useTable.headerGroups,\n      prepareRow = _useTable.prepareRow,\n      page = _useTable.page,\n      canPreviousPage = _useTable.canPreviousPage,\n      canNextPage = _useTable.canNextPage,\n      pageOptions = _useTable.pageOptions,\n      pageCount = _useTable.pageCount,\n      gotoPage = _useTable.gotoPage,\n      nextPage = _useTable.nextPage,\n      previousPage = _useTable.previousPage,\n      setGlobalFilter = _useTable.setGlobalFilter,\n      setGlobalFilteredRows = _useTable.setGlobalFilteredRows,\n      setPageSize = _useTable.setPageSize,\n      selectedFlatRows = _useTable.selectedFlatRows,\n      visibleColumns = _useTable.visibleColumns,\n      preGlobalFilteredRows = _useTable.preGlobalFilteredRows,\n      state = _useTable.state;\n\n  var pageIndex = state.pageIndex,\n      pageSize = state.pageSize,\n      selectedRowIds = state.selectedRowIds;\n  var spring = React.useMemo(function () {\n    return {\n      type: 'spring',\n      damping: 50,\n      stiffness: 100\n    };\n  }, []);\n  return __jsx(React.Fragment, null, __jsx(\"table\", getTableProps(), __jsx(\"thead\", null, headerGroups.map(function (headerGroup) {\n    return __jsx(\"tr\", headerGroup.getHeaderGroupProps(), headerGroup.headers.map(function (column) {\n      return __jsx(motion.th, column.getHeaderProps({\n        layoutTransition: spring,\n        style: {}\n      }), __jsx(\"div\", column.getSortByToggleProps(), column.render('Header'), __jsx(\"span\", null, column.isSorted ? column.isSortedDesc ? ' ðŸ”½' : ' ðŸ”¼' : '')), __jsx(\"div\", null, column.canFilter ? column.render('Filter') : null));\n    }));\n  }), (globalFilter === null || globalFilter === void 0 ? void 0 : globalFilter.use) && __jsx(\"tr\", null, __jsx(\"th\", {\n    colSpan: visibleColumns.length,\n    style: {\n      textAlign: 'left'\n    }\n  }, __jsx(globalFilter.component, {\n    preGlobalFilteredRows: preGlobalFilteredRows,\n    globalFilter: state.globalFilter,\n    setGlobalFilter: setGlobalFilter\n  })))), __jsx(\"tbody\", getTableBodyProps(), __jsx(AnimatePresence, null, page.map(function (row, i) {\n    prepareRow(row);\n    return __jsx(motion.tr, row.getRowProps({\n      layoutTransition: spring,\n      exit: {\n        opacity: 0,\n        maxHeight: 0\n      }\n    }), row.cells.map(function (cell, i) {\n      return __jsx(motion.td, cell.getCellProps({\n        layoutTransition: spring\n      }), cell.render('Cell'));\n    }));\n  })))), __jsx(\"div\", {\n    className: \"pagination\"\n  }, __jsx(\"button\", {\n    onClick: function onClick() {\n      return gotoPage(0);\n    },\n    disabled: !canPreviousPage\n  }, '<<'), ' ', __jsx(\"button\", {\n    onClick: function onClick() {\n      return previousPage();\n    },\n    disabled: !canPreviousPage\n  }, '<'), ' ', __jsx(\"button\", {\n    onClick: function onClick() {\n      return nextPage();\n    },\n    disabled: !canNextPage\n  }, '>'), ' ', __jsx(\"button\", {\n    onClick: function onClick() {\n      return gotoPage(pageCount - 1);\n    },\n    disabled: !canNextPage\n  }, '>>'), ' ', __jsx(\"span\", null, \"Page\", ' ', __jsx(\"strong\", null, pageIndex + 1, \" of \", pageOptions.length), ' '), __jsx(\"span\", null, \"| Go to page:\", ' ', __jsx(\"input\", {\n    type: \"number\",\n    defaultValue: pageIndex + 1,\n    onChange: function onChange(e) {\n      var page = e.target.value ? Number(e.target.value) - 1 : 0;\n      gotoPage(page);\n    },\n    style: {\n      width: '100px'\n    }\n  })), ' ', __jsx(\"select\", {\n    value: pageSize,\n    onChange: function onChange(e) {\n      setPageSize(Number(e.target.value));\n    }\n  }, [10, 20, 30, 40, 50].map(function (pageSize) {\n    return __jsx(\"option\", {\n      key: pageSize,\n      value: pageSize\n    }, \"Show \", pageSize);\n  }))), __jsx(\"pre\", null, __jsx(\"code\", null, JSON.stringify({\n    state: state,\n    selectedRowIds: selectedRowIds,\n    'selectedFlatRows[].original': selectedFlatRows.map(function (d) {\n      return d.original;\n    })\n  }, null, 2))));\n}\n\n_s2(Table, \"kI70J72GqH26JKT3ut1LfpLFBdE=\", false, function () {\n  return [useTable];\n});\n\n_c3 = Table;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Styles\");\n$RefreshReg$(_c2, \"TableComponent\");\n$RefreshReg$(_c3, \"Table\");","map":{"version":3,"sources":["/mnt/c/Users/arash/Documents/DevInDoc/Getaboard/demoEmail/reward-test/src/components/Table.tsx"],"names":["React","useEffect","useState","useTable","usePagination","useRowSelect","useSortBy","useFilters","useColumnOrder","useGlobalFilter","motion","AnimatePresence","matchSorter","styled","Checkbox","Styles","div","fuzzyTextFilterFn","rows","id","filterValue","keys","row","values","autoRemove","val","TableComponent","columns","data","setData","defaultColumn","options","skipPageReset","setSkipPageReset","updateData","rowIndex","columnId","value","old","map","index","Table","globalFilter","autoResetPage","hooks","visibleColumns","push","Header","getToggleAllPageRowsSelectedProps","Cell","getToggleRowSelectedProps","getTableProps","getTableBodyProps","headerGroups","prepareRow","page","canPreviousPage","canNextPage","pageOptions","pageCount","gotoPage","nextPage","previousPage","setGlobalFilter","setGlobalFilteredRows","setPageSize","selectedFlatRows","preGlobalFilteredRows","state","pageIndex","pageSize","selectedRowIds","spring","useMemo","type","damping","stiffness","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","layoutTransition","style","getSortByToggleProps","render","isSorted","isSortedDesc","canFilter","use","length","textAlign","i","getRowProps","exit","opacity","maxHeight","cells","cell","getCellProps","e","target","Number","width","JSON","stringify","d","original"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport clsx from 'clsx'\nimport {\n  useTable,\n  usePagination,\n  useRowSelect,\n  useSortBy,\n  useFilters,\n  useColumnOrder,\n  useGlobalFilter,\n  useAsyncDebounce,\n} from 'react-table'\nimport { motion, AnimatePresence } from 'framer-motion'\nimport matchSorter from 'match-sorter'\n\nimport styled from 'styled-components'\nimport Input from './Input'\nimport Checkbox from './Checkbox'\n\nexport interface Props {\n  className?: string | Record<string, unknown>\n  ordered?: boolean\n  item?: boolean\n}\n\nexport interface gFilterProps {\n  preGlobalFilteredRows: unknown\n  globalFilter: unknown\n  setGlobalFilter: unknown\n}\n\nexport type gFilterState = unknown\n\nexport type filterColumnProps = unknown\n\nconst Styles = styled.div`\n  padding: 1rem;\n\n  table {\n    border-spacing: 0;\n    border: 1px solid black;\n\n    tr {\n      :last-child {\n        td {\n          border-bottom: 0;\n        }\n      }\n    }\n\n    th,\n    td {\n      margin: 0;\n      padding: 0.5rem;\n      border-bottom: 1px solid black;\n      border-right: 1px solid black;\n\n      :last-child {\n        border-right: 0;\n      }\n\n      input {\n        font-size: 1rem;\n        padding: 0;\n        margin: 0;\n        border: 0;\n      }\n    }\n\n    .pagination {\n      padding: 0.5rem;\n    }\n  }\n`\n\nfunction fuzzyTextFilterFn(rows, id, filterValue) {\n  return matchSorter(rows, filterValue, { keys: [(row) => row.values[id]] })\n}\n\n// Let the table remove the filter if the string is empty\nfuzzyTextFilterFn.autoRemove = (val) => !val\n\nfunction TableComponent({\n  columns,\n  data,\n  setData,\n  defaultColumn,\n  options,\n}: {\n  options?: {\n    globalFilter?: {\n      use: boolean\n      component: React.Component<gFilterProps, gFilterState>\n    }\n  }\n  defaultColumn?: {\n    Filter?: React.Component<filterColumnProps, unknown>\n    Cell?: unknown\n  }\n  columns: {\n    Header?: string\n    columns: {\n      Header: string\n      accessor: string\n      Cell?: unknown\n    }[]\n  }[]\n  data: Record<string, unknown>\n  setData: React.Dispatch<unknown>\n}) {\n  const [skipPageReset, setSkipPageReset] = useState(false)\n\n  // We need to keep the table from resetting the pageIndex when we\n  // Update data. So we can keep track of that flag with a ref.\n\n  // When our cell renderer calls updateMyData, we'll use\n  // the rowIndex, columnId and new value to update the\n  // original data\n  const updateData = (rowIndex, columnId, value) => {\n    // We also turn on the flag to not reset the page\n    setSkipPageReset(true)\n    setData((old) =>\n      old.map((row, index) => {\n        if (index === rowIndex) {\n          return {\n            ...old[rowIndex],\n            [columnId]: value,\n          }\n        }\n        return row\n      })\n    )\n  }\n\n  // After data chagnes, we turn the flag back off\n  // so that if data actually changes when we're not\n  // editing it, the page is reset\n  useEffect(() => {\n    setSkipPageReset(false)\n  }, [data])\n\n  return (\n    <Styles>\n      <Table\n        columns={columns}\n        data={data}\n        updateData={updateData}\n        skipPageReset={skipPageReset}\n        defaultColumn={defaultColumn}\n        options={options}\n      />\n    </Styles>\n  )\n}\n\nexport default TableComponent\n\n// Be sure to pass our updateData and the skipPageReset option\nfunction Table({\n  columns,\n  data,\n  updateData,\n  skipPageReset,\n  defaultColumn,\n  options,\n}) {\n  const { globalFilter } = options || {}\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    prepareRow,\n    page,\n    canPreviousPage,\n    canNextPage,\n    pageOptions,\n    pageCount,\n    gotoPage,\n    nextPage,\n    previousPage,\n    setGlobalFilter,\n    setGlobalFilteredRows,\n    setPageSize,\n    selectedFlatRows,\n    visibleColumns,\n    preGlobalFilteredRows,\n    // setColumnOrder,\n    state,\n  } = useTable(\n    {\n      columns,\n      data,\n      defaultColumn: defaultColumn || {},\n      // use the skipPageReset option to disable page resetting temporarily\n      autoResetPage: !skipPageReset,\n      updateData,\n    },\n    useColumnOrder,\n    useFilters,\n    useGlobalFilter,\n    useSortBy,\n    usePagination,\n    useRowSelect,\n    (hooks) => {\n      hooks.visibleColumns.push((columns) => [\n        // Let's make a column for selection\n        {\n          id: 'selection',\n          // The header can use the table's getToggleAllRowsSelectedProps method\n          // to render a checkbox\n          Header: ({ getToggleAllPageRowsSelectedProps }) => (\n            <div>\n              <Checkbox {...getToggleAllPageRowsSelectedProps()} />\n            </div>\n          ),\n          // The cell can use the individual row's getToggleRowSelectedProps method\n          // to the render a checkbox\n          Cell: ({ row }) => (\n            <div>\n              <Checkbox {...row.getToggleRowSelectedProps()} />\n            </div>\n          ),\n        },\n        ...columns,\n      ])\n    }\n  )\n\n  const { pageIndex, pageSize, selectedRowIds } = state\n\n  const spring = React.useMemo(\n    () => ({\n      type: 'spring',\n      damping: 50,\n      stiffness: 100,\n    }),\n    []\n  )\n\n  return (\n    <>\n      <table {...getTableProps()}>\n        <thead>\n          {headerGroups.map((headerGroup) => (\n            <tr {...headerGroup.getHeaderGroupProps()}>\n              {headerGroup.headers.map((column) => (\n                <motion.th\n                  {...column.getHeaderProps({\n                    layoutTransition: spring,\n                    style: {},\n                  })}\n                >\n                  <div {...column.getSortByToggleProps()}>\n                    {column.render('Header')}\n                    <span>\n                      {column.isSorted\n                        ? column.isSortedDesc\n                          ? ' ðŸ”½'\n                          : ' ðŸ”¼'\n                        : ''}\n                    </span>\n                  </div>\n                  <div>{column.canFilter ? column.render('Filter') : null}</div>\n                </motion.th>\n              ))}\n            </tr>\n          ))}\n          {globalFilter?.use && (\n            <tr>\n              <th\n                colSpan={visibleColumns.length}\n                style={{\n                  textAlign: 'left',\n                }}\n              >\n                <globalFilter.component\n                  preGlobalFilteredRows={preGlobalFilteredRows}\n                  globalFilter={state.globalFilter}\n                  setGlobalFilter={setGlobalFilter}\n                />\n              </th>\n            </tr>\n          )}\n        </thead>\n        <tbody {...getTableBodyProps()}>\n          <AnimatePresence>\n            {page.map((row, i) => {\n              prepareRow(row)\n              return (\n                <motion.tr\n                  {...row.getRowProps({\n                    layoutTransition: spring,\n                    exit: { opacity: 0, maxHeight: 0 },\n                  })}\n                >\n                  {row.cells.map((cell, i) => {\n                    return (\n                      <motion.td\n                        {...cell.getCellProps({\n                          layoutTransition: spring,\n                        })}\n                      >\n                        {cell.render('Cell')}\n                      </motion.td>\n                    )\n                  })}\n                </motion.tr>\n              )\n            })}\n          </AnimatePresence>\n        </tbody>\n      </table>\n      <div className=\"pagination\">\n        <button onClick={() => gotoPage(0)} disabled={!canPreviousPage}>\n          {'<<'}\n        </button>{' '}\n        <button onClick={() => previousPage()} disabled={!canPreviousPage}>\n          {'<'}\n        </button>{' '}\n        <button onClick={() => nextPage()} disabled={!canNextPage}>\n          {'>'}\n        </button>{' '}\n        <button onClick={() => gotoPage(pageCount - 1)} disabled={!canNextPage}>\n          {'>>'}\n        </button>{' '}\n        <span>\n          Page{' '}\n          <strong>\n            {pageIndex + 1} of {pageOptions.length}\n          </strong>{' '}\n        </span>\n        <span>\n          | Go to page:{' '}\n          <input\n            type=\"number\"\n            defaultValue={pageIndex + 1}\n            onChange={(e) => {\n              const page = e.target.value ? Number(e.target.value) - 1 : 0\n              gotoPage(page)\n            }}\n            style={{\n              width: '100px',\n            }}\n          />\n        </span>{' '}\n        <select\n          value={pageSize}\n          onChange={(e) => {\n            setPageSize(Number(e.target.value))\n          }}\n        >\n          {[10, 20, 30, 40, 50].map((pageSize) => (\n            <option key={pageSize} value={pageSize}>\n              Show {pageSize}\n            </option>\n          ))}\n        </select>\n      </div>\n      <pre>\n        <code>\n          {JSON.stringify(\n            {\n              state,\n              selectedRowIds: selectedRowIds,\n              'selectedFlatRows[].original': selectedFlatRows.map(\n                (d) => d.original\n              ),\n            },\n            null,\n            2\n          )}\n        </code>\n      </pre>\n    </>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}